{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nimport { observable, computed, action, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport { history } from '../..';\nlet UserStore = (_class = (_temp = class UserStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n\n    _initializerDefineProperty(this, \"user\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"login\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"register\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"getUser\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"logout\", _descriptor5, this);\n\n    this.rootStore = rootStore;\n  }\n\n  get isLoggedIn() {\n    return !!this.user;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"user\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"isLoggedIn\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isLoggedIn\"), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"login\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async values => {\n      try {\n        const user = await agent.User.login(values);\n        runInAction(() => {\n          this.user = user;\n        });\n        this.rootStore.commonStore.setToken(user.token);\n        this.rootStore.modalStore.closeModal();\n        history.push('/activities');\n      } catch (error) {\n        throw error;\n      }\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"register\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async values => {\n      try {\n        const user = await agent.User.register(values);\n        this.rootStore.commonStore.setToken(user.token);\n        this.rootStore.modalStore.closeModal();\n        history.push('/activities');\n      } catch (error) {\n        throw error;\n      }\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"getUser\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      try {\n        const user = await agent.User.current();\n        runInAction(() => {\n          this.user = user;\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"logout\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.rootStore.commonStore.setToken(null);\n      this.user = null;\n      history.push('/');\n    };\n  }\n})), _class);\nexport { UserStore as default };","map":{"version":3,"sources":["C:\\Projects\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts"],"names":["observable","computed","action","runInAction","agent","history","UserStore","constructor","rootStore","isLoggedIn","user","values","User","login","commonStore","setToken","token","modalStore","closeModal","push","error","register","current","console","log"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,WAAvC,QAA0D,MAA1D;AAEA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,SAASC,OAAT,QAAwB,OAAxB;IAEqBC,S,sBAAN,MAAMA,SAAN,CAAgB;AAE7BC,EAAAA,WAAW,CAACC,SAAD,EAAuB;AAAA,SADlCA,SACkC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAChC,SAAKA,SAAL,GAAiBA,SAAjB;AACD;;AAID,MAAcC,UAAd,GAA2B;AACzB,WAAO,CAAC,CAAC,KAAKC,IAAd;AACD;;AAV4B,C,8EAM5BV,U;;;;;WAAgC,I;;+DAEhCC,Q,4JAIAC,M;;;;;WAAe,MAAOS,MAAP,IAAmC;AACjD,UAAI;AACF,cAAMD,IAAI,GAAG,MAAMN,KAAK,CAACQ,IAAN,CAAWC,KAAX,CAAiBF,MAAjB,CAAnB;AACAR,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKO,IAAL,GAAYA,IAAZ;AACD,SAFU,CAAX;AAGA,aAAKF,SAAL,CAAeM,WAAf,CAA2BC,QAA3B,CAAoCL,IAAI,CAACM,KAAzC;AACA,aAAKR,SAAL,CAAeS,UAAf,CAA0BC,UAA1B;AACAb,QAAAA,OAAO,CAACc,IAAR,CAAa,aAAb;AACD,OARD,CAQE,OAAOC,KAAP,EAAc;AACd,cAAMA,KAAN;AACD;AACF,K;;4EAEAlB,M;;;;;WAAkB,MAAOS,MAAP,IAAmC;AACpD,UAAI;AACF,cAAMD,IAAI,GAAG,MAAMN,KAAK,CAACQ,IAAN,CAAWS,QAAX,CAAoBV,MAApB,CAAnB;AACA,aAAKH,SAAL,CAAeM,WAAf,CAA2BC,QAA3B,CAAoCL,IAAI,CAACM,KAAzC;AACA,aAAKR,SAAL,CAAeS,UAAf,CAA0BC,UAA1B;AACAb,QAAAA,OAAO,CAACc,IAAR,CAAa,aAAb;AACD,OALD,CAKE,OAAOC,KAAP,EAAc;AACd,cAAMA,KAAN;AACD;AACF,K;;2EAEAlB,M;;;;;WAAiB,YAAY;AAC5B,UAAI;AACF,cAAMQ,IAAI,GAAG,MAAMN,KAAK,CAACQ,IAAN,CAAWU,OAAX,EAAnB;AACAnB,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKO,IAAL,GAAYA,IAAZ;AACD,SAFU,CAAX;AAGD,OALD,CAKE,OAAOU,KAAP,EAAc;AACdG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD;AACF,K;;0EAEAlB,M;;;;;WAAgB,MAAM;AACrB,WAAKM,SAAL,CAAeM,WAAf,CAA2BC,QAA3B,CAAoC,IAApC;AACA,WAAKL,IAAL,GAAY,IAAZ;AACAL,MAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,K;;;SApDkBb,S","sourcesContent":["import { observable, computed, action, runInAction } from 'mobx';\nimport { IUser, IUserFormValues } from '../models/user';\nimport agent from '../api/agent';\nimport { RootStore } from './rootStore';\nimport { history } from '../..';\n\nexport default class UserStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable user: IUser | null = null;\n\n  @computed get isLoggedIn() {\n    return !!this.user;\n  }\n\n  @action login = async (values: IUserFormValues) => {\n    try {\n      const user = await agent.User.login(values);\n      runInAction(() => {\n        this.user = user;\n      });\n      this.rootStore.commonStore.setToken(user.token);\n      this.rootStore.modalStore.closeModal();\n      history.push('/activities');\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  @action register = async (values: IUserFormValues) => {\n    try {\n      const user = await agent.User.register(values);\n      this.rootStore.commonStore.setToken(user.token);\n      this.rootStore.modalStore.closeModal();\n      history.push('/activities')\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @action getUser = async () => {\n    try {\n      const user = await agent.User.current();\n      runInAction(() => {\n        this.user = user;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @action logout = () => {\n    this.rootStore.commonStore.setToken(null);\n    this.user = null;\n    history.push('/');\n  };\n}\n"]},"metadata":{},"sourceType":"module"}