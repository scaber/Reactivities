{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = dateFnsLocalizer;\nexports.defaultFormats = void 0;\n\nvar _formatWithOptions = _interopRequireDefault(require(\"date-fns/fp/formatWithOptions\"));\n\nvar _parseWithOptions = _interopRequireDefault(require(\"date-fns/fp/parseWithOptions\"));\n\nvar _addYears = _interopRequireDefault(require(\"date-fns/fp/addYears\"));\n\nvar _enUS = _interopRequireDefault(require(\"date-fns/locale/en-US\"));\n\nvar _configure = _interopRequireDefault(require(\"react-widgets/lib/configure\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar endOfDecade = (0, _addYears.default)(10);\nvar endOfCentury = (0, _addYears.default)(100);\n\nfunction getYear(date, culture, localizer) {\n  return localizer.format(date, 'yyyy', culture);\n}\n\nfunction decade(date, culture, localizer) {\n  return getYear(date, culture, localizer) + ' - ' + getYear(endOfDecade(date), culture, localizer);\n}\n\nfunction century(date, culture, localizer) {\n  return getYear(date, culture, localizer) + ' - ' + getYear(endOfCentury(date), culture, localizer);\n}\n\nvar defaultFormats = {\n  date: 'P',\n  time: 'pp',\n  default: 'Pp',\n  header: 'MMMM yyyy',\n  footer: 'PPPP',\n  weekday: 'cccccc',\n  dayOfMonth: 'dd',\n  month: 'MMM',\n  year: 'yyyy',\n  decade: decade,\n  century: century\n  /**\n   * Configures localization of [react-widgets](http://jquense.github.io/react-widgets/) by calling\n   * `configure.setDateLocalizer`\n   * @static\n   * @param {Object} formats Confguration options.\n   * @param {string|Object|function} formats.default  the default date display format, generally a \"long\" format showing\n   *   both date and time\n   * @param {string|Object|function} formats.date A date only format\n   * @param {string|Object|function} formats.time A time only format\n   * @param {string|Object|function} formats.header The heading of the Calendar month view, contextualizes the current\n   *   month, e.g. \"Jan 2014\"\n   * @param {string|Object|function} formats.footer The Calendar footer format, for displaying Today's date\n   * @param {string|Object|function} formats.dayOfMonth The day of the month\n   * @param {string|Object|function} formats.month  Month name, used in the Year view of the Calendar\n   * @param {string|Object|function} formats.year year format, used in the Decade view of the Calendar\n   * @param {string|Object|function} formats.decade a decade format, used in the Century view of the Calendar,\n   *  eg. \"2010 - 2019\"\n   * @param {string|Object|function} formats.century  A century format, used the in the Calendar heading\n   * @param {Object} locales Supported date-fns locales to include in the bundle\n   * @example\n   * import dateFnsLocalizer, { defaultFormats } from 'react-widgets-dates'\n   * dateFnsLocalizer()\n   * // => Works out of the box with default formats (defaultFormats) and the `en-US` locale\n   * const newFormats = Object.assign(defaultFormats, { default: 'mmm YY' })\n   * dateFnsLocalizer({ formats: newFormats })\n   * // => Uses new configuration\n   *\n   * import locales from 'date-fns/locale'\n   * dateFnsLocalizer({ formats: newFormats, locales })\n   * // => Includes all available locales\n   *\n   * import enGB from 'date-fns/locale/en-GB'\n   * import de from 'date-fns/locale/de'\n   * dateFnsLocalizer({ locales: { 'en-GB': enGB, 'de': de } })\n   * // => Include only the locales you need to limit the bundled size\n   */\n\n};\nexports.defaultFormats = defaultFormats;\n\nfunction dateFnsLocalizer(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$formats = _ref.formats,\n      formats = _ref$formats === void 0 ? defaultFormats : _ref$formats,\n      _ref$locales = _ref.locales,\n      locales = _ref$locales === void 0 ? {} : _ref$locales;\n\n  function getLocale(culture) {\n    return locales[culture] || _enUS.default;\n  }\n\n  function format(value, format, culture) {\n    return (0, _formatWithOptions.default)({\n      locale: getLocale(culture)\n    }, format, value);\n  }\n\n  function parse(value, format, culture) {\n    var result = (0, _parseWithOptions.default)({\n      locale: getLocale(culture)\n    }, new Date(), format, value);\n\n    if (result.toString() === 'Invalid Date') {\n      return null;\n    }\n\n    return result;\n  }\n\n  function firstOfWeek(culture) {\n    var _getLocale = getLocale(culture),\n        options = _getLocale.options;\n\n    return options && options.weekStartsOn || 0;\n  }\n\n  _configure.default.setDateLocalizer({\n    formats: formats,\n    firstOfWeek: firstOfWeek,\n    parse: parse,\n    format: format\n  });\n}","map":null,"metadata":{},"sourceType":"script"}