{"ast":null,"code":"import _defineProperty from\"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import React,{useContext}from'react';import{Form as FinalForm,Field}from'react-final-form';import{Form,Button,Header}from'semantic-ui-react';import TextInput from'../../app/common/form/TextInput';import{RootStoreContext}from'../../app/stores/rootStore';import{FORM_ERROR}from'final-form';import{combineValidators,isRequired}from'revalidate';import ErrorMessage from'../../app/common/form/ErrorMessage';var validate=combineValidators({email:isRequired('Email'),password:isRequired('Password')});var LoginForm=function LoginForm(){var rootStore=useContext(RootStoreContext);var login=rootStore.userStore.login;return/*#__PURE__*/React.createElement(FinalForm,{onSubmit:function onSubmit(values){return login(values).catch(function(error){return _defineProperty({},FORM_ERROR,error);});},validate:validate,render:function render(_ref2){var handleSubmit=_ref2.handleSubmit,submitting=_ref2.submitting,submitError=_ref2.submitError,invalid=_ref2.invalid,pristine=_ref2.pristine,dirtySinceLastSubmit=_ref2.dirtySinceLastSubmit;return/*#__PURE__*/React.createElement(Form,{onSubmit:handleSubmit,error:true},/*#__PURE__*/React.createElement(Header,{as:\"h2\",content:\"Login to Reactivities\",color:\"teal\",textAlign:\"center\"}),/*#__PURE__*/React.createElement(Field,{name:\"email\",component:TextInput,placeholder:\"Email\"}),/*#__PURE__*/React.createElement(Field,{name:\"password\",component:TextInput,placeholder:\"Password\",type:\"password\"}),submitError&&!dirtySinceLastSubmit&&/*#__PURE__*/React.createElement(ErrorMessage,{error:submitError,text:\"Invalid email or password\"}),/*#__PURE__*/React.createElement(Button,{disabled:invalid&&!dirtySinceLastSubmit||pristine,loading:submitting,color:\"teal\",content:\"Login\",fluid:true}));}});};export default LoginForm;","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/user/LoginForm.tsx"],"names":["React","useContext","Form","FinalForm","Field","Button","Header","TextInput","RootStoreContext","FORM_ERROR","combineValidators","isRequired","ErrorMessage","validate","email","password","LoginForm","rootStore","login","userStore","values","catch","error","handleSubmit","submitting","submitError","invalid","pristine","dirtySinceLastSubmit"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,IAAI,GAAIC,CAAAA,SAAjB,CAA4BC,KAA5B,KAAyC,kBAAzC,CACA,OAASF,IAAT,CAAeG,MAAf,CAAuBC,MAAvB,KAAqC,mBAArC,CACA,MAAOC,CAAAA,SAAP,KAAsB,iCAAtB,CACA,OAASC,gBAAT,KAAiC,4BAAjC,CAEA,OAASC,UAAT,KAA2B,YAA3B,CACA,OAASC,iBAAT,CAA4BC,UAA5B,KAA8C,YAA9C,CACA,MAAOC,CAAAA,YAAP,KAAyB,oCAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAGH,iBAAiB,CAAC,CACjCI,KAAK,CAAEH,UAAU,CAAC,OAAD,CADgB,CAEjCI,QAAQ,CAAEJ,UAAU,CAAC,UAAD,CAFa,CAAD,CAAlC,CAKA,GAAMK,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAMC,CAAAA,SAAS,CAAGhB,UAAU,CAACO,gBAAD,CAA5B,CADsB,GAEdU,CAAAA,KAFc,CAEJD,SAAS,CAACE,SAFN,CAEdD,KAFc,CAGtB,mBACE,oBAAC,SAAD,EACE,QAAQ,CAAE,kBAACE,MAAD,QACRF,CAAAA,KAAK,CAACE,MAAD,CAAL,CAAcC,KAAd,CAAoB,SAAAC,KAAK,4BACtBb,UADsB,CACTa,KADS,GAAzB,CADQ,EADZ,CAME,QAAQ,CAAET,QANZ,CAOE,MAAM,CAAE,0BACNU,CAAAA,YADM,OACNA,YADM,CAENC,UAFM,OAENA,UAFM,CAGNC,WAHM,OAGNA,WAHM,CAINC,OAJM,OAINA,OAJM,CAKNC,QALM,OAKNA,QALM,CAMNC,oBANM,OAMNA,oBANM,oBAQN,oBAAC,IAAD,EAAM,QAAQ,CAAEL,YAAhB,CAA8B,KAAK,KAAnC,eACE,oBAAC,MAAD,EACE,EAAE,CAAC,IADL,CAEE,OAAO,CAAC,uBAFV,CAGE,KAAK,CAAC,MAHR,CAIE,SAAS,CAAC,QAJZ,EADF,cAOE,oBAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,SAAS,CAAEhB,SAA/B,CAA0C,WAAW,CAAC,OAAtD,EAPF,cAQE,oBAAC,KAAD,EACE,IAAI,CAAC,UADP,CAEE,SAAS,CAAEA,SAFb,CAGE,WAAW,CAAC,UAHd,CAIE,IAAI,CAAC,UAJP,EARF,CAcGkB,WAAW,EAAI,CAACG,oBAAhB,eACC,oBAAC,YAAD,EACE,KAAK,CAAEH,WADT,CAEE,IAAI,CAAC,2BAFP,EAfJ,cAoBE,oBAAC,MAAD,EACE,QAAQ,CAAGC,OAAO,EAAI,CAACE,oBAAb,EAAsCD,QADlD,CAEE,OAAO,CAAEH,UAFX,CAGE,KAAK,CAAC,MAHR,CAIE,OAAO,CAAC,OAJV,CAKE,KAAK,KALP,EApBF,CARM,EAPV,EADF,CA+CD,CAlDD,CAoDA,cAAeR,CAAAA,SAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Form, Button, Header } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { IUserFormValues } from '../../app/models/user';\nimport { FORM_ERROR } from 'final-form';\nimport { combineValidators, isRequired } from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n  email: isRequired('Email'),\n  password: isRequired('Password')\n});\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        login(values).catch(error => ({\n          [FORM_ERROR]: error\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit\n      }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Header\n            as='h2'\n            content='Login to Reactivities'\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='email' component={TextInput} placeholder='Email' />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder='Password'\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n              text='Invalid email or password'\n            />\n          )}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content='Login'\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}