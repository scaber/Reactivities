{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\n\nvar HubConnectionBuilder =\n/** @class */\nfunction () {\n  function HubConnectionBuilder() {}\n\n  HubConnectionBuilder.prototype.configureLogging = function (logging) {\n    Arg.isRequired(logging, \"logging\");\n\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n\n    return this;\n  };\n\n  HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    this.url = url; // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = transportTypeOrOptions;\n    } else {\n      this.httpConnectionOptions = {\n        transport: transportTypeOrOptions\n      };\n    }\n\n    return this;\n  };\n  /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n   */\n\n\n  HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  };\n  /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n   */\n\n\n  HubConnectionBuilder.prototype.build = function () {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    var httpConnectionOptions = this.httpConnectionOptions || {}; // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    } // Now create the connection\n\n\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n\n    var connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol());\n  };\n\n  return HubConnectionBuilder;\n}();\n\nexport { HubConnectionBuilder };\n\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"sources":["../../src/HubConnectionBuilder.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAKA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,UAAT,QAA2B,WAA3B;AACA,SAAS,GAAT,EAAc,aAAd,QAAmC,SAAnC;AAEA;;AACA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,oBAAA,GAAA,CAwHC;;AA3FU,EAAA,oBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,OAAxB,EAAmD;AAC/C,IAAA,GAAG,CAAC,UAAJ,CAAe,OAAf,EAAwB,SAAxB;;AAEA,QAAI,QAAQ,CAAC,OAAD,CAAZ,EAAuB;AACnB,WAAK,MAAL,GAAc,OAAd;AACH,KAFD,MAEO;AACH,WAAK,MAAL,GAAc,IAAI,aAAJ,CAAkB,OAAlB,CAAd;AACH;;AAED,WAAO,IAAP;AACH,GAVM;;AAoCA,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,GAAf,EAA4B,sBAA5B,EAA+F;AAC3F,IAAA,GAAG,CAAC,UAAJ,CAAe,GAAf,EAAoB,KAApB;AAEA,SAAK,GAAL,GAAW,GAAX,CAH2F,CAK3F;AACA;;AACA,QAAI,OAAO,sBAAP,KAAkC,QAAtC,EAAgD;AAC5C,WAAK,qBAAL,GAA6B,sBAA7B;AACH,KAFD,MAEO;AACH,WAAK,qBAAL,GAA6B;AACzB,QAAA,SAAS,EAAE;AADc,OAA7B;AAGH;;AAED,WAAO,IAAP;AACH,GAhBM;AAkBP;;;;;;AAIO,EAAA,oBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,QAAvB,EAA6C;AACzC,IAAA,GAAG,CAAC,UAAJ,CAAe,QAAf,EAAyB,UAAzB;AAEA,SAAK,QAAL,GAAgB,QAAhB;AACA,WAAO,IAAP;AACH,GALM;AAOP;;;;;;AAIO,EAAA,oBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI;AACA;AACA,QAAM,qBAAqB,GAAG,KAAK,qBAAL,IAA8B,EAA5D,CAHJ,CAKI;;AACA,QAAI,qBAAqB,CAAC,MAAtB,KAAiC,SAArC,EAAgD;AAC5C;AACA,MAAA,qBAAqB,CAAC,MAAtB,GAA+B,KAAK,MAApC;AACH,KATL,CAWI;;;AACA,QAAI,CAAC,KAAK,GAAV,EAAe;AACX,YAAM,IAAI,KAAJ,CAAU,0FAAV,CAAN;AACH;;AACD,QAAM,UAAU,GAAG,IAAI,cAAJ,CAAmB,KAAK,GAAxB,EAA6B,qBAA7B,CAAnB;AAEA,WAAO,aAAa,CAAC,MAAd,CACH,UADG,EAEH,KAAK,MAAL,IAAe,UAAU,CAAC,QAFvB,EAGH,KAAK,QAAL,IAAiB,IAAI,eAAJ,EAHd,CAAP;AAIH,GArBM;;AAsBX,SAAA,oBAAA;AAAC,CAxHD,EAAA;;;;AA0HA,SAAA,QAAA,CAAkB,MAAlB,EAA6B;AACzB,SAAO,MAAM,CAAC,GAAP,KAAe,SAAtB;AACH","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** Configures console logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @aspnet/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n    /** Configures custom logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | ILogger} logging An object implementing the {@link @aspnet/signalr.ILogger} interface or {@link @aspnet/signalr.LogLevel}.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = transportTypeOrOptions;\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol());\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}