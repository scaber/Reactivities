{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Constants } from \"../../constants\";\nimport { _ } from \"../../utils\";\n\nvar SetLeftFeature =\n/** @class */\nfunction (_super) {\n  __extends(SetLeftFeature, _super);\n\n  function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {\n    var _this = _super.call(this) || this;\n\n    _this.columnOrGroup = columnOrGroup;\n    _this.eCell = eCell;\n    _this.ariaEl = _this.eCell.querySelector('[role=columnheader]') || _this.eCell;\n    _this.colsSpanning = colsSpanning;\n    _this.beans = beans;\n    _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n    return _this;\n  }\n\n  SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {\n    this.colsSpanning = colsSpanning;\n    this.onLeftChanged();\n  };\n\n  SetLeftFeature.prototype.getColumnOrGroup = function () {\n    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n      return _.last(this.colsSpanning);\n    }\n\n    return this.columnOrGroup;\n  };\n\n  SetLeftFeature.prototype.init = function () {\n    this.addDestroyableEventListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n    this.setLeftFirstTime();\n  };\n\n  SetLeftFeature.prototype.setLeftFirstTime = function () {\n    var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n\n    var oldLeftExists = _.exists(this.columnOrGroup.getOldLeft());\n\n    var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n\n    if (animateColumnMove) {\n      this.animateInLeft();\n    } else {\n      this.onLeftChanged();\n    }\n  };\n\n  SetLeftFeature.prototype.animateInLeft = function () {\n    var _this = this;\n\n    var left = this.getColumnOrGroup().getLeft();\n    var oldLeft = this.getColumnOrGroup().getOldLeft();\n    this.setLeft(oldLeft); // we must keep track of the left we want to set to, as this would otherwise lead to a race\n    // condition, if the user changed the left value many times in one VM turn, then we want to make\n    // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n    // position. eg if user changes column position twice, then setLeft() below executes twice in next\n    // VM turn, but only one (the correct one) should get applied.\n\n    this.actualLeft = left;\n    this.beans.columnAnimationService.executeNextVMTurn(function () {\n      // test this left value is the latest one to be applied, and if not, do nothing\n      if (_this.actualLeft === left) {\n        _this.setLeft(left);\n      }\n    });\n  };\n\n  SetLeftFeature.prototype.onLeftChanged = function () {\n    var colOrGroup = this.getColumnOrGroup();\n    var left = colOrGroup.getLeft();\n    this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n    this.setLeft(this.actualLeft);\n  };\n\n  SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {\n    if (!this.printLayout) {\n      return leftPosition;\n    }\n\n    if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {\n      return leftPosition;\n    }\n\n    if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {\n      var leftWidth_1 = this.beans.columnController.getPinnedLeftContainerWidth();\n      var bodyWidth = this.beans.columnController.getBodyContainerWidth();\n      return leftWidth_1 + bodyWidth + leftPosition;\n    } // is in body\n\n\n    var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\n    return leftWidth + leftPosition;\n  };\n\n  SetLeftFeature.prototype.setLeft = function (value) {\n    // if the value is null, then that means the column is no longer\n    // displayed. there is logic in the rendering to fade these columns\n    // out, so we don't try and change their left positions.\n    if (_.exists(value)) {\n      this.eCell.style.left = value + \"px\";\n    }\n\n    if (this.columnOrGroup instanceof Column) {\n      var colIndex = this.beans.columnController.getAllDisplayedColumns().indexOf(this.columnOrGroup);\n      this.ariaEl.setAttribute('aria-colindex', (colIndex + 1).toString());\n    } else {\n      this.ariaEl.removeAttribute('aria-colindex');\n    }\n  };\n\n  return SetLeftFeature;\n}(BeanStub);\n\nexport { SetLeftFeature };","map":null,"metadata":{},"sourceType":"module"}