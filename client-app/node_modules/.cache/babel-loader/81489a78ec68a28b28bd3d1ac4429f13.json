{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { DragAndDropService, DragSourceType, VerticalDirection } from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, Optional, PostConstruct } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { Constants } from \"../constants\";\n\nvar RowDragFeature =\n/** @class */\nfunction () {\n  function RowDragFeature(eContainer, gridPanel) {\n    this.eContainer = eContainer;\n    this.gridPanel = gridPanel;\n  }\n\n  RowDragFeature.prototype.postConstruct = function () {\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      this.clientSideRowModel = this.rowModel;\n    }\n  };\n\n  RowDragFeature.prototype.getContainer = function () {\n    return this.eContainer;\n  };\n\n  RowDragFeature.prototype.isInterestedIn = function (type) {\n    return type === DragSourceType.RowDrag;\n  };\n\n  RowDragFeature.prototype.getIconName = function () {\n    return DragAndDropService.ICON_MOVE;\n  };\n\n  RowDragFeature.prototype.onDragEnter = function (draggingEvent) {\n    // when entering, we fire the enter event, then in onEnterOrDragging,\n    // we also fire the move event. so we get both events when entering.\n    this.dispatchEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n    this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);\n    draggingEvent.dragItem.rowNode.setDragging(true);\n    this.onEnterOrDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.onDragging = function (draggingEvent) {\n    this.onEnterOrDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.onEnterOrDragging = function (draggingEvent) {\n    // this event is fired for enter and move\n    this.dispatchEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n    this.lastDraggingEvent = draggingEvent;\n    var pixel = this.normaliseForScroll(draggingEvent.y);\n    var managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n    if (managedDrag) {\n      this.doManagedDrag(draggingEvent, pixel);\n    }\n\n    this.checkCenterForScrolling(pixel);\n  };\n\n  RowDragFeature.prototype.doManagedDrag = function (draggingEvent, pixel) {\n    var rowNode = draggingEvent.dragItem.rowNode;\n    var rowWasMoved = this.clientSideRowModel.ensureRowAtPixel(rowNode, pixel);\n\n    if (rowWasMoved) {\n      this.focusedCellController.clearFocusedCell();\n\n      if (this.rangeController) {\n        this.rangeController.removeAllCellRanges();\n      }\n    }\n  };\n\n  RowDragFeature.prototype.normaliseForScroll = function (pixel) {\n    var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n\n    if (gridPanelHasScrolls) {\n      var pixelRange = this.gridPanel.getVScrollPosition();\n      return pixel + pixelRange.top;\n    } else {\n      return pixel;\n    }\n  };\n\n  RowDragFeature.prototype.checkCenterForScrolling = function (pixel) {\n    // scroll if the mouse is within 50px of the grid edge\n    var pixelRange = this.gridPanel.getVScrollPosition(); // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);\n\n    this.needToMoveUp = pixel < pixelRange.top + 50;\n    this.needToMoveDown = pixel > pixelRange.bottom - 50; // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n    // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n\n    if (this.needToMoveUp || this.needToMoveDown) {\n      this.ensureIntervalStarted();\n    } else {\n      this.ensureIntervalCleared();\n    }\n  };\n\n  RowDragFeature.prototype.ensureIntervalStarted = function () {\n    if (!this.movingIntervalId) {\n      this.intervalCount = 0;\n      this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n    }\n  };\n\n  RowDragFeature.prototype.ensureIntervalCleared = function () {\n    if (this.moveInterval) {\n      window.clearInterval(this.movingIntervalId);\n      this.movingIntervalId = null;\n    }\n  };\n\n  RowDragFeature.prototype.moveInterval = function () {\n    // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n    // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n    var pixelsToMove;\n    this.intervalCount++;\n    pixelsToMove = 10 + this.intervalCount * 5;\n\n    if (pixelsToMove > 100) {\n      pixelsToMove = 100;\n    }\n\n    var pixelsMoved;\n\n    if (this.needToMoveDown) {\n      pixelsMoved = this.gridPanel.scrollVertically(pixelsToMove);\n    } else if (this.needToMoveUp) {\n      pixelsMoved = this.gridPanel.scrollVertically(-pixelsToMove);\n    }\n\n    if (pixelsMoved !== 0) {\n      this.onDragging(this.lastDraggingEvent);\n    }\n  }; // i tried using generics here with this:\n  //     public createEvent<T extends RowDragEvent>(type: string, clazz: {new(): T; }, draggingEvent: DraggingEvent) {\n  // but it didn't work - i think it's because it only works with classes, and not interfaces, (the events are interfaces)\n\n\n  RowDragFeature.prototype.dispatchEvent = function (type, draggingEvent) {\n    var yNormalised = this.normaliseForScroll(draggingEvent.y);\n    var overIndex = -1;\n    var overNode = null;\n    var mouseIsPastLastRow = yNormalised > this.rowModel.getCurrentPageHeight();\n\n    if (!mouseIsPastLastRow) {\n      overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n      overNode = this.rowModel.getRow(overIndex);\n    }\n\n    var vDirectionString;\n\n    switch (draggingEvent.vDirection) {\n      case VerticalDirection.Down:\n        vDirectionString = 'down';\n        break;\n\n      case VerticalDirection.Up:\n        vDirectionString = 'up';\n        break;\n\n      default:\n        vDirectionString = null;\n        break;\n    }\n\n    var event = {\n      type: type,\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      event: draggingEvent.event,\n      node: draggingEvent.dragItem.rowNode,\n      overIndex: overIndex,\n      overNode: overNode,\n      y: yNormalised,\n      vDirection: vDirectionString\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  RowDragFeature.prototype.onDragLeave = function (draggingEvent) {\n    this.dispatchEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n    this.stopDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.onDragStop = function (draggingEvent) {\n    this.dispatchEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);\n    this.stopDragging(draggingEvent);\n  };\n\n  RowDragFeature.prototype.stopDragging = function (draggingEvent) {\n    this.ensureIntervalCleared();\n    draggingEvent.dragItem.rowNode.setDragging(false);\n  };\n\n  __decorate([Autowired('dragAndDropService')], RowDragFeature.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Autowired('rowModel')], RowDragFeature.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('focusedCellController')], RowDragFeature.prototype, \"focusedCellController\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], RowDragFeature.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Optional('rangeController')], RowDragFeature.prototype, \"rangeController\", void 0);\n\n  __decorate([Autowired('eventService')], RowDragFeature.prototype, \"eventService\", void 0);\n\n  __decorate([PostConstruct], RowDragFeature.prototype, \"postConstruct\", null);\n\n  return RowDragFeature;\n}();\n\nexport { RowDragFeature };","map":null,"metadata":{},"sourceType":"module"}