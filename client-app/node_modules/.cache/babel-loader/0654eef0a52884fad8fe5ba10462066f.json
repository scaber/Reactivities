{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _isString = _interopRequireDefault(require(\"lodash/isString.js\"));\n\nvar _isArray = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _StringUtil = _interopRequireDefault(require(\"@terrestris/base-util/dist/StringUtil/StringUtil\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Helper class for working with OpenLayers features.\n *\n * @class FeatureUtil\n */\n\n\nvar FeatureUtil =\n/*#__PURE__*/\nfunction () {\n  function FeatureUtil() {\n    _classCallCheck(this, FeatureUtil);\n  }\n\n  _createClass(FeatureUtil, null, [{\n    key: \"getFeatureTypeName\",\n\n    /**\n     * Returns the featureType name out of a given feature. It assumes that\n     * the feature has an ID in the following structure FEATURETYPE.FEATUREID.\n     *\n     * @param {ol.Feature} feature The feature to obtain the featureType\n     *                             name from.\n     * @return {string} The (unqualified) name of the featureType or undefined if\n     *                  the name could not be picked.\n     */\n    value: function getFeatureTypeName(feature) {\n      var featureId = feature.getId();\n      var featureIdParts = featureId ? featureId.split('.') : featureId;\n      return (0, _isArray[\"default\"])(featureIdParts) ? featureIdParts[0] : undefined;\n    }\n    /**\n     * Extracts the featureType name from given GetFeatureInfo URL.\n     * This method is mostly useful for raster layers which features could have\n     * no ID set.\n     *\n     * @param {string} url GetFeatureInfo URL possibly containing featureType name.\n     * @param {boolean} qualified Whether the qualified featureType name should be\n     *   returned or not. Default is true.\n     *\n     * @return {string} Obtained featureType name as string.\n     */\n\n  }, {\n    key: \"getFeatureTypeNameFromGetFeatureInfoUrl\",\n    value: function getFeatureTypeNameFromGetFeatureInfoUrl(url) {\n      var qualified = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var regex = /query_layers=(.*?)(&|$)/i;\n      var match = url.match(regex);\n      var featureTypeName;\n\n      if (match && match[1]) {\n        featureTypeName = decodeURIComponent(match[1]);\n\n        if (!qualified && featureTypeName.indexOf(':') > 0) {\n          featureTypeName = featureTypeName.split(':')[1];\n        }\n      }\n\n      return featureTypeName;\n    }\n    /**\n     * Resolves the given template string with the given feature attributes, e.g.\n     * the template \"Size of area is {{AREA_SIZE}} km²\" would be to resolved\n     * to \"Size of area is 1909 km²\" (assuming the feature's attribute AREA_SIZE\n     * really exists).\n     *\n     * @param {ol.Feature} feature The feature to get the attributes from.\n     * @param {string} template The template string to resolve.\n     * @param {string} [noValueFoundText] The text to apply, if the templated value\n     *   could not be found, default is to 'n.v.'.\n     * @param {Function} [valueAdjust] A method that will be called with each\n     *   key/value match, we'll use what this function returns for the actual\n     *   replacement. Optional, defaults to a function which will return the raw\n     *   value it received. This can be used for last minute adjustments before\n     *   replacing happens, e.g. to filter out falsy values or to do number\n     *   formatting and such.\n     * @return {string} The resolved template string.\n     */\n\n  }, {\n    key: \"resolveAttributeTemplate\",\n    value: function resolveAttributeTemplate(feature, template) {\n      var noValueFoundText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'n.v.';\n      var valueAdjust = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (key, val) {\n        return val;\n      };\n      var attributeTemplatePrefix = '\\\\{\\\\{';\n      var attributeTemplateSuffix = '\\\\}\\\\}';\n      var resolved = ''; // Find any character between two braces (including the braces in the result)\n\n      var regExp = new RegExp(attributeTemplatePrefix + '(.*?)' + attributeTemplateSuffix, 'g');\n      var regExpRes = (0, _isString[\"default\"])(template) ? template.match(regExp) : null; // If we have a regex result, it means we found a placeholder in the\n      // template and have to replace the placeholder with its appropriate value.\n\n      if (regExpRes) {\n        // Iterate over all regex match results and find the proper attribute\n        // for the given placeholder, finally set the desired value to the hover.\n        // field text\n        regExpRes.forEach(function (res) {\n          // We count every non matching candidate. If this count is equal to\n          // the objects length, we assume that there is no match at all and\n          // set the output value to the value of \"noValueFoundText\".\n          var noMatchCnt = 0;\n\n          for (var _i = 0, _Object$entries = Object.entries(feature.getProperties()); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                key = _Object$entries$_i[0],\n                value = _Object$entries$_i[1]; // Remove the suffixes and find the matching attribute column.\n\n\n            var attributeName = res.slice(2, res.length - 2);\n\n            if (attributeName.toLowerCase() === key.toLowerCase()) {\n              template = template.replace(res, valueAdjust(key, value));\n              break;\n            } else {\n              noMatchCnt++;\n            }\n          } // No key match found for this feature (e.g. if key not\n          // present or value is null).\n\n\n          if (noMatchCnt === Object.keys(feature.getProperties()).length) {\n            template = template.replace(res, noValueFoundText);\n          }\n        });\n      }\n\n      resolved = template; // Fallback if no feature attribute is found.\n\n      if (!resolved) {\n        resolved = feature.getId();\n      } // Replace any HTTP url with an <a> element.\n\n\n      resolved = _StringUtil[\"default\"].urlify(resolved); // Replace all newline breaks with a html <br> tag.\n\n      resolved = resolved.replace(/\\n/g, '<br>');\n      return resolved;\n    }\n  }]);\n\n  return FeatureUtil;\n}();\n\nvar _default = FeatureUtil;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}