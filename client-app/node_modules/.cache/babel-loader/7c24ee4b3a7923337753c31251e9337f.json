{"ast":null,"code":"import _objectWithoutProperties from\"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React,{useContext}from'react';import{Route,Redirect}from'react-router-dom';import{RootStoreContext}from'../stores/rootStore';export var PrivateRoute=function PrivateRoute(_ref){var Component=_ref.component,rest=_objectWithoutProperties(_ref,[\"component\"]);var rootStore=useContext(RootStoreContext);var isLoggedIn=rootStore.userStore.isLoggedIn;return/*#__PURE__*/React.createElement(Route,Object.assign({},rest,{render:function render(props){return isLoggedIn?/*#__PURE__*/React.createElement(Component,props):/*#__PURE__*/React.createElement(Redirect,{to:'/'});}}));};","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/app/layout/PrivateRoute.tsx"],"names":["React","useContext","Route","Redirect","RootStoreContext","PrivateRoute","Component","component","rest","rootStore","isLoggedIn","userStore","props"],"mappings":"sLAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAA0CC,KAA1C,CAAiDC,QAAjD,KAAiE,kBAAjE,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CAOA,MAAO,IAAMC,CAAAA,YAA8B,CAAG,QAAjCA,CAAAA,YAAiC,MAAqC,IAAxBC,CAAAA,SAAwB,MAAnCC,SAAmC,CAAVC,IAAU,8CAC/E,GAAMC,CAAAA,SAAS,CAAER,UAAU,CAACG,gBAAD,CAA3B,CAD+E,GAExEM,CAAAA,UAFwE,CAE3DD,SAAS,CAACE,SAFiD,CAExED,UAFwE,CAG/E,mBACG,oBAAC,KAAD,kBACIF,IADJ,EAEA,MAAM,CAAG,gBAACI,KAAD,QAAWF,CAAAA,UAAU,cAAG,oBAAC,SAAD,CAAeE,KAAf,CAAH,cAA4B,oBAAC,QAAD,EAAU,EAAE,CAAG,GAAf,EAAjD,EAFT,GADH,CAMH,CATM","sourcesContent":["import React, { useContext } from 'react'\r\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom'\r\nimport { RootStoreContext } from '../stores/rootStore'\r\n\r\ninterface IProps extends RouteProps\r\n{\r\n    component:React.ComponentType<RouteComponentProps<any>>\r\n}\r\n\r\nexport const PrivateRoute: React.FC<IProps> = ({component: Component, ...rest}) => {\r\n    const rootStore =useContext(RootStoreContext);\r\n    const {isLoggedIn} =rootStore.userStore;\r\n    return (\r\n       <Route \r\n       {...rest}\r\n       render ={(props) => isLoggedIn ? <Component {...props}/> :<Redirect to ={'/'}/>}\r\n       />\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}