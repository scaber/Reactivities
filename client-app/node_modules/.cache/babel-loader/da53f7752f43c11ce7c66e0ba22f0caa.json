{"ast":null,"code":"import _slicedToArray from\"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from\"react\";import{Grid,Loader}from\"semantic-ui-react\";import ActivityList from\"./ActivityList\";import{observer}from\"mobx-react-lite\";import{RootStoreContext}from\"../../../app/stores/rootStore\";import InfiniteScroll from\"react-infinite-scroller\";import ActivityFilters from\"./ActivityFilters\";import ActivityListItemPlaceholder from\"./ActivityListItemPlaceHolder\";var ActivityDashboard=function ActivityDashboard(){var rootStore=useContext(RootStoreContext);var _rootStore$activitySt=rootStore.activityStore,loadActivities=_rootStore$activitySt.loadActivities,loadingInitial=_rootStore$activitySt.loadingInitial,setPage=_rootStore$activitySt.setPage,page=_rootStore$activitySt.page,totalPages=_rootStore$activitySt.totalPages;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loadingNext=_useState2[0],setloadingNext=_useState2[1];var handleGetNext=function handleGetNext(){setloadingNext(true);setPage(page+1);loadActivities().then(function(){return setloadingNext(false);});};useEffect(function(){loadActivities();},[loadActivities]);return/*#__PURE__*/React.createElement(Grid,null,/*#__PURE__*/React.createElement(Grid.Column,{width:10},loadingInitial&&page===0?/*#__PURE__*/React.createElement(ActivityListItemPlaceholder,null):/*#__PURE__*/React.createElement(InfiniteScroll,{pageStart:0,loadMore:handleGetNext,hasMore:!loadingNext&&page+1<totalPages,initialLoad:false},/*#__PURE__*/React.createElement(ActivityList,null))),/*#__PURE__*/React.createElement(Grid.Column,{width:6},/*#__PURE__*/React.createElement(ActivityFilters,null)),/*#__PURE__*/React.createElement(Grid.Column,{width:10},/*#__PURE__*/React.createElement(Loader,{active:loadingNext})));};export default observer(ActivityDashboard);","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/activities/dashboard/ActivityDashboard.tsx"],"names":["React","useContext","useEffect","useState","Grid","Loader","ActivityList","observer","RootStoreContext","InfiniteScroll","ActivityFilters","ActivityListItemPlaceholder","ActivityDashboard","rootStore","activityStore","loadActivities","loadingInitial","setPage","page","totalPages","loadingNext","setloadingNext","handleGetNext","then"],"mappings":"kKAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,SAA5B,CAAuCC,QAAvC,KAAuD,OAAvD,CACA,OAASC,IAAT,CAAeC,MAAf,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACC,OAASC,gBAAT,KAAiC,+BAAjC,CACD,MAAOC,CAAAA,cAAP,KAA2B,yBAA3B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,2BAAP,KAAwC,+BAAxC,CAEA,GAAMC,CAAAA,iBAA2B,CAAG,QAA9BA,CAAAA,iBAA8B,EAAM,CACxC,GAAMC,CAAAA,SAAS,CAAGZ,UAAU,CAACO,gBAAD,CAA5B,CADwC,0BAQpCK,SAAS,CAACC,aAR0B,CAGtCC,cAHsC,uBAGtCA,cAHsC,CAItCC,cAJsC,uBAItCA,cAJsC,CAKtCC,OALsC,uBAKtCA,OALsC,CAMtCC,IANsC,uBAMtCA,IANsC,CAOtCC,UAPsC,uBAOtCA,UAPsC,eAUFhB,QAAQ,CAAC,KAAD,CAVN,wCAUjCiB,WAViC,eAUpBC,cAVoB,eAYxC,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1BD,cAAc,CAAC,IAAD,CAAd,CACAJ,OAAO,CAACC,IAAI,CAAG,CAAR,CAAP,CACAH,cAAc,GAAGQ,IAAjB,CAAsB,iBAAMF,CAAAA,cAAc,CAAC,KAAD,CAApB,EAAtB,EACD,CAJD,CAMAnB,SAAS,CAAC,UAAM,CACda,cAAc,GACf,CAFQ,CAEN,CAACA,cAAD,CAFM,CAAT,CAKA,mBACE,oBAAC,IAAD,mBACE,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,EACGC,cAAc,EAAIE,IAAI,GAAK,CAA3B,cACC,oBAAC,2BAAD,MADD,cAGC,oBAAC,cAAD,EACE,SAAS,CAAE,CADb,CAEE,QAAQ,CAAEI,aAFZ,CAGE,OAAO,CAAE,CAACF,WAAD,EAAgBF,IAAI,CAAG,CAAP,CAAWC,UAHtC,CAIE,WAAW,CAAE,KAJf,eAME,oBAAC,YAAD,MANF,CAJJ,CADF,cAwBE,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,CAApB,eACE,oBAAC,eAAD,MADF,CAxBF,cA2BE,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,eACE,oBAAC,MAAD,EAAQ,MAAM,CAAEC,WAAhB,EADF,CA3BF,CADF,CAiCD,CAxDD,CA0DA,cAAeb,CAAAA,QAAQ,CAACK,iBAAD,CAAvB","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport { observer } from \"mobx-react-lite\";\r\n import { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceHolder\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadActivities,\r\n    loadingInitial,\r\n    setPage,\r\n    page,\r\n    totalPages,\r\n  } = rootStore.activityStore;\r\n\r\n  const [loadingNext, setloadingNext] = useState(false);\r\n\r\n  const handleGetNext = () => {\r\n    setloadingNext(true);\r\n    setPage(page + 1);\r\n    loadActivities().then(() => setloadingNext(false));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadActivities();\r\n  }, [loadActivities]);\r\n\r\n \r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        {loadingInitial && page === 0 ? (\r\n          <ActivityListItemPlaceholder />\r\n        ) : (\r\n          <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNext && page + 1 < totalPages}\r\n            initialLoad={false}\r\n          >\r\n            <ActivityList />\r\n          </InfiniteScroll>\r\n        )}\r\n\r\n        {/* <Button\r\n          floated=\"right\"\r\n          content=\"More ..\"\r\n          positive\r\n          disabled={totalPages === page + 1}\r\n          onClick={handleGetNext}\r\n          loading={loadingNext}\r\n        /> */}\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityFilters />\r\n      </Grid.Column>\r\n      <Grid.Column width={10}>\r\n        <Loader active={loadingNext} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n"]},"metadata":{},"sourceType":"module"}