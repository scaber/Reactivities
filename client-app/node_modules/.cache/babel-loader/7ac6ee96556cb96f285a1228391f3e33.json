{"ast":null,"code":"import toInteger from '../_lib/toInteger/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [/^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [/^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n  ],\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  // timezone tokens\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  if (argument === null) {\n    return new Date(NaN);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  } // Clone the date\n\n\n  if (argument instanceof Date) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\n    return new Date(argument);\n  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n\n      if (isNaN(time)) {\n        return new Date(NaN);\n      }\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone);\n\n      if (isNaN(offset)) {\n        return new Date(NaN);\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n    }\n\n    return new Date(timestamp + time + offset);\n  } else {\n    return new Date(NaN);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = patterns.MM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = patterns.DDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // YYYY-MM-DD or YYYYMMDD\n\n\n  token = patterns.MMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = patterns.Www.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = patterns.WwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = patterns.HH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n\n    if (!validateTime(hours)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = patterns.HHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n\n    if (!validateTime(hours, minutes)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = patterns.HHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction parseTimezone(timezoneString) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = patterns.timezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  }\n\n  var hours; // ±hh\n\n  token = patterns.timezoneHH.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n\n    if (!validateTimezone(hours)) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // ±hh:mm or ±hhmm\n\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n    var minutes = parseInt(token[3], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  }\n\n  return 0;\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false;\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false;\n    }\n\n    var isLeapYear = isLeapYearIndex(year);\n\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false;\n    }\n\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false;\n  }\n\n  var isLeapYear = isLeapYearIndex(year);\n\n  if (isLeapYear && dayOfYear > 366) {\n    return false;\n  }\n\n  if (!isLeapYear && dayOfYear > 365) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false;\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false;\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false;\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateTimezone(hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/toDate/index.js"],"names":["toInteger","getTimezoneOffsetInMilliseconds","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimeter","plainTime","timeZoneDelimeter","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","timezone","timezoneZ","timezoneHH","timezoneHHMM","toDate","argument","dirtyOptions","arguments","length","TypeError","Date","NaN","options","additionalDigits","RangeError","getTime","Object","prototype","toString","call","dateStrings","splitDateString","parseYearResult","parseYear","date","year","restDateString","parseDate","isNaN","timestamp","time","offset","parseTime","parseTimezone","dateString","array","split","timeString","test","substr","token","exec","replace","patternYYY","patternYYYYY","yearString","parseInt","slice","centuryString","month","week","setUTCFullYear","validateDate","dayOfYear","validateDayOfYearDate","day","validateWeekDate","dayOfISOWeekYear","dayOfWeek","hours","minutes","parseFloat","validateTime","seconds","timezoneString","absoluteOffset","validateTimezone","isoWeekYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","isLeapYear"],"mappings":"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","sourcesContent":["import toInteger from '../_lib/toInteger/index.js'\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [\n    /^([+-]\\d{2})$/, // 0 additional digits\n    /^([+-]\\d{3})$/, // 1 additional digit\n    /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [\n    /^([+-]\\d{4})/, // 0 additional digits\n    /^([+-]\\d{5})/, // 1 additional digit\n    /^([+-]\\d{6})/ // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // timezone tokens\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function toDate (argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  if (argument === null) {\n    return new Date(NaN)\n  }\n\n  var options = dirtyOptions || {}\n\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits)\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2')\n  }\n\n  // Clone the date\n  if (argument instanceof Date) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\n    return new Date(argument)\n  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n\n      if (isNaN(time)) {\n        return new Date(NaN)\n      }\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone)\n      if (isNaN(offset)) {\n        return new Date(NaN)\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time))\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset))\n    }\n\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(NaN)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {}\n  var array = dateString.split(patterns.dateTimeDelimeter)\n  var timeString\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0]\n      timeString = dateString.substr(dateStrings.date.length, dateString.length)\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits]\n  var patternYYYYY = patterns.YYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = patterns.MMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = patterns.HH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n\n    if (!validateTime(hours)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n\n    if (!validateTime(hours, minutes)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = patterns.timezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  var hours\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n\n    if (!validateTimezone(hours)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n    var minutes = parseInt(token[3], 10)\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOWeekYear (isoWeekYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoWeekYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\n// Validation functions\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\nfunction isLeapYearIndex (year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\nfunction validateDate (year, month, date) {\n  if (month < 0 || month > 11) {\n    return false\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false\n    }\n\n    var isLeapYear = isLeapYearIndex(year)\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false\n    }\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction validateDayOfYearDate (year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false\n  }\n\n  var isLeapYear = isLeapYearIndex(year)\n  if (isLeapYear && dayOfYear > 366) {\n    return false\n  }\n  if (!isLeapYear && dayOfYear > 365) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateWeekDate (year, week, day) {\n  if (week < 0 || week > 52) {\n    return false\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTime (hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTimezone (hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}