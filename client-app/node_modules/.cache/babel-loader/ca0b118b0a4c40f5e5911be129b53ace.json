{"ast":null,"code":"import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate, options);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js"],"names":["toInteger","toDate","startOfUTCWeek","dirtyDate","dirtyOptions","arguments","length","TypeError","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","date","day","getUTCDay","diff","setUTCDate","getUTCDate","setUTCHours"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,uBAAnB,C,CAEA;AACA;;AACA,eAAe,SAASC,cAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;AAC/D,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UAApE,CAAN;AACD;;AAED,MAAIE,OAAO,GAAGJ,YAAY,IAAI,EAA9B;AACA,MAAIK,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,MAAIC,kBAAkB,GAAGD,MAAM,IAAIA,MAAM,CAACD,OAAjB,IAA4BC,MAAM,CAACD,OAAP,CAAeG,YAApE;AACA,MAAIC,mBAAmB,GAAGF,kBAAkB,IAAI,IAAtB,GAA6B,CAA7B,GAAiCV,SAAS,CAACU,kBAAD,CAApE;AACA,MAAIC,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,IAAxB,GAA+BC,mBAA/B,GAAqDZ,SAAS,CAACQ,OAAO,CAACG,YAAT,CAAjF,CAT+D,CAW/D;;AACA,MAAI,EAAEA,YAAY,IAAI,CAAhB,IAAqBA,YAAY,IAAI,CAAvC,CAAJ,EAA+C;AAC7C,UAAM,IAAIE,UAAJ,CAAe,kDAAf,CAAN;AACD;;AAED,MAAIC,IAAI,GAAGb,MAAM,CAACE,SAAD,EAAYK,OAAZ,CAAjB;AACA,MAAIO,GAAG,GAAGD,IAAI,CAACE,SAAL,EAAV;AACA,MAAIC,IAAI,GAAG,CAACF,GAAG,GAAGJ,YAAN,GAAqB,CAArB,GAAyB,CAA1B,IAA+BI,GAA/B,GAAqCJ,YAAhD;AAEAG,EAAAA,IAAI,CAACI,UAAL,CAAgBJ,IAAI,CAACK,UAAL,KAAoBF,IAApC;AACAH,EAAAA,IAAI,CAACM,WAAL,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,SAAON,IAAP;AACD","sourcesContent":["import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function startOfUTCWeek (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn)\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn)\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  var date = toDate(dirtyDate, options)\n  var day = date.getUTCDay()\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\n  date.setUTCDate(date.getUTCDate() - diff)\n  date.setUTCHours(0, 0, 0, 0)\n  return date\n}\n"]},"metadata":{},"sourceType":"module"}