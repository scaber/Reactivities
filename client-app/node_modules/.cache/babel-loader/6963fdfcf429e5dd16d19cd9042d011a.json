{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nrequire(\"antd/es/tooltip/style\");\n\nvar _tooltip = _interopRequireDefault(require(\"antd/es/tooltip\"));\n\nrequire(\"antd/es/button/style\");\n\nvar _button = _interopRequireDefault(require(\"antd/es/button\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar PropTypes = _interopRequireWildcard(require(\"prop-types\"));\n\nvar _reactFa = require(\"react-fa\");\n\nrequire(\"./ToggleButton.less\");\n\nvar _constants = require(\"../../constants\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _isFunction = require('lodash/isFunction');\n/**\n * The ToggleButton.\n *\n * @class The ToggleButton\n * @extends React.Component\n */\n\n\nvar ToggleButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ToggleButton, _React$Component);\n\n  _createClass(ToggleButton, null, [{\n    key: \"getDerivedStateFromProps\",\n\n    /**\n     * The className added to this component.\n     * @private\n     */\n\n    /**\n     * The class to apply for a toggled/pressed button.\n     */\n\n    /**\n     * The default properties.\n     */\n\n    /**\n     * The context types.\n     */\n\n    /**\n     * Invoked right before calling the render method, both on the initial mount\n     * and on subsequent updates. It should return an object to update the state,\n     * or null to update nothing.\n     * @param nextProps The next properties.\n     * @param prevState The previous state.\n     */\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      // Checks to see if the pressed property has changed\n      if (prevState.pressed !== nextProps.pressed) {\n        return {\n          pressed: nextProps.pressed,\n          overallPressed: nextProps.pressed,\n          isClicked: false,\n          lastClickEvt: null\n        };\n      }\n\n      return null;\n    }\n    /**\n     * Creates the ToggleButton.\n     *\n     * @constructs ToggleButton\n     */\n\n  }]);\n\n  function ToggleButton(props) {\n    var _this;\n\n    _classCallCheck(this, ToggleButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToggleButton).call(this, props)); // Instantiate the state.\n    // components state\n\n    _defineProperty(_assertThisInitialized(_this), \"_className\", \"\".concat(_constants.CSS_PREFIX, \"togglebutton\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"pressedClass\", 'btn-pressed');\n\n    _this.state = {\n      pressed: props.pressed,\n      lastClickEvt: null,\n      overallPressed: props.pressed,\n      isClicked: false\n    };\n    return _this;\n  }\n  /**\n   * We will handle the initial state of the button here.\n   * If it is pressed, we will have to call its `onToggle`\n   * method, if it exists, in order to reflect the initial\n   * state correctly (e.g. activating ol.Controls)\n   */\n\n\n  _createClass(ToggleButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.onToggle && this.props.pressed === true) {\n        this.props.onToggle(true, null);\n      }\n    }\n    /**\n     * Invoked immediately after updating occurs. This method is not called\n     * for the initial render.\n     * @method\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onToggle = this.props.onToggle;\n      var _this$state = this.state,\n          pressed = _this$state.pressed,\n          lastClickEvt = _this$state.lastClickEvt,\n          overallPressed = _this$state.overallPressed,\n          isClicked = _this$state.isClicked;\n      /**\n       * the following is performed here as a hack to keep track of the pressed changes.\n       *\n       * check if the button has been clicked\n       * |__ YES: ==> toggle the button\n       * |\n       * |__ NO: check if the prop has changed\n       *        |__ YES: ==> Toggle the button\n       *        |__ NO: check if previous update action was a click\n       *                |__ YES: ==> run the Toggle function fo the prop value\n       */\n\n      var shouldToggle;\n\n      if (isClicked || prevState.pressed !== pressed || prevState.isClicked) {\n        if (isClicked) {\n          // button is clicked\n          shouldToggle = true;\n        } else {\n          // check for prop change\n          if (pressed !== prevState.overallPressed) {\n            // pressed prop has changed\n            shouldToggle = true;\n          } else {\n            if (prevState.isClicked) {\n              // prop has not changed but the previous was click event\n              if (prevState.overallPressed !== overallPressed) {\n                shouldToggle = true;\n              }\n            }\n          }\n        }\n\n        if (shouldToggle && onToggle) {\n          onToggle(overallPressed, lastClickEvt);\n        }\n      }\n    }\n    /**\n     * Called on click.\n     *\n     * @param evt The ClickEvent.\n     * @method\n     */\n\n  }, {\n    key: \"onClick\",\n    value: function onClick(evt) {\n      var _this2 = this;\n\n      this.setState({\n        overallPressed: !this.state.overallPressed,\n        lastClickEvt: evt,\n        isClicked: true\n      }, function () {\n        // This part can be removed in future if the ToggleGroup button is removed.\n        if (_this2.context.toggleGroup && _isFunction(_this2.context.toggleGroup.onChange)) {\n          _this2.context.toggleGroup.onChange(_this2.props); // this allows for the allowDeselect property to be taken into account\n          // when used with ToggleGroup. Since the ToggleGroup changes the\n          // pressed prop for its child components the click event dose not need to\n          // change the pressed property.\n\n\n          _this2.setState({\n            overallPressed: !_this2.state.overallPressed\n          });\n        }\n      });\n    }\n    /**\n     * The render function.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          icon = _this$props.icon,\n          pressedIcon = _this$props.pressedIcon,\n          fontIcon = _this$props.fontIcon,\n          pressed = _this$props.pressed,\n          onToggle = _this$props.onToggle,\n          tooltip = _this$props.tooltip,\n          tooltipPlacement = _this$props.tooltipPlacement,\n          tooltipProps = _this$props.tooltipProps,\n          antBtnProps = _objectWithoutProperties(_this$props, [\"className\", \"icon\", \"pressedIcon\", \"fontIcon\", \"pressed\", \"onToggle\", \"tooltip\", \"tooltipPlacement\", \"tooltipProps\"]);\n\n      var onClick = antBtnProps.onClick,\n          filteredAntBtnProps = _objectWithoutProperties(antBtnProps, [\"onClick\"]);\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this._className) : this._className;\n      var iconName = icon;\n      var pressedClass = '';\n\n      if (this.state.overallPressed) {\n        iconName = pressedIcon || icon;\n        pressedClass = \" \".concat(this.pressedClass, \" \");\n      }\n\n      return React.createElement(_tooltip[\"default\"], _extends({\n        title: tooltip,\n        placement: tooltipPlacement\n      }, tooltipProps), React.createElement(_button[\"default\"], _extends({\n        className: \"\".concat(finalClassName).concat(pressedClass),\n        onClick: this.onClick.bind(this)\n      }, filteredAntBtnProps), React.createElement(_reactFa.Icon, {\n        name: iconName,\n        className: fontIcon\n      }), antBtnProps.children));\n    }\n  }]);\n\n  return ToggleButton;\n}(React.Component);\n\n_defineProperty(ToggleButton, \"defaultProps\", {\n  type: 'primary',\n  icon: '',\n  pressed: false,\n  tooltipProps: {\n    mouseEnterDelay: 1.5\n  },\n  onToggle: function onToggle() {\n    return undefined;\n  }\n});\n\n_defineProperty(ToggleButton, \"contextTypes\", {\n  toggleGroup: PropTypes.object\n});\n\nvar _default = ToggleButton;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}