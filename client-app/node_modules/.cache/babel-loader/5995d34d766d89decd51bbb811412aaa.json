{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _temp;\n\nimport { observable, action, computed, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\nimport { setActivityProps, createAttendee } from \"../common/util/util\";\nimport { HubConnectionBuilder } from '@aspnet/signalr';\nlet ActivityStore = (_dec = observable.ref, (_class = (_temp = class ActivityStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n\n    _initializerDefineProperty(this, \"activityRegistry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"activity\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loadingInitial\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"submitting\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"target\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"hubConnection\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"createHubConnection\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"loadActivities\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"loadActivity\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"clearActivity\", _descriptor11, this);\n\n    this.getActivity = id => {\n      return this.activityRegistry.get(id);\n    };\n\n    _initializerDefineProperty(this, \"createActivity\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"editActivity\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"deleteActivity\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"attendActivity\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"cancelAttendance\", _descriptor16, this);\n\n    this.rootStore = rootStore;\n  }\n\n  get activitiesByDate() {\n    return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()));\n  }\n\n  groupActivitiesByDate(activities) {\n    const sortedActivities = activities.sort((a, b) => a.date.getTime() - b.date.getTime());\n    return Object.entries(sortedActivities.reduce((activities, activity) => {\n      const date = activity.date.toISOString().split(\"T\")[0];\n      activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n      return activities;\n    }, {}));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"activityRegistry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"activity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loadingInitial\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"submitting\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"hubConnection\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"createHubConnection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.hubConnection = new HubConnectionBuilder.wit();\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"activitiesByDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activitiesByDate\"), _class.prototype), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"loadActivities\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loadingInitial = true;\n\n      try {\n        const activities = await agent.Activities.list();\n        runInAction(\"loading activities\", () => {\n          activities.forEach(activity => {\n            setActivityProps(activity, this.rootStore.userStore.user);\n            this.activityRegistry.set(activity.id, activity);\n          });\n          this.loadingInitial = false;\n        });\n      } catch (error) {\n        runInAction(\"load activities error\", () => {\n          this.loadingInitial = false;\n        });\n      }\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"loadActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async id => {\n      let activity = this.getActivity(id);\n\n      if (activity) {\n        this.activity = activity;\n        return activity;\n      } else {\n        this.loadingInitial = true;\n\n        try {\n          activity = await agent.Activities.details(id);\n          runInAction(\"getting activity\", () => {\n            setActivityProps(activity, this.rootStore.userStore.user);\n            this.activity = activity;\n            this.activityRegistry.set(activity.id, activity);\n            this.loadingInitial = false;\n          });\n          return activity;\n        } catch (error) {\n          runInAction(\"get activity error\", () => {\n            this.loadingInitial = false;\n          });\n          console.log(error);\n        }\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"clearActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.activity = null;\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"createActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.create(activity);\n        const attendee = createAttendee(this.rootStore.userStore.user);\n        attendee.isHost = true;\n        let attendees = [];\n        attendees.push(attendee);\n        activity.attendees = attendees;\n        activity.isHost = true;\n        runInAction(\"create activity\", () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.submitting = false;\n        });\n        history.push(\"/activities/\".concat(activity.id));\n      } catch (error) {\n        runInAction(\"create activity error\", () => {\n          this.submitting = false;\n        });\n        toast.error(\"Problem submitting data\");\n        console.log(error.response);\n      }\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"editActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction(\"editing activity\", () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.activity = activity;\n          this.submitting = false;\n        });\n        history.push(\"/activities/\".concat(activity.id));\n      } catch (error) {\n        runInAction(\"edit activity error\", () => {\n          this.submitting = false;\n        });\n        toast.error(\"Problem submitting data\");\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"deleteActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (event, id) => {\n      this.submitting = true;\n      this.target = event.currentTarget.name;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction(\"deleting activity\", () => {\n          this.activityRegistry.delete(id);\n          this.submitting = false;\n          this.target = \"\";\n        });\n      } catch (error) {\n        runInAction(\"delete activity error\", () => {\n          this.submitting = false;\n          this.target = \"\";\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"attendActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const attendee = createAttendee(this.rootStore.userStore.user);\n      this.loading = true;\n\n      try {\n        await agent.Activities.attend(this.activity.id);\n        runInAction(() => {\n          if (this.activity) {\n            this.activity.attendees.push(attendee);\n            this.activity.isGoing = true;\n            this.activityRegistry.set(this.activity.id, this.activity);\n            this.loading = false;\n          }\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loading = false;\n        });\n        toast.error(\"Problem signing up to activity\");\n      }\n    };\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"cancelAttendance\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loading = true;\n\n      try {\n        await agent.Activities.unattend(this.activity.id);\n        runInAction(() => {\n          if (this.activity) {\n            this.activity.attendees = this.activity.attendees.filter(a => a.userName !== this.rootStore.userStore.user.username);\n            this.activity.isGoing = false;\n            this.activityRegistry.set(this.activity.id, this.activity);\n            this.loading = false;\n          }\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loading = false;\n        });\n        toast.error(\"Problem cancelling activity\");\n      }\n    };\n  }\n})), _class));\nexport { ActivityStore as default };","map":{"version":3,"sources":["C:\\Projects\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts"],"names":["observable","action","computed","runInAction","agent","history","toast","setActivityProps","createAttendee","HubConnectionBuilder","ActivityStore","ref","constructor","rootStore","getActivity","id","activityRegistry","get","activitiesByDate","groupActivitiesByDate","Array","from","values","activities","sortedActivities","sort","a","b","date","getTime","Object","entries","reduce","activity","toISOString","split","Map","hubConnection","wit","loadingInitial","Activities","list","forEach","userStore","user","set","error","details","console","log","submitting","create","attendee","isHost","attendees","push","response","update","event","target","currentTarget","name","delete","loading","attend","isGoing","unattend","filter","userName","username"],"mappings":"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","sourcesContent":["import { observable, action, computed, runInAction } from \"mobx\";\nimport { SyntheticEvent } from \"react\";\nimport { IActivity } from \"../models/activity\";\nimport agent from \"../api/agent\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\nimport { RootStore } from \"./rootStore\";\nimport { setActivityProps, createAttendee } from \"../common/util/util\";\n\nimport {HubConnection,HubConnectionBuilder} from '@aspnet/signalr';\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = \"\";\n  @observable loading = false;\n  @observable.ref hubConnection: HubConnection | null = null;\n\n  @action createHubConnection =() => {\n\n    this.hubConnection =new HubConnectionBuilder\n    .wit\n  }\n\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activities: IActivity[]) {\n    const sortedActivities = activities.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split(\"T\")[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activities = await agent.Activities.list();\n      runInAction(\"loading activities\", () => {\n        activities.forEach((activity) => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(\"load activities error\", () => {\n        this.loadingInitial = false;\n      });\n    }\n  };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n      return activity;\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction(\"getting activity\", () => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n        });\n        return activity;\n      } catch (error) {\n        runInAction(\"get activity error\", () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n     const attendee =createAttendee(this.rootStore.userStore.user!);\n     attendee.isHost=true;\n     let attendees =[];\n      attendees.push(attendee);\n      activity.attendees=attendees;\n      activity.isHost=true;\n      runInAction(\"create activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction(\"create activity error\", () => {\n        this.submitting = false;\n      });\n      toast.error(\"Problem submitting data\");\n      console.log(error.response);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction(\"editing activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction(\"edit activity error\", () => {\n        this.submitting = false;\n      });\n      toast.error(\"Problem submitting data\");\n      console.log(error);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction(\"deleting activity\", () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = \"\";\n      });\n    } catch (error) {\n      runInAction(\"delete activity error\", () => {\n        this.submitting = false;\n        this.target = \"\";\n      });\n      console.log(error);\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem signing up to activity\");\n    }\n  };\n  @action cancelAttendance = async () => {\n    this.loading = true;\n\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n       \n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            (a) => a.userName !== this.rootStore.userStore.user!.username\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem cancelling activity\");\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}