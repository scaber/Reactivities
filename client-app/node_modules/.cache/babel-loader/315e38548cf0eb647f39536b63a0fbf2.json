{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isString_js_1 = __importDefault(require(\"lodash/isString.js\"));\n/**\n * Helper Class for Strings\n */\n\n\nvar StringUtil =\n/** @class */\nfunction () {\n  function StringUtil() {}\n  /**\n   * Replaces any occurence of a link-like text with <a> tag.\n   *\n   * @param {string} text The string context to replace.\n   * @return {string} The urlified string.\n   */\n\n\n  StringUtil.urlify = function (text) {\n    var urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    return text.replace(urlRegex, \"<a href=\\\"$1\\\" target=\\\"_blank\\\">$1</a>\");\n  };\n  /**\n   * This coerces the value of a string by casting it to the most plausible\n   * datatype, guessed by the value itself.\n   *\n   * @param {string} str The input string to coerce.\n   * @return {*} The coerced value.\n   */\n\n\n  StringUtil.coerce = function (str) {\n    if (!isString_js_1.default(str)) {\n      return str;\n    }\n\n    var isFloatRegex = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\n\n    if (str.toLowerCase() === 'true') {\n      return true;\n    } else if (str.toLowerCase() === 'false') {\n      return false;\n    } else if (isFloatRegex.test(str)) {\n      return parseFloat(str);\n    } else if (str.startsWith('[')) {\n      return JSON.parse(str).map(function (a) {\n        return StringUtil.coerce(a);\n      });\n    } else if (str.startsWith('{')) {\n      var parsedObj_1 = JSON.parse(str);\n      var coercedObj_1 = {};\n      Object.keys(parsedObj_1).forEach(function (key) {\n        coercedObj_1[key] = StringUtil.coerce(parsedObj_1[key]);\n      });\n      return coercedObj_1;\n    } else {\n      return str;\n    }\n  };\n  /**\n   * Returns a string that is wrapped: every ~`width` chars a space is\n   * replaced with the passed `spaceReplacer`.\n   *\n   * See https://stackoverflow.com/questions/14484787/wrap-text-in-javascript\n   *\n   * @param {string} str The string to wrap.\n   * @param {number} width The width of a line (number of characters).\n   * @param {string} spaceReplacer The string to replace spaces with.\n   * @return {string} The 'wrapped' string.\n   */\n\n\n  StringUtil.stringDivider = function (str, width, spaceReplacer) {\n    var startIndex = 0;\n    var stopIndex = width;\n\n    if (str.length > width) {\n      var p = width;\n      var left = void 0;\n      var right = void 0;\n\n      while (p > 0 && str[p] !== ' ' && str[p] !== '-') {\n        p--;\n      }\n\n      if (p > 0) {\n        if (str.substring(p, p + 1) === '-') {\n          left = str.substring(0, p + 1);\n        } else {\n          left = str.substring(0, p);\n        }\n\n        right = str.substring(p + 1);\n        return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);\n      } else {\n        // no whitespace or - found,\n        // splitting hard on the width length\n        left = str.substring(startIndex, stopIndex + 1) + '-';\n        right = str.substring(stopIndex + 1);\n        startIndex = stopIndex;\n        stopIndex += width;\n        return left + spaceReplacer + StringUtil.stringDivider(right, width, spaceReplacer);\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Returns the displayed text of an string with html text.\n   *\n   * @param {string} htmlString A string containing html.\n   * @return {string} The stripped Text.\n   */\n\n\n  StringUtil.stripHTMLTags = function (htmlString) {\n    var stripped;\n\n    if (DOMParser) {\n      // Inspired by https://stackoverflow.com/a/47140708\n      var doc = new DOMParser().parseFromString(htmlString, 'text/html');\n      stripped = doc.body.textContent || '';\n    }\n\n    return stripped;\n  };\n\n  return StringUtil;\n}();\n\nexports.default = StringUtil;","map":null,"metadata":{},"sourceType":"script"}