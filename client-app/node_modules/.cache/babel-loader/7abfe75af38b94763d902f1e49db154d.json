{"ast":null,"code":"import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of calendar ISO weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * var result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft, dirtyOptions);\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfISOWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  var timestampRight = startOfISOWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/differenceInCalendarISOWeeks/index.js"],"names":["getTimezoneOffsetInMilliseconds","startOfISOWeek","MILLISECONDS_IN_WEEK","differenceInCalendarISOWeeks","dirtyDateLeft","dirtyDateRight","dirtyOptions","arguments","length","TypeError","startOfISOWeekLeft","startOfISOWeekRight","timestampLeft","getTime","timestampRight","Math","round"],"mappings":"AAAA,OAAOA,+BAAP,MAA4C,kDAA5C;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AAEA,IAAIC,oBAAoB,GAAG,SAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,eAAe,SAASC,4BAAT,CAAuCC,aAAvC,EAAsDC,cAAtD,EAAsEC,YAAtE,EAAoF;AACjG,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,kBAAkB,GAAGT,cAAc,CAACG,aAAD,EAAgBE,YAAhB,CAAvC;AACA,MAAIK,mBAAmB,GAAGV,cAAc,CAACI,cAAD,EAAiBC,YAAjB,CAAxC;AAEA,MAAIM,aAAa,GAAGF,kBAAkB,CAACG,OAAnB,KAClBb,+BAA+B,CAACU,kBAAD,CADjC;AAEA,MAAII,cAAc,GAAGH,mBAAmB,CAACE,OAApB,KACnBb,+BAA+B,CAACW,mBAAD,CADjC,CAViG,CAajG;AACA;AACA;;AACA,SAAOI,IAAI,CAACC,KAAL,CAAW,CAACJ,aAAa,GAAGE,cAAjB,IAAmCZ,oBAA9C,CAAP;AACD","sourcesContent":["import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport startOfISOWeek from '../startOfISOWeek/index.js'\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of calendar ISO weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * var result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\nexport default function differenceInCalendarISOWeeks (dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft, dirtyOptions)\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight, dirtyOptions)\n\n  var timestampLeft = startOfISOWeekLeft.getTime() -\n    getTimezoneOffsetInMilliseconds(startOfISOWeekLeft)\n  var timestampRight = startOfISOWeekRight.getTime() -\n    getTimezoneOffsetInMilliseconds(startOfISOWeekRight)\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK)\n}\n"]},"metadata":{},"sourceType":"module"}