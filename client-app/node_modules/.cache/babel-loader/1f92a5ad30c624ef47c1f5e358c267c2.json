{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\src\\\\features\\\\profiles\\\\ProfilePhotos.tsx\";\nimport React, { useContext, useState } from \"react\";\nimport { Tab, Header, Card, Image, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\nimport { observer } from \"mobx-react-lite\";\n\nconst ProfilePhotos = () => {\n  const rootStore = useContext(RootStoreContext);\n  const _rootStore$profileSto = rootStore.profileStore,\n        profile = _rootStore$profileSto.profile,\n        isCurrentUser = _rootStore$profileSto.isCurrentUser,\n        uploadPhoto = _rootStore$profileSto.uploadPhoto,\n        uploadingPhoto = _rootStore$profileSto.uploadingPhoto;\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        addPhotoMode = _useState2[0],\n        setAddPhotoMode = _useState2[1];\n\n  return React.createElement(Tab.Pane, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 16,\n    style: {\n      paddingBotttom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Header, {\n    floated: \"left\",\n    icon: \"image\",\n    content: \"Photos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), isCurrentUser && React.createElement(Button, {\n    floated: \"right\",\n    basic: true,\n    content: addPhotoMode ? \"cancel\" : \"Add Photo\",\n    onClick: () => setAddPhotoMode(!addPhotoMode),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, addPhotoMode ? React.createElement(PhotoUploadWidget, {\n    uploadPhoto: uploadPhoto,\n    loading: uploadingPhoto,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }) : React.createElement(Card.Group, {\n    itemsPerRow: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, profile && profile.photos.map(photo => React.createElement(Card, {\n    key: photo.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Image, {\n    src: photo.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), isCurrentUser && React.createElement(Button.Group, {\n    fluid: true,\n    widths: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Button, {\n    basic: true,\n    positive: true,\n    content: \"Main\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(Button, {\n    basic: true,\n    negative: true,\n    icon: \"trash\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }))))))));\n};\n\nexport default observer(ProfilePhotos);","map":{"version":3,"sources":["C:\\Projects\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx"],"names":["React","useContext","useState","Tab","Header","Card","Image","Button","Grid","RootStoreContext","PhotoUploadWidget","observer","ProfilePhotos","rootStore","profileStore","profile","isCurrentUser","uploadPhoto","uploadingPhoto","addPhotoMode","setAddPhotoMode","paddingBotttom","photos","map","photo","id","url"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport { Tab, Header, Card, Image, Button, Grid } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\nimport  PhotoUploadWidget  from \"../../app/common/photoUpload/PhotoUploadWidget\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\n const ProfilePhotos = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { profile, isCurrentUser,uploadPhoto,uploadingPhoto } = rootStore.profileStore;\r\n\r\n  const [addPhotoMode, setAddPhotoMode] = useState(true);\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16} style={{ paddingBotttom: 0 }}>\r\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated=\"right\"\r\n              basic\r\n              content={addPhotoMode ? \"cancel\" : \"Add Photo\"}\r\n              onClick={()=> setAddPhotoMode(!addPhotoMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n           <PhotoUploadWidget uploadPhoto={uploadPhoto} loading={uploadingPhoto}/>\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile &&\r\n                profile.photos.map((photo) => (\r\n                  <Card key={photo.id}>\r\n                    <Image src={photo.url} />\r\n                    {isCurrentUser &&\r\n                    <Button.Group fluid widths={2}>\r\n                        <Button basic positive content='Main'/>\r\n                        <Button basic negative icon='trash'/>\r\n                    </Button.Group>\r\n                    }\r\n                  </Card>\r\n                ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\nexport default observer(ProfilePhotos);"]},"metadata":{},"sourceType":"module"}