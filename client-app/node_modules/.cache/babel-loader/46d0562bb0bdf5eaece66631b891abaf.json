{"ast":null,"code":"import axios from \"axios\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\naxios.interceptors.request.use(config => {\n  const token = window.localStorage.getItem(\"jwt\");\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(undefined, error => {\n  if (error.message === \"Network Error\" && !error.response) {\n    toast.error(\"Network error - make sure API is running!\");\n  }\n\n  const {\n    status,\n    data,\n    config,\n    headers\n  } = error.response;\n\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n\n  debugger;\n\n  if (status === 401 && headers[\"www-authenticate\"] === 'Bearer error=\"invalid_tokeb\",error_description=\"The token is expired\"') {\n    window.localStorage.removeItem(\"jwt\");\n    history.push(\"/\");\n    toast.info(\"Your session has expired, please login again\");\n  }\n\n  if (status === 400 && config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\n    history.push(\"/notfound\");\n  }\n\n  if (status === 500) {\n    toast.error(\"Server error - check the terminal for more info!\");\n  }\n\n  throw error.response;\n});\n\nconst responseBody = response => response.data;\n\nconst sleep = ms => response => new Promise(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  del: url => axios.delete(url).then(responseBody),\n  postForm: (url, file) => {\n    let formData = new FormData();\n    formData.append(\"File\", file);\n    return axios.post(url, formData, {\n      headers: {\n        \"Conteent-type\": \"multipart/form-data\"\n      }\n    }).then(responseBody);\n  }\n};\nconst Activities = {\n  list: params => axios.get(\"/activities\", {\n    params: params\n  }).then(sleep(1000)).then(responseBody),\n  details: id => requests.get(`/activities/${id}`),\n  create: activity => requests.post(\"/activities\", activity),\n  update: activity => requests.put(`/activities/${activity.id}`, activity),\n  delete: id => requests.del(`/activities/${id}`),\n  attend: id => requests.post(`/activities/${id}/attend`, {}),\n  unattend: id => requests.del(`/activities/${id}/attend`)\n};\nconst User = {\n  current: () => requests.get(\"/user\"),\n  login: user => requests.post(`/user/login`, user),\n  register: user => requests.post(`/user/register`, user)\n};\nconst Profiles = {\n  get: userName => requests.get(`/profiles/${userName}`),\n  uploadPhoto: photo => requests.postForm(`/photos`, photo),\n  setMainPhoto: id => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: id => requests.del(`/photos/${id}`),\n  updateProfile: profile => requests.put(`/profiles`, profile),\n  follow: userName => requests.post(`/profiles/${userName}/follow`, {}),\n  unfollow: userName => requests.del(`/profiles/${userName}/follow`),\n  listFollowings: (userName, predicate) => requests.get(`/profiles/${userName}/follow?predicate=${predicate}`),\n  listActivities: (userName, predicate) => requests.get(`/profiles/${userName}/activities?predicate=${predicate}`)\n};\nexport default {\n  Activities,\n  User,\n  Profiles\n};","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/app/api/agent.ts"],"names":["axios","history","toast","defaults","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","status","data","push","removeItem","info","method","errors","hasOwnProperty","responseBody","sleep","ms","resolve","setTimeout","requests","get","url","then","post","body","put","del","delete","postForm","file","formData","FormData","append","Activities","list","params","details","id","create","activity","update","attend","unattend","User","current","login","user","register","Profiles","userName","uploadPhoto","photo","setMainPhoto","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { IActivity, IActivitiesEnvelope } from \"../models/activity\";\r\nimport { history } from \"../..\";\r\nimport { toast } from \"react-toastify\";\r\nimport { IUser, IUserFormValues } from \"../models/user\";\r\nimport { IProfile, IPhoto } from \"../models/profile\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(undefined, (error) => {\r\n  if (error.message === \"Network Error\" && !error.response) {\r\n    toast.error(\"Network error - make sure API is running!\");\r\n  }\r\n  const { status, data, config, headers } = error.response;\r\n  if (status === 404) {\r\n    history.push(\"/notfound\");\r\n  }\r\n  debugger;\r\n  if (\r\n    status === 401 &&\r\n    headers[\"www-authenticate\"] ===\r\n      'Bearer error=\"invalid_tokeb\",error_description=\"The token is expired\"'\r\n  ) {\r\n    window.localStorage.removeItem(\"jwt\");\r\n    history.push(\"/\");\r\n    toast.info(\"Your session has expired, please login again\");\r\n  }\r\n  if (\r\n    status === 400 &&\r\n    config.method === \"get\" &&\r\n    data.errors.hasOwnProperty(\"id\")\r\n  ) {\r\n    history.push(\"/notfound\");\r\n  }\r\n  if (status === 500) {\r\n    toast.error(\"Server error - check the terminal for more info!\");\r\n  }\r\n  throw error.response;\r\n});\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n  new Promise<AxiosResponse>((resolve) =>\r\n    setTimeout(() => resolve(response), ms)\r\n  );\r\n\r\nconst requests = {\r\n  get: (url: string) => axios.get(url).then(responseBody),\r\n  post: (url: string, body: {}) =>\r\n    axios.post(url, body).then(responseBody),\r\n  put: (url: string, body: {}) =>\r\n    axios.put(url, body).then(responseBody),\r\n  del: (url: string) => axios.delete(url).then(responseBody),\r\n  postForm: (url: string, file: Blob) => {\r\n    let formData = new FormData();\r\n    formData.append(\"File\", file);\r\n    return axios\r\n      .post(url, formData, {\r\n        headers: { \"Conteent-type\": \"multipart/form-data\" },\r\n      })\r\n      .then(responseBody);\r\n  },\r\n};\r\n\r\nconst Activities = {\r\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\r\n    axios\r\n      .get(\"/activities\", { params: params })\r\n      .then(sleep(1000))\r\n      .then(responseBody),\r\n  details: (id: string) => requests.get(`/activities/${id}`),\r\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\r\n  update: (activity: IActivity) =>\r\n    requests.put(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del(`/activities/${id}`),\r\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\r\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`),\r\n};\r\n\r\nconst User = {\r\n  current: (): Promise<IUser> => requests.get(\"/user\"),\r\n  login: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/login`, user),\r\n  register: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/register`, user),\r\n};\r\n\r\nconst Profiles = {\r\n  get: (userName: string): Promise<IProfile> =>\r\n    requests.get(`/profiles/${userName}`),\r\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\r\n    requests.postForm(`/photos`, photo),\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n  updateProfile: (profile: Partial<IProfile>) =>\r\n    requests.put(`/profiles`, profile),\r\n  follow: (userName: string) =>\r\n    requests.post(`/profiles/${userName}/follow`, {}),\r\n  unfollow: (userName: string) => requests.del(`/profiles/${userName}/follow`),\r\n  listFollowings: (userName: string, predicate: string) =>\r\n    requests.get(`/profiles/${userName}/follow?predicate=${predicate}`),\r\n  listActivities: (userName: string, predicate: string) =>\r\n    requests.get(`/profiles/${userName}/activities?predicate=${predicate}`),\r\n};\r\n\r\nexport default {\r\n  Activities,\r\n  User,\r\n  Profiles,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}