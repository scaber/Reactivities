{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component } from '../widgets/component';\nimport { RowNode } from '../entities/rowNode';\nimport { Autowired } from '../context/context';\nimport { Events } from '../events';\nimport { _ } from '../utils';\n\nvar CheckboxSelectionComponent =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxSelectionComponent, _super);\n\n  function CheckboxSelectionComponent() {\n    return _super.call(this, \"<span class=\\\"ag-selection-checkbox\\\"/>\") || this;\n  }\n\n  CheckboxSelectionComponent.prototype.createAndAddIcons = function () {\n    var element = this.getGui();\n\n    if (this.gridOptionsWrapper.useNativeCheckboxes()) {\n      this.checkbox = document.createElement('input');\n      this.checkbox.type = 'checkbox';\n      element.appendChild(this.checkbox);\n    } else {\n      this.eCheckedIcon = _.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.column);\n      this.eUncheckedIcon = _.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.column);\n      this.eIndeterminateIcon = _.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.column);\n      element.appendChild(this.eCheckedIcon);\n      element.appendChild(this.eUncheckedIcon);\n      element.appendChild(this.eIndeterminateIcon);\n    }\n  };\n\n  CheckboxSelectionComponent.prototype.onDataChanged = function () {\n    // when rows are loaded for the second time, this can impact the selection, as a row\n    // could be loaded as already selected (if user scrolls down, and then up again).\n    this.onSelectionChanged();\n  };\n\n  CheckboxSelectionComponent.prototype.onSelectableChanged = function () {\n    this.showOrHideSelect();\n  };\n\n  CheckboxSelectionComponent.prototype.onSelectionChanged = function () {\n    var state = this.rowNode.isSelected();\n\n    if (this.gridOptionsWrapper.useNativeCheckboxes()) {\n      this.checkbox.checked = state === true;\n      this.checkbox.indeterminate = typeof state !== 'boolean';\n    } else {\n      _.setDisplayed(this.eCheckedIcon, state === true);\n\n      _.setDisplayed(this.eUncheckedIcon, state === false);\n\n      _.setDisplayed(this.eIndeterminateIcon, typeof state !== 'boolean');\n    }\n  };\n\n  CheckboxSelectionComponent.prototype.onCheckedClicked = function () {\n    var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n    var updatedCount = this.rowNode.setSelectedParams({\n      newValue: false,\n      groupSelectsFiltered: groupSelectsFiltered\n    });\n    return updatedCount;\n  };\n\n  CheckboxSelectionComponent.prototype.onUncheckedClicked = function (event) {\n    var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n    var updatedCount = this.rowNode.setSelectedParams({\n      newValue: true,\n      rangeSelect: event.shiftKey,\n      groupSelectsFiltered: groupSelectsFiltered\n    });\n    return updatedCount;\n  };\n\n  CheckboxSelectionComponent.prototype.onIndeterminateClicked = function (event) {\n    var result = this.onUncheckedClicked(event);\n\n    if (result === 0) {\n      this.onCheckedClicked();\n    }\n  };\n\n  CheckboxSelectionComponent.prototype.onCheckboxClicked = function (event) {\n    if (this.checkbox.checked) {\n      this.onUncheckedClicked(event);\n    } else {\n      this.onCheckedClicked();\n    }\n  };\n\n  CheckboxSelectionComponent.prototype.init = function (params) {\n    this.rowNode = params.rowNode;\n    this.column = params.column;\n    this.createAndAddIcons();\n    this.onSelectionChanged(); // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n    // would possibly get selected twice\n\n    this.addGuiEventListener('click', function (event) {\n      return _.stopPropagationForAgGrid(event);\n    }); // likewise we don't want double click on this icon to open a group\n\n    this.addGuiEventListener('dblclick', function (event) {\n      return _.stopPropagationForAgGrid(event);\n    });\n\n    if (this.gridOptionsWrapper.useNativeCheckboxes()) {\n      this.addDestroyableEventListener(this.checkbox, 'click', this.onCheckboxClicked.bind(this));\n    } else {\n      this.addDestroyableEventListener(this.eCheckedIcon, 'click', this.onCheckedClicked.bind(this));\n      this.addDestroyableEventListener(this.eUncheckedIcon, 'click', this.onUncheckedClicked.bind(this));\n      this.addDestroyableEventListener(this.eIndeterminateIcon, 'click', this.onIndeterminateClicked.bind(this));\n    }\n\n    this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));\n    this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));\n    this.addDestroyableEventListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));\n    this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n    var checkboxVisibleIsDynamic = this.isRowSelectableFunc || this.checkboxCallbackExists();\n\n    if (checkboxVisibleIsDynamic) {\n      this.addDestroyableEventListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));\n      this.showOrHideSelect();\n    }\n  };\n\n  CheckboxSelectionComponent.prototype.showOrHideSelect = function () {\n    // if the isRowSelectable() is not provided the row node is selectable by default\n    var selectable = this.rowNode.selectable; // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n    // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n    // to call the colDef callback.\n\n    if (selectable && this.checkboxCallbackExists()) {\n      selectable = this.column.isCellCheckboxSelection(this.rowNode);\n    } // show checkbox if both conditions are true\n\n\n    this.setDisplayed(selectable);\n  };\n\n  CheckboxSelectionComponent.prototype.checkboxCallbackExists = function () {\n    // column will be missing if groupUseEntireRow=true\n    var colDef = this.column ? this.column.getColDef() : null;\n    return colDef && typeof colDef.checkboxSelection === 'function';\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], CheckboxSelectionComponent.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('eventService')], CheckboxSelectionComponent.prototype, \"eventService\", void 0);\n\n  __decorate([Autowired('gridApi')], CheckboxSelectionComponent.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], CheckboxSelectionComponent.prototype, \"columnApi\", void 0);\n\n  return CheckboxSelectionComponent;\n}(Component);\n\nexport { CheckboxSelectionComponent };","map":null,"metadata":{},"sourceType":"module"}