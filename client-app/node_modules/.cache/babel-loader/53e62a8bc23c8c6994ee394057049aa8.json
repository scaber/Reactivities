{"ast":null,"code":"import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js"],"names":["toInteger","toDate","startOfUTCWeek","getUTCWeekYear","dirtyDate","dirtyOptions","arguments","length","TypeError","date","year","getUTCFullYear","options","locale","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","RangeError","firstWeekOfNextYear","Date","setUTCFullYear","setUTCHours","startOfNextYear","firstWeekOfThisYear","startOfThisYear","getTime"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,cAAP,MAA2B,4BAA3B,C,CAEA;AACA;;AACA,eAAe,SAASC,cAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;AAC/D,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UAApE,CAAN;AACD;;AAED,MAAIE,IAAI,GAAGR,MAAM,CAACG,SAAD,EAAYC,YAAZ,CAAjB;AACA,MAAIK,IAAI,GAAGD,IAAI,CAACE,cAAL,EAAX;AAEA,MAAIC,OAAO,GAAGP,YAAY,IAAI,EAA9B;AACA,MAAIQ,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,MAAIC,2BAA2B,GAAGD,MAAM,IACtCA,MAAM,CAACD,OADyB,IAEhCC,MAAM,CAACD,OAAP,CAAeG,qBAFjB;AAGA,MAAIC,4BAA4B,GAC9BF,2BAA2B,IAAI,IAA/B,GACI,CADJ,GAEId,SAAS,CAACc,2BAAD,CAHf;AAIA,MAAIC,qBAAqB,GACvBH,OAAO,CAACG,qBAAR,IAAiC,IAAjC,GACIC,4BADJ,GAEIhB,SAAS,CAACY,OAAO,CAACG,qBAAT,CAHf,CAjB+D,CAsB/D;;AACA,MAAI,EAAEA,qBAAqB,IAAI,CAAzB,IAA8BA,qBAAqB,IAAI,CAAzD,CAAJ,EAAiE;AAC/D,UAAM,IAAIE,UAAJ,CAAe,2DAAf,CAAN;AACD;;AAED,MAAIC,mBAAmB,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAA1B;AACAD,EAAAA,mBAAmB,CAACE,cAApB,CAAmCV,IAAI,GAAG,CAA1C,EAA6C,CAA7C,EAAgDK,qBAAhD;AACAG,EAAAA,mBAAmB,CAACG,WAApB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC;AACA,MAAIC,eAAe,GAAGpB,cAAc,CAACgB,mBAAD,EAAsBb,YAAtB,CAApC;AAEA,MAAIkB,mBAAmB,GAAG,IAAIJ,IAAJ,CAAS,CAAT,CAA1B;AACAI,EAAAA,mBAAmB,CAACH,cAApB,CAAmCV,IAAnC,EAAyC,CAAzC,EAA4CK,qBAA5C;AACAQ,EAAAA,mBAAmB,CAACF,WAApB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC;AACA,MAAIG,eAAe,GAAGtB,cAAc,CAACqB,mBAAD,EAAsBlB,YAAtB,CAApC;;AAEA,MAAII,IAAI,CAACgB,OAAL,MAAkBH,eAAe,CAACG,OAAhB,EAAtB,EAAiD;AAC/C,WAAOf,IAAI,GAAG,CAAd;AACD,GAFD,MAEO,IAAID,IAAI,CAACgB,OAAL,MAAkBD,eAAe,CAACC,OAAhB,EAAtB,EAAiD;AACtD,WAAOf,IAAP;AACD,GAFM,MAEA;AACL,WAAOA,IAAI,GAAG,CAAd;AACD;AACF","sourcesContent":["import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions)\n  var year = date.getUTCFullYear()\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeFirstWeekContainsDate = locale &&\n    locale.options &&\n    locale.options.firstWeekContainsDate\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate)\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate)\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively')\n  }\n\n  var firstWeekOfNextYear = new Date(0)\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate)\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0)\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions)\n\n  var firstWeekOfThisYear = new Date(0)\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate)\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0)\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n"]},"metadata":{},"sourceType":"module"}