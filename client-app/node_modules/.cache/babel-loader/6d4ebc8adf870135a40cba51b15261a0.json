{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\n\nvar XhrHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(XhrHttpClient, _super);\n\n  function XhrHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    _this.logger = logger;\n    return _this;\n  }\n  /** @inheritDoc */\n\n\n  XhrHttpClient.prototype.send = function (request) {\n    var _this = this; // Check that abort was not signaled before calling send\n\n\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = true;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"); // Explicitly setting the Content-Type header for React Native on Android platform.\n\n      xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n      var headers = request.headers;\n\n      if (headers) {\n        Object.keys(headers).forEach(function (header) {\n          xhr.setRequestHeader(header, headers[header]);\n        });\n      }\n\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n\n      if (request.abortSignal) {\n        request.abortSignal.onabort = function () {\n          xhr.abort();\n          reject(new AbortError());\n        };\n      }\n\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n\n      xhr.onload = function () {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.statusText, xhr.status));\n        }\n      };\n\n      xhr.onerror = function () {\n        _this.logger.log(LogLevel.Warning, \"Error from HTTP request. \" + xhr.status + \": \" + xhr.statusText + \".\");\n\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n\n      xhr.ontimeout = function () {\n        _this.logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n\n        reject(new TimeoutError());\n      };\n\n      xhr.send(request.content || \"\");\n    });\n  };\n\n  return XhrHttpClient;\n}(HttpClient);\n\nexport { XhrHttpClient };","map":{"version":3,"sources":["../../src/XhrHttpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}