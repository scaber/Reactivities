{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.mixin = mixin;\nexports.default = mixIntoClass;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction mixin(componentClass, _ref) {\n  var propTypes = _ref.propTypes,\n      contextTypes = _ref.contextTypes,\n      childContextTypes = _ref.childContextTypes,\n      getChildContext = _ref.getChildContext,\n      protoSpec = _objectWithoutProperties(_ref, [\"propTypes\", \"contextTypes\", \"childContextTypes\", \"getChildContext\"]);\n\n  if (propTypes) componentClass.propTypes = _extends({}, componentClass.propTypes, propTypes);\n  if (contextTypes) componentClass.contextTypes = _extends({}, componentClass.contextTypes, contextTypes);\n  if (childContextTypes) componentClass.childContextTypes = _extends({}, componentClass.childContextTypes, childContextTypes);\n\n  if (getChildContext) {\n    var baseGCContext = componentClass.prototype.getChildContext;\n\n    componentClass.prototype.getChildContext = function $getChildContext() {\n      return _extends({}, baseGCContext && baseGCContext.call(this), getChildContext.call(this));\n    };\n  }\n\n  _extends(componentClass.prototype, protoSpec);\n\n  return componentClass;\n}\n\nfunction mixIntoClass(spec) {\n  return function (componentClass) {\n    return mixin(componentClass, spec);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}