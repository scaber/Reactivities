{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\src\\\\features\\\\activities\\\\dashboard\\\\ActivityDashboard.tsx\";\nimport React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst ActivityDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages\n  } = rootStore.activityStore;\n  const [loadingNext, setloadingNext] = useState;\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n  if (loadingInitial) return /*#__PURE__*/React.createElement(LoadingComponent, {\n    content: \"Loading activities\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }\n  });\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ActivityList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"Activity filters\")));\n};\n\nexport default observer(ActivityDashboard);","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/activities/dashboard/ActivityDashboard.tsx"],"names":["React","useContext","useEffect","Grid","ActivityList","observer","LoadingComponent","RootStoreContext","ActivityDashboard","rootStore","loadActivities","loadingInitial","setPage","page","totalPages","activityStore","loadingNext","setloadingNext","useState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;;AAEA,MAAMC,iBAA2B,GAAG,MAAM;AAExC,QAAMC,SAAS,GAAGR,UAAU,CAACM,gBAAD,CAA5B;AACA,QAAM;AAACG,IAAAA,cAAD;AAAiBC,IAAAA,cAAjB;AAAgCC,IAAAA,OAAhC;AAAwCC,IAAAA,IAAxC;AAA6CC,IAAAA;AAA7C,MAA2DL,SAAS,CAACM,aAA3E;AAEA,QAAK,CAACC,WAAD,EAAaC,cAAb,IAA+BC,QAApC;AAGAhB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,MAAIC,cAAJ,EACE,oBAAO,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAC,oBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEF,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CAJF,CADF;AAUD,CAzBD;;AA2BA,eAAeN,QAAQ,CAACG,iBAAD,CAAvB","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst ActivityDashboard: React.FC = () => {\n\n  const rootStore = useContext(RootStoreContext);\n  const {loadActivities, loadingInitial,setPage,page,totalPages} = rootStore.activityStore;\n\n  const[loadingNext,setloadingNext] = useState\n\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n  if (loadingInitial)\n    return <LoadingComponent content='Loading activities' />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityList />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <h2>Activity filters</h2>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n"]},"metadata":{},"sourceType":"module"}