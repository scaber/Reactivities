{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nimport { ColumnGroup } from \"./columnGroup\";\nimport { Column } from \"./column\";\nimport { EventService } from \"../eventService\";\n\nvar OriginalColumnGroup =\n/** @class */\nfunction () {\n  function OriginalColumnGroup(colGroupDef, groupId, padding, level) {\n    this.localEventService = new EventService();\n    this.expandable = false;\n    this.colGroupDef = colGroupDef;\n    this.groupId = groupId;\n    this.expanded = colGroupDef && !!colGroupDef.openByDefault;\n    this.padding = padding;\n    this.level = level;\n  }\n\n  OriginalColumnGroup.prototype.setOriginalParent = function (originalParent) {\n    this.originalParent = originalParent;\n  };\n\n  OriginalColumnGroup.prototype.getOriginalParent = function () {\n    return this.originalParent;\n  };\n\n  OriginalColumnGroup.prototype.getLevel = function () {\n    return this.level;\n  };\n\n  OriginalColumnGroup.prototype.isVisible = function () {\n    // return true if at least one child is visible\n    if (this.children) {\n      return this.children.some(function (child) {\n        return child.isVisible();\n      });\n    }\n\n    return false;\n  };\n\n  OriginalColumnGroup.prototype.isPadding = function () {\n    return this.padding;\n  };\n\n  OriginalColumnGroup.prototype.setExpanded = function (expanded) {\n    this.expanded = expanded === undefined ? false : expanded;\n    var event = {\n      type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED\n    };\n    this.localEventService.dispatchEvent(event);\n  };\n\n  OriginalColumnGroup.prototype.isExpandable = function () {\n    return this.expandable;\n  };\n\n  OriginalColumnGroup.prototype.isExpanded = function () {\n    return this.expanded;\n  };\n\n  OriginalColumnGroup.prototype.getGroupId = function () {\n    return this.groupId;\n  };\n\n  OriginalColumnGroup.prototype.getId = function () {\n    return this.getGroupId();\n  };\n\n  OriginalColumnGroup.prototype.setChildren = function (children) {\n    this.children = children;\n  };\n\n  OriginalColumnGroup.prototype.getChildren = function () {\n    return this.children;\n  };\n\n  OriginalColumnGroup.prototype.getColGroupDef = function () {\n    return this.colGroupDef;\n  };\n\n  OriginalColumnGroup.prototype.getLeafColumns = function () {\n    var result = [];\n    this.addLeafColumns(result);\n    return result;\n  };\n\n  OriginalColumnGroup.prototype.addLeafColumns = function (leafColumns) {\n    if (!this.children) {\n      return;\n    }\n\n    this.children.forEach(function (child) {\n      if (child instanceof Column) {\n        leafColumns.push(child);\n      } else if (child instanceof OriginalColumnGroup) {\n        child.addLeafColumns(leafColumns);\n      }\n    });\n  };\n\n  OriginalColumnGroup.prototype.getColumnGroupShow = function () {\n    return this.padding ? ColumnGroup.HEADER_GROUP_PADDING : this.colGroupDef.columnGroupShow;\n  }; // need to check that this group has at least one col showing when both expanded and contracted.\n  // if not, then we don't allow expanding and contracting on this group\n\n\n  OriginalColumnGroup.prototype.setupExpandable = function () {\n    var _this = this;\n\n    this.setExpandable(); // note - we should be removing this event listener\n\n    this.getLeafColumns().forEach(function (col) {\n      return col.addEventListener(Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));\n    });\n  };\n\n  OriginalColumnGroup.prototype.setExpandable = function () {\n    if (this.isPadding()) {\n      return;\n    } // want to make sure the group doesn't disappear when it's open\n\n\n    var atLeastOneShowingWhenOpen = false; // want to make sure the group doesn't disappear when it's closed\n\n    var atLeastOneShowingWhenClosed = false; // want to make sure the group has something to show / hide\n\n    var atLeastOneChangeable = false;\n    var children = this.findChildren();\n\n    for (var i = 0, j = children.length; i < j; i++) {\n      var abstractColumn = children[i];\n\n      if (!abstractColumn.isVisible()) {\n        continue;\n      } // if the abstractColumn is a grid generated group, there will be no colDef\n\n\n      var headerGroupShow = abstractColumn.getColumnGroupShow();\n\n      if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {\n        atLeastOneShowingWhenOpen = true;\n        atLeastOneChangeable = true;\n      } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {\n        atLeastOneShowingWhenClosed = true;\n        atLeastOneChangeable = true;\n      } else {\n        atLeastOneShowingWhenOpen = true;\n        atLeastOneShowingWhenClosed = true;\n\n        if (headerGroupShow === ColumnGroup.HEADER_GROUP_PADDING) {\n          var column = abstractColumn;\n          atLeastOneChangeable = atLeastOneChangeable || column.children.some(function (child) {\n            return child.getColumnGroupShow() !== undefined;\n          });\n        }\n      }\n    }\n\n    var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n\n    if (this.expandable !== expandable) {\n      this.expandable = expandable;\n      var event_1 = {\n        type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED\n      };\n      this.localEventService.dispatchEvent(event_1);\n    }\n  };\n\n  OriginalColumnGroup.prototype.findChildren = function () {\n    var children = this.children;\n    var firstChild = children[0];\n\n    if (firstChild && (!firstChild.isPadding || !firstChild.isPadding())) {\n      return children;\n    }\n\n    while (children.length === 1 && children[0] instanceof OriginalColumnGroup) {\n      children = children[0].children;\n    }\n\n    return children;\n  };\n\n  OriginalColumnGroup.prototype.onColumnVisibilityChanged = function () {\n    this.setExpandable();\n  };\n\n  OriginalColumnGroup.prototype.addEventListener = function (eventType, listener) {\n    this.localEventService.addEventListener(eventType, listener);\n  };\n\n  OriginalColumnGroup.prototype.removeEventListener = function (eventType, listener) {\n    this.localEventService.removeEventListener(eventType, listener);\n  };\n\n  OriginalColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n  OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';\n  return OriginalColumnGroup;\n}();\n\nexport { OriginalColumnGroup };","map":null,"metadata":{},"sourceType":"module"}