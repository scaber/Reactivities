{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\n/**\n * A set of fields can appear grouped together.\n * @see Form\n */\n\nfunction FormGroup(props) {\n  var children = props.children,\n      className = props.className,\n      grouped = props.grouped,\n      inline = props.inline,\n      unstackable = props.unstackable,\n      widths = props.widths;\n  var classes = cx(useKeyOnly(grouped, 'grouped'), useKeyOnly(inline, 'inline'), useKeyOnly(unstackable, 'unstackable'), useWidthProp(widths, null, true), 'fields', className);\n  var rest = getUnhandledProps(FormGroup, props);\n  var ElementType = getElementType(FormGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nFormGroup.handledProps = [\"as\", \"children\", \"className\", \"grouped\", \"inline\", \"unstackable\", \"widths\"];\nFormGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Fields can show related choices. */\n  grouped: customPropTypes.every([customPropTypes.disallow(['inline']), PropTypes.bool]),\n\n  /** Multiple fields may be inline in a row. */\n  inline: customPropTypes.every([customPropTypes.disallow(['grouped']), PropTypes.bool]),\n\n  /** A form group can prevent itself from stacking on mobile. */\n  unstackable: PropTypes.bool,\n\n  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */\n  widths: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal']))\n} : {};\nexport default FormGroup;","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/semantic-ui-react/dist/es/collections/Form/FormGroup.js"],"names":["_toConsumableArray","_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useWidthProp","FormGroup","props","children","className","grouped","inline","unstackable","widths","classes","rest","ElementType","createElement","handledProps","propTypes","process","env","NODE_ENV","as","node","string","every","disallow","bool","oneOf","concat","WIDTHS"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,EAA6DC,GAA7D,EAAkEC,UAAlE,EAA8EC,YAA9E,QAAkG,WAAlG;AACA;;;;;AAKA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,MAAM,GAAGJ,KAAK,CAACI,MAHnB;AAAA,MAIIC,WAAW,GAAGL,KAAK,CAACK,WAJxB;AAAA,MAKIC,MAAM,GAAGN,KAAK,CAACM,MALnB;AAMA,MAAIC,OAAO,GAAGjB,EAAE,CAACO,UAAU,CAACM,OAAD,EAAU,SAAV,CAAX,EAAiCN,UAAU,CAACO,MAAD,EAAS,QAAT,CAA3C,EAA+DP,UAAU,CAACQ,WAAD,EAAc,aAAd,CAAzE,EAAuGP,YAAY,CAACQ,MAAD,EAAS,IAAT,EAAe,IAAf,CAAnH,EAAyI,QAAzI,EAAmJJ,SAAnJ,CAAhB;AACA,MAAIM,IAAI,GAAGb,iBAAiB,CAACI,SAAD,EAAYC,KAAZ,CAA5B;AACA,MAAIS,WAAW,GAAGf,cAAc,CAACK,SAAD,EAAYC,KAAZ,CAAhC;AACA,SAAOR,KAAK,CAACkB,aAAN,CAAoBD,WAApB,EAAiCpB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AACzDN,IAAAA,SAAS,EAAEK;AAD8C,GAAX,CAAzC,EAEHN,QAFG,CAAP;AAGD;;AAEDF,SAAS,CAACY,YAAV,GAAyB,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,QAA3C,EAAqD,aAArD,EAAoE,QAApE,CAAzB;AACAZ,SAAS,CAACa,SAAV,GAAsBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC5D;AACAC,EAAAA,EAAE,EAAEvB,eAAe,CAACuB,EAFwC;;AAI5D;AACAf,EAAAA,QAAQ,EAAEV,SAAS,CAAC0B,IALwC;;AAO5D;AACAf,EAAAA,SAAS,EAAEX,SAAS,CAAC2B,MARuC;;AAU5D;AACAf,EAAAA,OAAO,EAAEV,eAAe,CAAC0B,KAAhB,CAAsB,CAAC1B,eAAe,CAAC2B,QAAhB,CAAyB,CAAC,QAAD,CAAzB,CAAD,EAAuC7B,SAAS,CAAC8B,IAAjD,CAAtB,CAXmD;;AAa5D;AACAjB,EAAAA,MAAM,EAAEX,eAAe,CAAC0B,KAAhB,CAAsB,CAAC1B,eAAe,CAAC2B,QAAhB,CAAyB,CAAC,SAAD,CAAzB,CAAD,EAAwC7B,SAAS,CAAC8B,IAAlD,CAAtB,CAdoD;;AAgB5D;AACAhB,EAAAA,WAAW,EAAEd,SAAS,CAAC8B,IAjBqC;;AAmB5D;AACAf,EAAAA,MAAM,EAAEf,SAAS,CAAC+B,KAAV,CAAgB,GAAGC,MAAH,CAAUnC,kBAAkB,CAACQ,GAAG,CAAC4B,MAAL,CAA5B,EAA0C,CAAC,OAAD,CAA1C,CAAhB;AApBoD,CAAxC,GAqBlB,EArBJ;AAsBA,eAAezB,SAAf","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\n/**\n * A set of fields can appear grouped together.\n * @see Form\n */\n\nfunction FormGroup(props) {\n  var children = props.children,\n      className = props.className,\n      grouped = props.grouped,\n      inline = props.inline,\n      unstackable = props.unstackable,\n      widths = props.widths;\n  var classes = cx(useKeyOnly(grouped, 'grouped'), useKeyOnly(inline, 'inline'), useKeyOnly(unstackable, 'unstackable'), useWidthProp(widths, null, true), 'fields', className);\n  var rest = getUnhandledProps(FormGroup, props);\n  var ElementType = getElementType(FormGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nFormGroup.handledProps = [\"as\", \"children\", \"className\", \"grouped\", \"inline\", \"unstackable\", \"widths\"];\nFormGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Fields can show related choices. */\n  grouped: customPropTypes.every([customPropTypes.disallow(['inline']), PropTypes.bool]),\n\n  /** Multiple fields may be inline in a row. */\n  inline: customPropTypes.every([customPropTypes.disallow(['grouped']), PropTypes.bool]),\n\n  /** A form group can prevent itself from stacking on mobile. */\n  unstackable: PropTypes.bool,\n\n  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */\n  widths: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal']))\n} : {};\nexport default FormGroup;"]},"metadata":{},"sourceType":"module"}