{"ast":null,"code":"import React,{Fragment,useContext}from'react';import{Menu,Header}from'semantic-ui-react';import{Calendar}from'react-widgets';import{RootStoreContext}from'../../../app/stores/rootStore';import{observer}from'mobx-react-lite';var ActivityFilters=function ActivityFilters(){var rootStore=useContext(RootStoreContext);var _rootStore$activitySt=rootStore.activityStore,predicate=_rootStore$activitySt.predicate,setPredicate=_rootStore$activitySt.setPredicate;return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Menu,{vertical:true,size:'large',style:{width:'100%',marginTop:50}},/*#__PURE__*/React.createElement(Header,{icon:'filter',attached:true,color:'teal',content:'Filters'}),/*#__PURE__*/React.createElement(Menu.Item,{active:predicate.size===0,onClick:function onClick(){return setPredicate('all','true');},color:'blue',name:'all',content:'All Activities'}),/*#__PURE__*/React.createElement(Menu.Item,{active:predicate.has('isGoing'),onClick:function onClick(){return setPredicate('isGoing','true');},color:'blue',name:'username',content:\"I'm Going\"}),/*#__PURE__*/React.createElement(Menu.Item,{active:predicate.has('isHost'),onClick:function onClick(){return setPredicate('isHost','true');},color:'blue',name:'host',content:\"I'm hosting\"})),/*#__PURE__*/React.createElement(Header,{icon:'calendar',attached:true,color:'teal',content:'Select Date'}),/*#__PURE__*/React.createElement(Calendar,{onChange:function onChange(date){return setPredicate('startDate',date);},value:predicate.get('startDate')||new Date()}));};export default observer(ActivityFilters);","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/activities/dashboard/ActivityFilters.tsx"],"names":["React","Fragment","useContext","Menu","Header","Calendar","RootStoreContext","observer","ActivityFilters","rootStore","activityStore","predicate","setPredicate","width","marginTop","size","has","date","get","Date"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,CACA,OAASC,IAAT,CAAeC,MAAf,KAA6B,mBAA7B,CACA,OAASC,QAAT,KAAyB,eAAzB,CACA,OAASC,gBAAT,KAAiC,+BAAjC,CACA,OAASC,QAAT,KAAyB,iBAAzB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,GAAMC,CAAAA,SAAS,CAAGP,UAAU,CAACI,gBAAD,CAA5B,CAD4B,0BAEQG,SAAS,CAACC,aAFlB,CAEpBC,SAFoB,uBAEpBA,SAFoB,CAETC,YAFS,uBAETA,YAFS,CAG5B,mBACE,oBAAC,QAAD,mBACE,oBAAC,IAAD,EAAM,QAAQ,KAAd,CAAe,IAAI,CAAE,OAArB,CAA8B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAiBC,SAAS,CAAE,EAA5B,CAArC,eACE,oBAAC,MAAD,EAAQ,IAAI,CAAE,QAAd,CAAwB,QAAQ,KAAhC,CAAiC,KAAK,CAAE,MAAxC,CAAgD,OAAO,CAAE,SAAzD,EADF,cAEE,oBAAC,IAAD,CAAM,IAAN,EACE,MAAM,CAAEH,SAAS,CAACI,IAAV,GAAmB,CAD7B,CAEE,OAAO,CAAE,yBAAMH,CAAAA,YAAY,CAAC,KAAD,CAAQ,MAAR,CAAlB,EAFX,CAGE,KAAK,CAAE,MAHT,CAIE,IAAI,CAAE,KAJR,CAKE,OAAO,CAAE,gBALX,EAFF,cASE,oBAAC,IAAD,CAAM,IAAN,EACE,MAAM,CAAED,SAAS,CAACK,GAAV,CAAc,SAAd,CADV,CAEE,OAAO,CAAE,yBAAMJ,CAAAA,YAAY,CAAC,SAAD,CAAY,MAAZ,CAAlB,EAFX,CAGE,KAAK,CAAE,MAHT,CAIE,IAAI,CAAE,UAJR,CAKE,OAAO,CAAE,WALX,EATF,cAgBE,oBAAC,IAAD,CAAM,IAAN,EACE,MAAM,CAAED,SAAS,CAACK,GAAV,CAAc,QAAd,CADV,CAEE,OAAO,CAAE,yBAAMJ,CAAAA,YAAY,CAAC,QAAD,CAAW,MAAX,CAAlB,EAFX,CAGE,KAAK,CAAE,MAHT,CAIE,IAAI,CAAE,MAJR,CAKE,OAAO,CAAE,aALX,EAhBF,CADF,cAyBE,oBAAC,MAAD,EACE,IAAI,CAAE,UADR,CAEE,QAAQ,KAFV,CAGE,KAAK,CAAE,MAHT,CAIE,OAAO,CAAE,aAJX,EAzBF,cA+BE,oBAAC,QAAD,EACE,QAAQ,CAAE,kBAAAK,IAAI,QAAIL,CAAAA,YAAY,CAAC,WAAD,CAAcK,IAAd,CAAhB,EADhB,CAEE,KAAK,CAAEN,SAAS,CAACO,GAAV,CAAc,WAAd,GAA8B,GAAIC,CAAAA,IAAJ,EAFvC,EA/BF,CADF,CAsCD,CAzCD,CA2CA,cAAeZ,CAAAA,QAAQ,CAACC,eAAD,CAAvB","sourcesContent":["import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header } from 'semantic-ui-react';\r\nimport { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ActivityFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicate, setPredicate } = rootStore.activityStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicate.size === 0}\r\n          onClick={() => setPredicate('all', 'true')}\r\n          color={'blue'}\r\n          name={'all'}\r\n          content={'All Activities'}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has('isGoing')}\r\n          onClick={() => setPredicate('isGoing', 'true')}\r\n          color={'blue'}\r\n          name={'username'}\r\n          content={\"I'm Going\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has('isHost')}\r\n          onClick={() => setPredicate('isHost', 'true')}\r\n          color={'blue'}\r\n          name={'host'}\r\n          content={\"I'm hosting\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'teal'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setPredicate('startDate', date!)}\r\n        value={predicate.get('startDate') || new Date()}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityFilters);"]},"metadata":{},"sourceType":"module"}