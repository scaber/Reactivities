{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A modal can contain content.\n */\n\nfunction ModalContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      image = props.image,\n      scrolling = props.scrolling;\n  var classes = cx(className, useKeyOnly(image, 'image'), useKeyOnly(scrolling, 'scrolling'), 'content');\n  var rest = getUnhandledProps(ModalContent, props);\n  var ElementType = getElementType(ModalContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nModalContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"image\", \"scrolling\"];\nModalContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A modal can contain image content. */\n  image: PropTypes.bool,\n\n  /** A modal can use the entire size of the screen. */\n  scrolling: PropTypes.bool\n} : {};\nModalContent.create = createShorthandFactory(ModalContent, function (content) {\n  return {\n    content: content\n  };\n});\nexport default ModalContent;","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/semantic-ui-react/dist/es/modules/Modal/ModalContent.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","useKeyOnly","ModalContent","props","children","className","content","image","scrolling","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","bool","create"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,EAAoGC,UAApG,QAAsH,WAAtH;AACA;;;;AAIA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,KAAK,GAAGJ,KAAK,CAACI,KAHlB;AAAA,MAIIC,SAAS,GAAGL,KAAK,CAACK,SAJtB;AAKA,MAAIC,OAAO,GAAGhB,EAAE,CAACY,SAAD,EAAYJ,UAAU,CAACM,KAAD,EAAQ,OAAR,CAAtB,EAAwCN,UAAU,CAACO,SAAD,EAAY,WAAZ,CAAlD,EAA4E,SAA5E,CAAhB;AACA,MAAIE,IAAI,GAAGV,iBAAiB,CAACE,YAAD,EAAeC,KAAf,CAA5B;AACA,MAAIQ,WAAW,GAAGZ,cAAc,CAACG,YAAD,EAAeC,KAAf,CAAhC;AACA,SAAOR,KAAK,CAACiB,aAAN,CAAoBD,WAApB,EAAiCnB,QAAQ,CAAC,EAAD,EAAKkB,IAAL,EAAW;AACzDL,IAAAA,SAAS,EAAEI;AAD8C,GAAX,CAAzC,EAEHb,aAAa,CAACiB,KAAd,CAAoBT,QAApB,IAAgCE,OAAhC,GAA0CF,QAFvC,CAAP;AAGD;;AAEDF,YAAY,CAACY,YAAb,GAA4B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,OAA3C,EAAoD,WAApD,CAA5B;AACAZ,YAAY,CAACa,SAAb,GAAyBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC/D;AACAC,EAAAA,EAAE,EAAErB,eAAe,CAACqB,EAF2C;;AAI/D;AACAf,EAAAA,QAAQ,EAAEV,SAAS,CAAC0B,IAL2C;;AAO/D;AACAf,EAAAA,SAAS,EAAEX,SAAS,CAAC2B,MAR0C;;AAU/D;AACAf,EAAAA,OAAO,EAAER,eAAe,CAACwB,gBAXsC;;AAa/D;AACAf,EAAAA,KAAK,EAAEb,SAAS,CAAC6B,IAd8C;;AAgB/D;AACAf,EAAAA,SAAS,EAAEd,SAAS,CAAC6B;AAjB0C,CAAxC,GAkBrB,EAlBJ;AAmBArB,YAAY,CAACsB,MAAb,GAAsB3B,sBAAsB,CAACK,YAAD,EAAe,UAAUI,OAAV,EAAmB;AAC5E,SAAO;AACLA,IAAAA,OAAO,EAAEA;AADJ,GAAP;AAGD,CAJ2C,CAA5C;AAKA,eAAeJ,YAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A modal can contain content.\n */\n\nfunction ModalContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      image = props.image,\n      scrolling = props.scrolling;\n  var classes = cx(className, useKeyOnly(image, 'image'), useKeyOnly(scrolling, 'scrolling'), 'content');\n  var rest = getUnhandledProps(ModalContent, props);\n  var ElementType = getElementType(ModalContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nModalContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"image\", \"scrolling\"];\nModalContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A modal can contain image content. */\n  image: PropTypes.bool,\n\n  /** A modal can use the entire size of the screen. */\n  scrolling: PropTypes.bool\n} : {};\nModalContent.create = createShorthandFactory(ModalContent, function (content) {\n  return {\n    content: content\n  };\n});\nexport default ModalContent;"]},"metadata":{},"sourceType":"module"}