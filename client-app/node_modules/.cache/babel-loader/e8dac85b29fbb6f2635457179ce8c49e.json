{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = internalCombineValidators;\n\nvar _parseFieldName = require('./parseFieldName');\n\nvar _parseFieldName2 = _interopRequireDefault(_parseFieldName);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction defaultSerializeValues(values) {\n  return values;\n}\n\nfunction internalCombineValidators(validators, atRoot) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var serializeValues = atRoot && typeof options.serializeValues === 'function' ? options.serializeValues : defaultSerializeValues;\n  var nullWhenValid = atRoot && options.nullWhenValid === true;\n\n  function finalSerializeValues(values) {\n    if (values == null) {\n      return {};\n    }\n\n    return serializeValues(values) || {};\n  }\n\n  return function valuesValidator(values, allValues) {\n    var serializedValues = finalSerializeValues(values);\n    var serializedAllValues = finalSerializeValues(allValues);\n    var finalErrors = Object.keys(validators).reduce(function (errors, fieldName) {\n      var parsedField = (0, _parseFieldName2.default)(fieldName);\n      var validator = validators[parsedField.fullName];\n      var value = serializedValues[parsedField.baseName];\n      var finalAllValues = atRoot ? serializedValues : serializedAllValues;\n      var errorMessage = parsedField.isArray ? (value || []).map(function (fieldValue) {\n        return validator(fieldValue, finalAllValues);\n      }) : validator(value, finalAllValues);\n\n      if (errorMessage) {\n        errors[parsedField.baseName] = errorMessage;\n      }\n\n      return errors;\n    }, {});\n\n    if (nullWhenValid && Object.keys(finalErrors).length === 0) {\n      return null;\n    }\n\n    return finalErrors;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}