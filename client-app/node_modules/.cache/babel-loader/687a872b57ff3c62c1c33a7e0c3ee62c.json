{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\src\\\\features\\\\activities\\\\dashboard\\\\ActivityDashboard.tsx\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport ActivityList from \"./ActivityList\";\nimport { observer } from \"mobx-react-lite\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst ActivityDashboard = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages\n  } = rootStore.activityStore;\n  const [loadingNext, setloadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setloadingNext(true);\n    setPage(page + 1);\n    loadActivities().then(() => setloadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n  if (loadingInitial && page === 0) return /*#__PURE__*/React.createElement(LoadingComponent, {\n    content: \"Loading activities\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }\n  });\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: handleGetNext,\n    hasMore: !loadingNext && page + 1 < totalPages,\n    initialLoad: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ActivityList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    floated: \"right\",\n    content: \"More ..\",\n    positive: true,\n    disabled: totalPages === page + 1,\n    onClick: handleGetNext,\n    loading: loadingNext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Activity filters\")));\n};\n\nexport default observer(ActivityDashboard);","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/activities/dashboard/ActivityDashboard.tsx"],"names":["React","useContext","useEffect","useState","Grid","Button","ActivityList","observer","LoadingComponent","RootStoreContext","InfiniteScroll","ActivityDashboard","rootStore","loadActivities","loadingInitial","setPage","page","totalPages","activityStore","loadingNext","setloadingNext","handleGetNext","then"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,iBAA2B,GAAG,MAAM;AACxC,QAAMC,SAAS,GAAGX,UAAU,CAACQ,gBAAD,CAA5B;AACA,QAAM;AACJI,IAAAA,cADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA;AALI,MAMFL,SAAS,CAACM,aANd;AAQA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMkB,aAAa,GAAG,MAAM;AAC1BD,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAL,IAAAA,OAAO,CAACC,IAAI,GAAG,CAAR,CAAP;AACAH,IAAAA,cAAc,GAAGS,IAAjB,CAAsB,MAAMF,cAAc,CAAC,KAAD,CAA1C;AACD,GAJD;;AAMAlB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,MAAIC,cAAc,IAAIE,IAAI,KAAK,CAA/B,EACE,oBAAO,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAC,oBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEF,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,cAAD;AACA,IAAA,SAAS,EAAE,CADX;AAEA,IAAA,QAAQ,EAAEK,aAFV;AAGA,IAAA,OAAO,EAAE,CAACF,WAAD,IAAgBH,IAAI,GAAG,CAAP,GAAUC,UAHnC;AAIA,IAAA,WAAW,EAAE,KAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAFF,eAUE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,OAAO,EAAC,SAFV;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,QAAQ,EAAEA,UAAU,KAAKD,IAAI,GAAG,CAJlC;AAKE,IAAA,OAAO,EAAEK,aALX;AAME,IAAA,OAAO,EAAEF,WANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF,eAoBE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CApBF,CADF;AA0BD,CAnDD;;AAqDA,eAAeZ,QAAQ,CAACI,iBAAD,CAAvB","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport ActivityList from \"./ActivityList\";\nimport { observer } from \"mobx-react-lite\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst ActivityDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n  } = rootStore.activityStore;\n\n  const [loadingNext, setloadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setloadingNext(true);\n    setPage(page + 1);\n    loadActivities().then(() => setloadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n  if (loadingInitial && page === 0)\n    return <LoadingComponent content=\"Loading activities\" />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n\n        <InfiniteScroll \n        pageStart={0}\n        loadMore={handleGetNext}\n        hasMore={!loadingNext && page + 1< totalPages}\n        initialLoad={false}\n        >\n          <ActivityList />\n        </InfiniteScroll>\n        <Button\n          floated=\"right\"\n          content=\"More ..\"\n          positive\n          disabled={totalPages === page + 1}\n          onClick={handleGetNext}\n          loading={loadingNext}\n        />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <h2>Activity filters</h2>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n"]},"metadata":{},"sourceType":"module"}