{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Bean, PostConstruct } from \"../context/context\";\nimport { Autowired } from \"../context/context\";\nimport { NumberSequence, _ } from '../utils';\n\nvar MouseEventService =\n/** @class */\nfunction () {\n  function MouseEventService() {\n    this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();\n  }\n\n  MouseEventService_1 = MouseEventService;\n\n  MouseEventService.prototype.init = function () {\n    this.stampDomElementWithGridInstance();\n  }; // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n  // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n  // for where this is used.\n\n\n  MouseEventService.prototype.stampDomElementWithGridInstance = function () {\n    this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;\n  };\n\n  MouseEventService.prototype.getRenderedCellForEvent = function (event) {\n    return _.getCellCompForEvent(this.gridOptionsWrapper, event);\n  }; // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n  // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n  // getting executed on many grids at the same time.\n\n\n  MouseEventService.prototype.isEventFromThisGrid = function (event) {\n    var path = _.getEventPath(event);\n\n    for (var i = 0; i < path.length; i++) {\n      var element = path[i];\n      var instanceId = element[MouseEventService_1.GRID_DOM_KEY];\n\n      if (_.exists(instanceId)) {\n        var eventFromThisGrid = instanceId === this.gridInstanceId;\n        return eventFromThisGrid;\n      }\n    }\n\n    return false;\n  };\n\n  MouseEventService.prototype.getCellPositionForEvent = function (event) {\n    var cellComp = this.getRenderedCellForEvent(event);\n    return cellComp ? cellComp.getCellPosition() : null;\n  };\n\n  var MouseEventService_1;\n  MouseEventService.gridInstanceSequence = new NumberSequence();\n  MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';\n\n  __decorate([Autowired('gridOptionsWrapper')], MouseEventService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('eGridDiv')], MouseEventService.prototype, \"eGridDiv\", void 0);\n\n  __decorate([PostConstruct], MouseEventService.prototype, \"init\", null);\n\n  MouseEventService = MouseEventService_1 = __decorate([Bean('mouseEventService')], MouseEventService);\n  return MouseEventService;\n}();\n\nexport { MouseEventService };","map":null,"metadata":{},"sourceType":"module"}