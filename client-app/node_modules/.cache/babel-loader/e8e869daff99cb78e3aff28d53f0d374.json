{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\src\\\\features\\\\activities\\\\form\\\\ActivityForm.tsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan } from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nconst validate = combineValidators({\n  title: isRequired({\n    message: 'The event title is required'\n  }),\n  category: isRequired('Category'),\n  description: composeValidators(isRequired('Description'), hasLengthGreaterThan(4)({\n    message: 'Description needs to be at least 5 characters'\n  }))(),\n  city: isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date'),\n  time: isRequired('Time')\n});\n\nconst ActivityForm = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const _rootStore$activitySt = rootStore.activityStore,\n        createActivity = _rootStore$activitySt.createActivity,\n        editActivity = _rootStore$activitySt.editActivity,\n        submitting = _rootStore$activitySt.submitting,\n        loadActivity = _rootStore$activitySt.loadActivity;\n\n  const _useState = useState(new ActivityFormValues()),\n        _useState2 = _slicedToArray(_useState, 2),\n        activity = _useState2[0],\n        setActivity = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id).then(activity => {\n        setActivity(new ActivityFormValues(activity));\n      }).finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = values => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n\n    const date = values.date,\n          time = values.time,\n          activity = _objectWithoutProperties(values, [\"date\", \"time\"]);\n\n    activity.date = dateAndTime;\n\n    if (!activity.id) {\n      let newActivity = _objectSpread({}, activity, {\n        id: uuid()\n      });\n\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    clearing: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(FinalForm, {\n    validate: validate,\n    initialValues: activity,\n    onSubmit: handleFinalFormSubmit,\n    render: ({\n      handleSubmit,\n      invalid,\n      pristine\n    }) => React.createElement(Form, {\n      onSubmit: handleSubmit,\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      placeholder: \"Title\",\n      value: activity.title,\n      component: TextInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      placeholder: \"Description\",\n      rows: 3,\n      value: activity.description,\n      component: TextAreaInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Field, {\n      component: SelectInput,\n      options: category,\n      name: \"category\",\n      placeholder: \"Category\",\n      value: activity.category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Field, {\n      component: DateInput,\n      name: \"date\",\n      date: true,\n      placeholder: \"Date\",\n      value: activity.date,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(Field, {\n      component: DateInput,\n      name: \"time\",\n      time: true,\n      placeholder: \"Time\",\n      value: activity.time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(Field, {\n      component: TextInput,\n      name: \"city\",\n      placeholder: \"City\",\n      value: activity.city,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Field, {\n      component: TextInput,\n      name: \"venue\",\n      placeholder: \"Venue\",\n      value: activity.venue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(Button, {\n      loading: submitting,\n      disabled: loading || invalid || pristine,\n      floated: \"right\",\n      positive: true,\n      type: \"submit\",\n      content: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: activity.id ? () => history.push(\"/activities/\".concat(activity.id)) : () => history.push('/activities'),\n      disabled: loading,\n      floated: \"right\",\n      type: \"button\",\n      content: \"Cancel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }))));\n};\n\nexport default observer(ActivityForm);","map":{"version":3,"sources":["C:\\Projects\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx"],"names":["React","useState","useContext","useEffect","Segment","Form","Button","Grid","ActivityFormValues","v4","uuid","observer","FinalForm","Field","TextInput","TextAreaInput","SelectInput","DateInput","category","combineDateAndTime","combineValidators","isRequired","composeValidators","hasLengthGreaterThan","RootStoreContext","validate","title","message","description","city","venue","date","time","ActivityForm","match","history","rootStore","activityStore","createActivity","editActivity","submitting","loadActivity","activity","setActivity","loading","setLoading","params","id","then","finally","handleFinalFormSubmit","values","dateAndTime","newActivity","handleSubmit","invalid","pristine","push"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport {\n  combineValidators,\n  isRequired,\n  composeValidators,\n  hasLengthGreaterThan\n} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  title: isRequired({ message: 'The event title is required' }),\n  category: isRequired('Category'),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters'\n    })\n  )(),\n  city: isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date'),\n  time: isRequired('Time')\n});\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then(activity => {\n          setActivity(new ActivityFormValues(activity));\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid()\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='title'\n                  placeholder='Title'\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  name='description'\n                  placeholder='Description'\n                  rows={3}\n                  value={activity.description}\n                  component={TextAreaInput}\n                />\n                <Field\n                  component={SelectInput}\n                  options={category}\n                  name='category'\n                  placeholder='Category'\n                  value={activity.category}\n                />\n                <Form.Group widths='equal'>\n                  <Field\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    placeholder='Date'\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder='Time'\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                <Field\n                  component={TextInput}\n                  name='city'\n                  placeholder='City'\n                  value={activity.city}\n                />\n                <Field\n                  component={TextInput}\n                  name='venue'\n                  placeholder='Venue'\n                  value={activity.venue}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content='Submit'\n                />\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content='Cancel'\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n"]},"metadata":{},"sourceType":"module"}