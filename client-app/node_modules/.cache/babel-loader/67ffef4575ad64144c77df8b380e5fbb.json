{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _uncontrollable = _interopRequireDefault(require(\"uncontrollable\"));\n\nvar _Widget = _interopRequireDefault(require(\"./Widget\"));\n\nvar _WidgetPicker = _interopRequireDefault(require(\"./WidgetPicker\"));\n\nvar _List = _interopRequireDefault(require(\"./List\"));\n\nvar _Popup = _interopRequireDefault(require(\"./Popup\"));\n\nvar _Select = _interopRequireDefault(require(\"./Select\"));\n\nvar _ComboboxInput = _interopRequireDefault(require(\"./ComboboxInput\"));\n\nvar _messages = require(\"./messages\");\n\nvar _focusManager = _interopRequireDefault(require(\"./util/focusManager\"));\n\nvar _reduceToListState = _interopRequireDefault(require(\"./util/reduceToListState\"));\n\nvar _getAccessors = _interopRequireDefault(require(\"./util/getAccessors\"));\n\nvar CustomPropTypes = _interopRequireWildcard(require(\"./util/PropTypes\"));\n\nvar _scrollManager = _interopRequireDefault(require(\"./util/scrollManager\"));\n\nvar _ = require(\"./util/_\");\n\nvar Props = _interopRequireWildcard(require(\"./util/Props\"));\n\nvar Filter = _interopRequireWildcard(require(\"./util/Filter\"));\n\nvar _interaction = require(\"./util/interaction\");\n\nvar _widgetHelpers = require(\"./util/widgetHelpers\");\n\nvar _Icon = require(\"./Icon\");\n\nvar _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nfunction _initializerWarningHelper(descriptor, context) {\n  throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.');\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar propTypes = _extends({}, Filter.propTypes, {\n  value: _propTypes.default.any,\n  onChange: _propTypes.default.func,\n  open: _propTypes.default.bool,\n  onToggle: _propTypes.default.func,\n  itemComponent: CustomPropTypes.elementType,\n  listComponent: CustomPropTypes.elementType,\n  groupComponent: CustomPropTypes.elementType,\n  groupBy: CustomPropTypes.accessor,\n  data: _propTypes.default.array,\n  valueField: CustomPropTypes.accessor,\n  textField: CustomPropTypes.accessor,\n  name: _propTypes.default.string,\n\n  /**\n   *\n   * @type {(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}\n   */\n  onSelect: _propTypes.default.func,\n  autoFocus: _propTypes.default.bool,\n  disabled: CustomPropTypes.disabled.acceptsArray,\n  readOnly: CustomPropTypes.disabled,\n\n  /**\n   * When `true` the Combobox will suggest, or fill in, values as you type. The suggestions\n   * are always \"startsWith\", meaning it will search from the start of the `textField` property\n   */\n  suggest: Filter.propTypes.filter,\n  busy: _propTypes.default.bool,\n\n  /** Specify the element used to render the select (down arrow) icon. */\n  selectIcon: _propTypes.default.node,\n\n  /** Specify the element used to render the busy indicator */\n  busySpinner: _propTypes.default.node,\n  delay: _propTypes.default.number,\n  dropUp: _propTypes.default.bool,\n  popupTransition: CustomPropTypes.elementType,\n  placeholder: _propTypes.default.string,\n\n  /** Adds a css class to the input container element. */\n  containerClassName: _propTypes.default.string,\n  inputProps: _propTypes.default.object,\n  listProps: _propTypes.default.object,\n  isRtl: _propTypes.default.bool,\n  messages: _propTypes.default.shape({\n    openCombobox: CustomPropTypes.message,\n    emptyList: CustomPropTypes.message,\n    emptyFilter: CustomPropTypes.message\n  })\n  /**\n   * ---\n   * shortcuts:\n   *   - { key: alt + down arrow, label: open combobox }\n   *   - { key: alt + up arrow, label: close combobox }\n   *   - { key: down arrow, label: move focus to next item }\n   *   - { key: up arrow, label: move focus to previous item }\n   *   - { key: home, label: move focus to first item }\n   *   - { key: end, label: move focus to last item }\n   *   - { key: enter, label: select focused item }\n   *   - { key: any key, label: search list for item starting with key }\n   * ---\n   *\n   * Select an item from the list, or input a custom value. The Combobox can also make suggestions as you type.\n  \n   * @public\n   */\n\n});\n\nvar Combobox = (0, _reactLifecyclesCompat.polyfill)(_class = (_class2 = (_temp = _class3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Combobox, _React$Component);\n\n  function Combobox(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    _this.handleFocusWillChange = function (focused) {\n      if (!focused && _this.inputRef) _this.inputRef.accept();\n      if (focused) _this.focus();\n    };\n\n    _this.handleFocusChanged = function (focused) {\n      if (!focused) _this.close();\n    };\n\n    _initializerDefineProperty(_this, \"handleSelect\", _descriptor, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.handleInputKeyDown = function (_ref) {\n      var key = _ref.key;\n      _this._deleting = key === 'Backspace' || key === 'Delete';\n      _this._isTyping = true;\n    };\n\n    _this.handleInputChange = function (event) {\n      var suggestion = _this.suggest(event.target.value);\n\n      _this.change(suggestion, true, event);\n\n      _this.open();\n    };\n\n    _initializerDefineProperty(_this, \"handleKeyDown\", _descriptor2, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.attachListRef = function (ref) {\n      _this.listRef = ref;\n    };\n\n    _this.attachInputRef = function (ref) {\n      _this.inputRef = ref;\n    };\n\n    _initializerDefineProperty(_this, \"toggle\", _descriptor3, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.inputId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_input');\n    _this.listId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_listbox');\n    _this.activeId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_listbox_active_option');\n    _this.handleScroll = (0, _scrollManager.default)(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.focusManager = (0, _focusManager.default)(_assertThisInitialized(_assertThisInitialized(_this)), {\n      willHandle: _this.handleFocusWillChange,\n      didHandle: _this.handleFocusChanged\n    });\n    _this.state = {\n      isSuggesting: function isSuggesting() {\n        return _this.inputRef && _this.inputRef.isSuggesting();\n      }\n    };\n    return _this;\n  }\n\n  var _proto = Combobox.prototype;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    var isSuggesting = nextState.isSuggesting(),\n        stateChanged = !(0, _.isShallowEqual)(nextState, this.state),\n        valueChanged = !(0, _.isShallowEqual)(nextProps, this.props);\n    return isSuggesting || stateChanged || valueChanged;\n  };\n\n  Combobox.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value,\n        data = nextProps.data,\n        messages = nextProps.messages,\n        filter = nextProps.filter,\n        minLength = nextProps.minLength,\n        caseSensitive = nextProps.caseSensitive;\n    var focusedItem = prevState.focusedItem;\n    var accessors = (0, _getAccessors.default)(nextProps);\n    var valueChanged = value !== prevState.lastValue;\n    var selectedIndex = accessors.indexOf(data, value);\n    var dataItem = selectedIndex === -1 ? value : data[selectedIndex];\n    var searchTerm; // filter only when the value is not an item in the data list\n\n    if (selectedIndex === -1 || prevState.isSuggesting()) {\n      searchTerm = accessors.text(dataItem);\n    }\n\n    data = Filter.filter(data, {\n      filter: filter,\n      searchTerm: searchTerm,\n      minLength: minLength,\n      caseSensitive: caseSensitive,\n      textField: accessors.text\n    });\n    var list = (0, _reduceToListState.default)(data, prevState.list, {\n      nextProps: nextProps\n    }); // index may have changed after filtering\n\n    if (selectedIndex !== -1) {\n      selectedIndex = accessors.indexOf(data, value);\n    }\n\n    var focusedIndex = accessors.indexOf(data, focusedItem);\n\n    if (focusedIndex === -1) {\n      // value isn't a dataItem so find the close match\n      focusedIndex = Filter.indexOf(data, {\n        searchTerm: searchTerm,\n        textField: accessors.text,\n        filter: filter || true\n      });\n    }\n\n    var selectedItem = data[selectedIndex];\n    var nextFocusedItem = null; // If no item is focused, or is no longer in the dataset, default to either the selected item, or to the first item in the list\n\n    if (focusedIndex === -1) {\n      if (selectedItem !== undefined) {\n        nextFocusedItem = selectedItem;\n      } else {\n        nextFocusedItem = data[0];\n      }\n    } else {\n      nextFocusedItem = data[focusedIndex];\n    }\n\n    return {\n      data: data,\n      list: list,\n      accessors: accessors,\n      lastValue: value,\n      messages: (0, _messages.getMessages)(messages),\n      selectedItem: valueChanged ? list.nextEnabled(selectedItem) : prevState.selectedItem,\n      focusedItem: valueChanged || focusedItem === undefined ? list.nextEnabled(selectedItem !== undefined ? selectedItem : nextFocusedItem) : nextFocusedItem\n    };\n  }; // has to be done early since `accept()` re-focuses the input\n\n\n  _proto.renderInput = function renderInput() {\n    var _this$props = this.props,\n        suggest = _this$props.suggest,\n        filter = _this$props.filter,\n        busy = _this$props.busy,\n        name = _this$props.name,\n        data = _this$props.data,\n        value = _this$props.value,\n        autoFocus = _this$props.autoFocus,\n        tabIndex = _this$props.tabIndex,\n        placeholder = _this$props.placeholder,\n        inputProps = _this$props.inputProps,\n        disabled = _this$props.disabled,\n        readOnly = _this$props.readOnly,\n        open = _this$props.open;\n    var accessors = this.state.accessors;\n    var valueItem = accessors.findOrSelf(data, value);\n    var completeType = suggest ? filter ? 'both' : 'inline' : filter ? 'list' : '';\n    return _react.default.createElement(_ComboboxInput.default, _extends({}, inputProps, {\n      role: \"combobox\",\n      name: name,\n      id: this.inputId,\n      autoFocus: autoFocus,\n      tabIndex: tabIndex,\n      suggest: suggest,\n      disabled: disabled === true,\n      readOnly: readOnly === true,\n      \"aria-busy\": !!busy,\n      \"aria-owns\": this.listId,\n      \"aria-autocomplete\": completeType,\n      \"aria-activedescendant\": open ? this.activeId : null,\n      \"aria-expanded\": open,\n      \"aria-haspopup\": true,\n      placeholder: placeholder,\n      value: accessors.text(valueItem),\n      onChange: this.handleInputChange,\n      onKeyDown: this.handleInputKeyDown,\n      ref: this.attachInputRef\n    }));\n  };\n\n  _proto.renderList = function renderList(messages) {\n    var activeId = this.activeId,\n        inputId = this.inputId,\n        listId = this.listId;\n    var _this$props2 = this.props,\n        open = _this$props2.open,\n        data = _this$props2.data,\n        value = _this$props2.value,\n        listProps = _this$props2.listProps,\n        optionComponent = _this$props2.optionComponent,\n        itemComponent = _this$props2.itemComponent,\n        groupComponent = _this$props2.groupComponent;\n    var _this$state = this.state,\n        list = _this$state.list,\n        accessors = _this$state.accessors,\n        focusedItem = _this$state.focusedItem,\n        selectedItem = _this$state.selectedItem,\n        filteredData = _this$state.data;\n    var List = this.props.listComponent;\n    return _react.default.createElement(List, _extends({}, listProps, {\n      id: listId,\n      activeId: activeId,\n      data: filteredData,\n      dataState: list.dataState,\n      isDisabled: list.isDisabled,\n      textAccessor: accessors.text,\n      valueAccessor: accessors.value,\n      itemComponent: itemComponent,\n      groupComponent: groupComponent,\n      optionComponent: optionComponent,\n      selectedItem: selectedItem,\n      focusedItem: open ? focusedItem : null,\n      searchTerm: accessors.text(value) || '',\n      \"aria-hidden\": !open,\n      \"aria-labelledby\": inputId,\n      \"aria-live\": open && 'polite',\n      onSelect: this.handleSelect,\n      onMove: this.handleScroll,\n      ref: this.attachListRef,\n      messages: {\n        emptyList: data.length ? messages.emptyFilter : messages.emptyList\n      }\n    }));\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props3 = this.props,\n        isRtl = _this$props3.isRtl,\n        className = _this$props3.className,\n        popupTransition = _this$props3.popupTransition,\n        busy = _this$props3.busy,\n        dropUp = _this$props3.dropUp,\n        open = _this$props3.open,\n        selectIcon = _this$props3.selectIcon,\n        busySpinner = _this$props3.busySpinner,\n        containerClassName = _this$props3.containerClassName;\n    var _this$state2 = this.state,\n        focused = _this$state2.focused,\n        messages = _this$state2.messages;\n    var disabled = this.props.disabled === true,\n        readOnly = this.props.readOnly === true;\n    var elementProps = Props.pickElementProps(this);\n    var shouldRenderPopup = (0, _widgetHelpers.isFirstFocusedRender)(this);\n    return _react.default.createElement(_Widget.default, _extends({}, elementProps, {\n      open: open,\n      isRtl: isRtl,\n      dropUp: dropUp,\n      focused: focused,\n      disabled: disabled,\n      readOnly: readOnly,\n      onBlur: this.focusManager.handleBlur,\n      onFocus: this.focusManager.handleFocus,\n      onKeyDown: this.handleKeyDown,\n      className: (0, _classnames.default)(className, 'rw-combobox')\n    }), _react.default.createElement(_WidgetPicker.default, {\n      className: containerClassName\n    }, this.renderInput(), _react.default.createElement(_Select.default, {\n      bordered: true,\n      busy: busy,\n      icon: selectIcon,\n      spinner: busySpinner,\n      onClick: this.toggle,\n      disabled: disabled || readOnly,\n      label: messages.openCombobox(this.props)\n    })), shouldRenderPopup && _react.default.createElement(_Popup.default, {\n      open: open,\n      dropUp: dropUp,\n      transition: popupTransition,\n      onEntering: function onEntering() {\n        return _this2.listRef.forceUpdate();\n      }\n    }, _react.default.createElement(\"div\", null, this.renderList(messages))));\n  };\n\n  _proto.focus = function focus() {\n    if (this.inputRef) this.inputRef.focus();\n  };\n\n  _proto.change = function change(nextValue, typing, originalEvent) {\n    var _this$props4 = this.props,\n        onChange = _this$props4.onChange,\n        lastValue = _this$props4.value;\n    this._typedChange = !!typing;\n    (0, _widgetHelpers.notify)(onChange, [nextValue, {\n      lastValue: lastValue,\n      originalEvent: originalEvent\n    }]);\n  };\n\n  _proto.open = function open() {\n    if (!this.props.open) (0, _widgetHelpers.notify)(this.props.onToggle, true);\n  };\n\n  _proto.close = function close() {\n    if (this.props.open) (0, _widgetHelpers.notify)(this.props.onToggle, false);\n  };\n\n  _proto.suggest = function suggest(searchTerm) {\n    var _this$props5 = this.props,\n        textField = _this$props5.textField,\n        suggest = _this$props5.suggest,\n        minLength = _this$props5.minLength;\n    var data = this.state.data;\n    if (!this._deleting) return Filter.suggest(data, {\n      minLength: minLength,\n      textField: textField,\n      searchTerm: searchTerm,\n      filter: suggest,\n      caseSensitive: false\n    });\n    return searchTerm;\n  };\n\n  return Combobox;\n}(_react.default.Component), _class3.propTypes = propTypes, _class3.defaultProps = {\n  data: [],\n  value: '',\n  open: false,\n  suggest: false,\n  filter: false,\n  delay: 500,\n  selectIcon: _Icon.caretDown,\n  listComponent: _List.default\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"handleSelect\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this3 = this;\n\n    return function (data, originalEvent) {\n      _this3.close();\n\n      (0, _widgetHelpers.notify)(_this3.props.onSelect, [data, {\n        originalEvent: originalEvent\n      }]);\n\n      _this3.change(data, false, originalEvent);\n\n      _this3.inputRef && _this3.inputRef.accept(true);\n\n      _this3.focus();\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"handleKeyDown\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this4 = this;\n\n    return function (e) {\n      var key = e.key,\n          altKey = e.altKey;\n      var _this4$props = _this4.props,\n          open = _this4$props.open,\n          onKeyDown = _this4$props.onKeyDown;\n      var _this4$state = _this4.state,\n          focusedItem = _this4$state.focusedItem,\n          selectedItem = _this4$state.selectedItem,\n          list = _this4$state.list;\n      (0, _widgetHelpers.notify)(onKeyDown, [e]);\n      if (e.defaultPrevented) return;\n\n      var select = function select(item) {\n        return item != null && _this4.handleSelect(item, e);\n      };\n\n      var focusItem = function focusItem(item) {\n        return _this4.setState({\n          focusedItem: item\n        });\n      };\n\n      if (key === 'End' && open) {\n        e.preventDefault();\n        focusItem(list.last());\n      } else if (key === 'Home' && open) {\n        e.preventDefault();\n        focusItem(list.first());\n      } else if (key === 'Escape' && open) {\n        e.preventDefault();\n\n        _this4.close();\n      } else if (key === 'Enter' && open) {\n        e.preventDefault();\n        select(_this4.state.focusedItem);\n      } else if (key === 'Tab') {\n        _this4.inputRef.accept();\n      } else if (key === 'ArrowDown') {\n        e.preventDefault();\n        if (altKey) return _this4.open();\n        if (open) focusItem(list.next(focusedItem));else select(list.next(selectedItem));\n      } else if (key === 'ArrowUp') {\n        e.preventDefault();\n        if (altKey) return _this4.close();\n        if (open) focusItem(list.prev(focusedItem));else select(list.prev(selectedItem));\n      }\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"toggle\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this5 = this;\n\n    return function () {\n      _this5.focus();\n\n      _this5.props.open ? _this5.close() : _this5.open();\n    };\n  }\n})), _class2)) || _class;\n\nvar _default = (0, _uncontrollable.default)(Combobox, {\n  open: 'onToggle',\n  value: 'onChange'\n}, ['focus']);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}