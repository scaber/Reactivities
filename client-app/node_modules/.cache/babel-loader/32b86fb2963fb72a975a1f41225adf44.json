{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nrequire(\"antd/es/select/style\");\n\nvar _select = _interopRequireDefault(require(\"antd/es/select\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Logger = _interopRequireDefault(require(\"@terrestris/base-util/dist/Logger\"));\n\nvar _MapUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MapUtil/MapUtil\"));\n\nvar _constants = require(\"../../constants\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Option = _select[\"default\"].Option;\n\nvar _isInteger = require('lodash/isInteger');\n\nvar _isEmpty = require('lodash/isEmpty');\n\nvar _isEqual = require('lodash/isEqual');\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _reverse = require('lodash/reverse');\n\nvar _clone = require('lodash/clone');\n/**\n * Class representing a scale combo to choose map scale via a dropdown menu.\n *\n * @class The ScaleCombo\n * @extends React.Component\n */\n\n\nvar ScaleCombo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ScaleCombo, _React$Component);\n\n  _createClass(ScaleCombo, null, [{\n    key: \"getDerivedStateFromProps\",\n\n    /**\n     * The className added to this component.\n     * @private\n     */\n\n    /**\n     * The default props\n     */\n\n    /**\n     * Invoked after the component is instantiated as well as when it\n     * receives new props. It should return an object to update state, or null\n     * to indicate that the new props do not require any state updates.\n     *\n     * @param nextProps The next properties.\n     * @param prevState The previous state.\n     */\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (_isInteger(nextProps.zoomLevel) && !_isEqual(nextProps.zoomLevel, prevState.zoomLevel)) {\n        return {\n          zoomLevel: nextProps.zoomLevel\n        };\n      }\n\n      if (_isFunction(nextProps.onZoomLevelSelect) && !_isEqual(nextProps.onZoomLevelSelect, prevState.onZoomLevelSelect)) {\n        return {\n          onZoomLevelSelect: nextProps.onZoomLevelSelect\n        };\n      }\n\n      return null;\n    }\n    /**\n     * Create a scale combo.\n     * @constructs ScaleCombo\n     */\n\n  }]);\n\n  function ScaleCombo(props) {\n    var _this;\n\n    _classCallCheck(this, ScaleCombo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScaleCombo).call(this, props));\n    /**\n     * The default onZoomLevelSelect function sets the resolution of the passed\n     * map according to the selected Scale.\n     *\n     * @param selectedScale The selectedScale.\n     */\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"scalecombo\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"zoomListener\", function (evt) {\n      var zoom = evt.target.getView().getZoom();\n      var roundZoom = Math.round(zoom);\n\n      if (!roundZoom) {\n        roundZoom = 0;\n      }\n\n      _this.setState({\n        zoomLevel: roundZoom\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pushScale\", function (scales, resolution, view) {\n      var scale = _MapUtil[\"default\"].getScaleForResolution(resolution, view.getProjection().getUnits());\n\n      var roundScale = _MapUtil[\"default\"].roundScale(scale);\n\n      if (scales.includes(roundScale)) {\n        return;\n      }\n\n      scales.push(roundScale);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOptionsFromMap\", function () {\n      var _this$props = _this.props,\n          map = _this$props.map,\n          resolutionsFilter = _this$props.resolutionsFilter;\n\n      if (!_isEmpty(_this.state.scales)) {\n        _Logger[\"default\"].debug('Array with scales found. Returning');\n\n        return [];\n      }\n\n      if (!map) {\n        _Logger[\"default\"].warn('Map component not found. Could not initialize options array.');\n\n        return [];\n      }\n\n      var scales = [];\n      var view = map.getView(); // use existing resolutions array if exists\n\n      var resolutions = view.getResolutions();\n\n      if (_isEmpty(resolutions)) {\n        for (var currentZoomLevel = view.getMaxZoom(); currentZoomLevel >= view.getMinZoom(); currentZoomLevel--) {\n          var resolution = view.getResolutionForZoom(currentZoomLevel);\n\n          if (resolutionsFilter(resolution)) {\n            _this.pushScale(scales, resolution, view);\n          }\n        }\n      } else {\n        var reversedResolutions = _reverse(_clone(resolutions));\n\n        reversedResolutions.filter(resolutionsFilter).forEach(function (resolution) {\n          _this.pushScale(scales, resolution, view);\n        });\n      }\n\n      return scales;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"determineOptionKeyForZoomLevel\", function (zoom) {\n      if (!_isInteger(zoom) || _this.state.scales.length - 1 - zoom < 0) {\n        return undefined;\n      }\n\n      return _this.state.scales[_this.state.scales.length - 1 - zoom].toString();\n    });\n\n    var defaultOnZoomLevelSelect = function defaultOnZoomLevelSelect(selectedScale) {\n      var mapView = props.map.getView();\n\n      var calculatedResolution = _MapUtil[\"default\"].getResolutionForScale(selectedScale, mapView.getProjection().getUnits());\n\n      mapView.setResolution(calculatedResolution);\n    };\n\n    _this.state = {\n      zoomLevel: props.zoomLevel || props.map.getView().getZoom(),\n      onZoomLevelSelect: props.onZoomLevelSelect || defaultOnZoomLevelSelect,\n      scales: props.scales || _this.getOptionsFromMap()\n    };\n\n    if (props.syncWithMap) {\n      props.map.on('moveend', _this.zoomListener);\n    }\n\n    return _this;\n  }\n  /**\n   * Invoked immediately after updating occurs. This method is not called for\n   * the initial render.\n   *\n   * @param prevProps The previous props.\n   */\n\n\n  _createClass(ScaleCombo, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          map = _this$props2.map,\n          syncWithMap = _this$props2.syncWithMap;\n\n      if (!_isEqual(syncWithMap, prevProps.syncWithMap)) {\n        if (syncWithMap) {\n          map.on('moveend', this.zoomListener);\n        } else {\n          map.un('moveend', this.zoomListener);\n        }\n      }\n    }\n    /**\n     * Set the zoomLevel of the to the ScaleCombo.\n     *\n     * @param evt The 'moveend' event\n     * @private\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * The render function.\n     */\n    value: function render() {\n      var _this$props3 = this.props,\n          style = _this$props3.style,\n          className = _this$props3.className;\n      var _this$state = this.state,\n          onZoomLevelSelect = _this$state.onZoomLevelSelect,\n          scales = _this$state.scales,\n          zoomLevel = _this$state.zoomLevel;\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      var options = scales.map(function (roundScale) {\n        return React.createElement(Option, {\n          key: roundScale,\n          value: roundScale.toString()\n        }, \"1:\".concat(roundScale.toLocaleString()));\n      });\n      return React.createElement(_select[\"default\"], {\n        showSearch: true,\n        onChange: onZoomLevelSelect,\n        filterOption: function filterOption(input, option) {\n          return option.key.toString().startsWith(input);\n        },\n        value: this.determineOptionKeyForZoomLevel(zoomLevel),\n        size: \"small\",\n        style: style,\n        className: finalClassName\n      }, options);\n    }\n  }]);\n\n  return ScaleCombo;\n}(React.Component);\n\n_defineProperty(ScaleCombo, \"defaultProps\", {\n  resolutionsFilter: function resolutionsFilter() {\n    return true;\n  },\n  style: {\n    width: 100\n  },\n  scales: [],\n  syncWithMap: true\n});\n\nvar _default = ScaleCombo;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}