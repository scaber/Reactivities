{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar PropTypes = _interopRequireWildcard(require(\"prop-types\"));\n\nvar _constants = require(\"../../constants\");\n\nrequire(\"./ToggleGroup.less\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _isFunction = require('lodash/isFunction');\n/**\n * A group for toggle components (e.g. buttons)\n *\n * @class The ToggleGroup\n * @extends React.Component\n */\n\n\nvar ToggleGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ToggleGroup, _React$Component);\n  /**\n   * The className added to this component.\n   * @private\n   */\n\n  /**\n   * The default properties.\n   */\n\n  /**\n   * The child context types.\n   */\n\n  /**\n   * The constructor.\n   *\n   * @param props The properties.\n   */\n\n\n  function ToggleGroup(props) {\n    var _this;\n\n    _classCallCheck(this, ToggleGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToggleGroup).call(this, props));\n    /**\n     * The initial state.\n     */\n\n    _defineProperty(_assertThisInitialized(_this), \"_className\", \"\".concat(_constants.CSS_PREFIX, \"togglegroup\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (childProps) {\n      if (_isFunction(_this.props.onChange)) {\n        _this.props.onChange(childProps);\n      } // Allow deselect.\n\n\n      if (_this.props.allowDeselect && childProps.name === _this.state.selectedName) {\n        _this.setState({\n          selectedName: null\n        });\n      } else {\n        _this.setState({\n          selectedName: childProps.name\n        });\n      }\n    });\n\n    _this.state = {\n      selectedName: props.selectedName\n    };\n    return _this;\n  }\n  /**\n   * Returns the context for the children.\n   *\n   * @return The child context.\n   */\n\n\n  _createClass(ToggleGroup, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        toggleGroup: {\n          name: this.props.name,\n          selectedName: this.state.selectedName,\n          onChange: this.onChange\n        }\n      };\n    }\n    /**\n     * The onChange handler.\n     *\n     * @param childProps The properties of the children.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * The render function.\n     */\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          orientation = _this$props.orientation,\n          children = _this$props.children;\n      var className = this.props.className ? \"\".concat(this.props.className, \" \").concat(this._className) : this._className;\n      var orientationClass = orientation === 'vertical' ? 'vertical-toggle-group' : 'horizontal-toggle-group';\n      var childrenWithProps = React.Children.map(children, function (child) {\n        // pass the press state through to child components\n        return React.cloneElement(child, {\n          pressed: _this2.state.selectedName === child.props.name\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"\".concat(className, \" \").concat(orientationClass)\n      }, childrenWithProps);\n    }\n  }]);\n\n  return ToggleGroup;\n}(React.Component);\n\n_defineProperty(ToggleGroup, \"defaultProps\", {\n  orientation: 'vertical',\n  allowDeselect: true\n});\n\n_defineProperty(ToggleGroup, \"childContextTypes\", {\n  toggleGroup: PropTypes.object\n});\n\nvar _default = ToggleGroup;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}