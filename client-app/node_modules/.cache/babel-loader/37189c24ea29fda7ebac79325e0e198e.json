{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * Button groups can contain conditionals.\n */\n\nfunction ButtonOr(props) {\n  var className = props.className,\n      text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    \"data-text\": text\n  }));\n}\n\nButtonOr.handledProps = [\"as\", \"className\", \"text\"];\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/semantic-ui-react/dist/es/elements/Button/ButtonOr.js"],"names":["_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","ButtonOr","props","className","text","classes","rest","ElementType","createElement","handledProps","propTypes","process","env","NODE_ENV","as","string","oneOfType","number"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,QAAmE,WAAnE;AACA;;;;AAIA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,IAAI,GAAGF,KAAK,CAACE,IADjB;AAEA,MAAIC,OAAO,GAAGV,EAAE,CAAC,IAAD,EAAOQ,SAAP,CAAhB;AACA,MAAIG,IAAI,GAAGN,iBAAiB,CAACC,QAAD,EAAWC,KAAX,CAA5B;AACA,MAAIK,WAAW,GAAGR,cAAc,CAACE,QAAD,EAAWC,KAAX,CAAhC;AACA,SAAOL,KAAK,CAACW,aAAN,CAAoBD,WAApB,EAAiCb,QAAQ,CAAC,EAAD,EAAKY,IAAL,EAAW;AACzDH,IAAAA,SAAS,EAAEE,OAD8C;AAEzD,iBAAaD;AAF4C,GAAX,CAAzC,CAAP;AAID;;AAEDH,QAAQ,CAACQ,YAAT,GAAwB,CAAC,IAAD,EAAO,WAAP,EAAoB,MAApB,CAAxB;AACAR,QAAQ,CAACS,SAAT,GAAqBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC3D;AACAC,EAAAA,EAAE,EAAEhB,eAAe,CAACgB,EAFuC;;AAI3D;AACAX,EAAAA,SAAS,EAAEP,SAAS,CAACmB,MALsC;;AAO3D;AACAX,EAAAA,IAAI,EAAER,SAAS,CAACoB,SAAV,CAAoB,CAACpB,SAAS,CAACqB,MAAX,EAAmBrB,SAAS,CAACmB,MAA7B,CAApB;AARqD,CAAxC,GASjB,EATJ;AAUA,eAAed,QAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * Button groups can contain conditionals.\n */\n\nfunction ButtonOr(props) {\n  var className = props.className,\n      text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    \"data-text\": text\n  }));\n}\n\nButtonOr.handledProps = [\"as\", \"className\", \"text\"];\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;"]},"metadata":{},"sourceType":"module"}