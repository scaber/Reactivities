{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { _ } from \"../../utils\";\nimport { Constants } from \"../../constants\";\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with ag-Grid extend this class. User filters do not\n * extend this class.\n */\n\nvar ProvidedFilter =\n/** @class */\nfunction (_super) {\n  __extends(ProvidedFilter, _super);\n\n  function ProvidedFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @deprecated */\n\n\n  ProvidedFilter.prototype.onFilterChanged = function () {\n    console.warn(\"ag-Grid: you should not call onFilterChanged() directly on the filter, please call\\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\\n        a method that existed on an old version of the filters that was not intended for public use.\");\n    this.providedFilterParams.filterChangedCallback();\n  };\n\n  ProvidedFilter.prototype.isFilterActive = function () {\n    // filter is active if we have a valid applied model\n    return !!this.appliedModel;\n  };\n\n  ProvidedFilter.prototype.postConstruct = function () {\n    var templateString = this.createTemplate();\n    this.setTemplate(templateString);\n  };\n\n  ProvidedFilter.prototype.init = function (params) {\n    this.setParams(params);\n    this.resetUiToDefaults();\n    this.updateUiVisibility();\n    this.setupOnBtApplyDebounce();\n  };\n\n  ProvidedFilter.prototype.setParams = function (params) {\n    var _this = this;\n\n    this.providedFilterParams = params;\n    this.applyActive = ProvidedFilter.isUseApplyButton(params);\n\n    if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_KEEP) {\n      this.newRowsActionKeep = true;\n    } else if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_CLEAR) {\n      this.newRowsActionKeep = false;\n    } else {\n      // the default for SSRM and IRM is 'keep', for CSRM and VRM teh default is 'clear'\n      var rowModelType = this.rowModel.getType();\n      var modelsForKeep = [Constants.ROW_MODEL_TYPE_SERVER_SIDE, Constants.ROW_MODEL_TYPE_INFINITE];\n      this.newRowsActionKeep = modelsForKeep.indexOf(rowModelType) >= 0;\n    }\n\n    _.setDisplayed(this.eApplyButton, this.applyActive); // we do not bind onBtApply here because onBtApply() has a parameter, and it is not the event. if we\n    // just applied, the event would get passed as the second parameter, which we do not want.\n\n\n    this.addDestroyableEventListener(this.eApplyButton, \"click\", function () {\n      return _this.onBtApply();\n    });\n    var clearActive = params.clearButton === true;\n\n    _.setDisplayed(this.eClearButton, clearActive);\n\n    this.addDestroyableEventListener(this.eClearButton, \"click\", function () {\n      return _this.onBtClear();\n    });\n    var resetActive = params.resetButton === true;\n\n    _.setDisplayed(this.eResetButton, resetActive);\n\n    this.addDestroyableEventListener(this.eResetButton, \"click\", function () {\n      return _this.onBtReset();\n    });\n    var anyButtonVisible = this.applyActive || clearActive || resetActive;\n\n    _.setDisplayed(this.eButtonsPanel, anyButtonVisible);\n  }; // subclasses can override this to provide alternative debounce defaults\n\n\n  ProvidedFilter.prototype.getDefaultDebounceMs = function () {\n    return 0;\n  };\n\n  ProvidedFilter.prototype.setupOnBtApplyDebounce = function () {\n    var debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n    this.onBtApplyDebounce = _.debounce(this.onBtApply.bind(this), debounceMs);\n  };\n\n  ProvidedFilter.prototype.getModel = function () {\n    return this.appliedModel;\n  };\n\n  ProvidedFilter.prototype.setModel = function (model) {\n    if (model) {\n      this.setModelIntoUi(model);\n    } else {\n      this.resetUiToDefaults();\n    }\n\n    this.updateUiVisibility(); // we set the model from the gui, rather than the provided model,\n    // so the model is consistent. eg handling of null/undefined will be the same,\n    // of if model is case insensitive, then casing is removed.\n\n    this.applyModel();\n  };\n\n  ProvidedFilter.prototype.onBtClear = function () {\n    this.resetUiToDefaults();\n    this.updateUiVisibility();\n    this.onUiChanged();\n  };\n\n  ProvidedFilter.prototype.onBtReset = function () {\n    this.onBtClear();\n    this.onBtApply();\n  }; // returns true if the new model is different to the old model\n\n\n  ProvidedFilter.prototype.applyModel = function () {\n    var oldAppliedModel = this.appliedModel;\n    this.appliedModel = this.getModelFromUi(); // models can be same if user pasted same content into text field, or maybe just changed the case\n    // and it's a case insensitive filter\n\n    var newModelDifferent = !this.areModelsEqual(this.appliedModel, oldAppliedModel);\n    return newModelDifferent;\n  };\n\n  ProvidedFilter.prototype.onBtApply = function (afterFloatingFilter) {\n    if (afterFloatingFilter === void 0) {\n      afterFloatingFilter = false;\n    }\n\n    var newModelDifferent = this.applyModel();\n\n    if (newModelDifferent) {\n      // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n      // came from floating filter\n      this.providedFilterParams.filterChangedCallback({\n        afterFloatingFilter: afterFloatingFilter\n      });\n    }\n  };\n\n  ProvidedFilter.prototype.onNewRowsLoaded = function () {\n    if (!this.newRowsActionKeep) {\n      this.resetUiToDefaults();\n      this.appliedModel = null;\n    }\n  }; // called by set filter\n\n\n  ProvidedFilter.prototype.isNewRowsActionKeep = function () {\n    return this.newRowsActionKeep;\n  };\n\n  ProvidedFilter.prototype.onUiChanged = function (afterFloatingFilter) {\n    if (afterFloatingFilter === void 0) {\n      afterFloatingFilter = false;\n    }\n\n    this.updateUiVisibility();\n    this.providedFilterParams.filterModifiedCallback(); // applyNow=true for floating filter changes, we always act on these immediately\n\n    if (afterFloatingFilter) {\n      this.onBtApply(true); // otherwise if no apply button, we apply (but debounce for time delay)\n    } else if (!this.applyActive) {\n      this.onBtApplyDebounce();\n    }\n  };\n\n  ProvidedFilter.prototype.createTemplate = function () {\n    var body = this.createBodyTemplate();\n    var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n    return \"<div>\\n                    <div class='ag-filter-body-wrapper' ref=\\\"eFilterBodyWrapper\\\">\" + body + \"</div>\\n                    <div class=\\\"ag-filter-apply-panel\\\" ref=\\\"eButtonsPanel\\\">\\n                        <button type=\\\"button\\\" ref=\\\"eClearButton\\\">\" + translate('clearFilter', 'Clear Filter') + \"</button>\\n                        <button type=\\\"button\\\" ref=\\\"eResetButton\\\">\" + translate('resetFilter', 'Reset Filter') + \"</button>\\n                        <button type=\\\"button\\\" ref=\\\"eApplyButton\\\">\" + translate('applyFilter', 'Apply Filter') + \"</button>\\n                    </div>\\n                </div>\";\n  }; // static, as used by floating filter also\n\n\n  ProvidedFilter.getDebounceMs = function (params, debounceDefault) {\n    var applyActive = ProvidedFilter.isUseApplyButton(params);\n\n    if (applyActive) {\n      if (params.debounceMs != null) {\n        console.warn('ag-Grid: debounceMs is ignored when applyButton = true');\n      }\n\n      return 0;\n    }\n\n    return params.debounceMs != null ? params.debounceMs : debounceDefault;\n  }; // static, as used by floating filter also\n\n\n  ProvidedFilter.isUseApplyButton = function (params) {\n    if (params.apply && !params.applyButton) {\n      console.warn('ag-Grid: as of ag-Grid v21, filterParams.apply is now filterParams.applyButton, please change to applyButton');\n      params.applyButton = true;\n    }\n\n    return params.applyButton === true;\n  };\n\n  ProvidedFilter.NEW_ROWS_ACTION_KEEP = 'keep';\n  ProvidedFilter.NEW_ROWS_ACTION_CLEAR = 'clear';\n\n  __decorate([RefSelector('eButtonsPanel')], ProvidedFilter.prototype, \"eButtonsPanel\", void 0);\n\n  __decorate([RefSelector('eFilterBodyWrapper')], ProvidedFilter.prototype, \"eFilterBodyWrapper\", void 0);\n\n  __decorate([RefSelector('eClearButton')], ProvidedFilter.prototype, \"eClearButton\", void 0);\n\n  __decorate([RefSelector('eResetButton')], ProvidedFilter.prototype, \"eResetButton\", void 0);\n\n  __decorate([RefSelector('eApplyButton')], ProvidedFilter.prototype, \"eApplyButton\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], ProvidedFilter.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('rowModel')], ProvidedFilter.prototype, \"rowModel\", void 0);\n\n  __decorate([PostConstruct], ProvidedFilter.prototype, \"postConstruct\", null);\n\n  return ProvidedFilter;\n}(Component);\n\nexport { ProvidedFilter };","map":null,"metadata":{},"sourceType":"module"}