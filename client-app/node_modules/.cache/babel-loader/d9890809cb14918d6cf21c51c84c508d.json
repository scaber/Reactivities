{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AgColorPanel } from \"./agColorPanel\";\nimport { AgDialog } from \"./agDialog\";\nimport { AgPickerField } from \"./agPickerField\";\nimport { AgAbstractField } from \"./agAbstractField\";\nimport { _ } from \"../utils\";\n\nvar AgColorPicker =\n/** @class */\nfunction (_super) {\n  __extends(AgColorPicker, _super);\n\n  function AgColorPicker(config) {\n    var _this = _super.call(this) || this;\n\n    _this.displayTag = 'div';\n    _this.className = 'ag-color-picker';\n    _this.pickerIcon = 'colorPicker';\n\n    _this.setTemplate(_this.TEMPLATE.replace(/%displayField%/g, _this.displayTag));\n\n    if (config && config.color) {\n      _this.value = config.color;\n    }\n\n    return _this;\n  }\n\n  AgColorPicker.prototype.postConstruct = function () {\n    var _this = this;\n\n    _super.prototype.postConstruct.call(this);\n\n    _.addCssClass(this.getGui(), this.className);\n\n    this.addDestroyableEventListener(this.eDisplayField, 'click', function () {\n      return _this.showPicker();\n    });\n\n    if (this.value) {\n      this.setValue(this.value);\n    }\n  };\n\n  AgColorPicker.prototype.showPicker = function () {\n    var _this = this;\n\n    if (this.displayedPicker) {\n      this.displayedPicker = false;\n      return;\n    }\n\n    var eGuiRect = this.getGui().getBoundingClientRect();\n    var colorDialog = new AgDialog({\n      closable: false,\n      modal: true,\n      hideTitleBar: true,\n      minWidth: 190,\n      width: 190,\n      height: 250,\n      x: eGuiRect.right - 190,\n      y: eGuiRect.top - 250\n    });\n    this.getContext().wireBean(colorDialog);\n\n    _.addCssClass(colorDialog.getGui(), 'ag-color-dialog');\n\n    var colorPanel = new AgColorPanel({\n      picker: this\n    });\n    this.getContext().wireBean(colorPanel);\n    colorPanel.addDestroyFunc(function () {\n      if (colorDialog.isAlive()) {\n        colorDialog.destroy();\n      }\n    });\n    colorDialog.setParentComponent(this);\n    colorDialog.setBodyComponent(colorPanel);\n    colorPanel.setValue(this.getValue());\n    colorDialog.addDestroyFunc(function () {\n      var wasDestroying = _this.isDestroyingPicker;\n      _this.displayedPicker = false; // here we check if the picker was already being\n      // destroyed to avoid a stackoverflow\n\n      if (!wasDestroying) {\n        _this.isDestroyingPicker = true;\n\n        if (colorPanel.isAlive()) {\n          colorPanel.destroy();\n        }\n      } else {\n        _this.isDestroyingPicker = false;\n      }\n    });\n  };\n\n  AgColorPicker.prototype.setValue = function (color) {\n    if (this.value === color) {\n      return this;\n    }\n\n    this.value = color;\n    this.eDisplayField.style.backgroundColor = color;\n    this.dispatchEvent({\n      type: AgAbstractField.EVENT_CHANGED\n    });\n    return this;\n  };\n\n  AgColorPicker.prototype.getValue = function () {\n    return this.value;\n  };\n\n  return AgColorPicker;\n}(AgPickerField);\n\nexport { AgColorPicker };","map":null,"metadata":{},"sourceType":"module"}