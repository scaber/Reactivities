{"ast":null,"code":"var createDecoder = require('./decoder');\n\nfunction dbfHeader(data) {\n  var out = {};\n  out.lastUpdated = new Date(data.readUInt8(1) + 1900, data.readUInt8(2), data.readUInt8(3));\n  out.records = data.readUInt32LE(4);\n  out.headerLen = data.readUInt16LE(8);\n  out.recLen = data.readUInt16LE(10);\n  return out;\n}\n\nfunction dbfRowHeader(data, headerLen, decoder) {\n  var out = [];\n  var offset = 32;\n\n  while (offset < headerLen) {\n    out.push({\n      name: decoder(data.slice(offset, offset + 11)),\n      dataType: String.fromCharCode(data.readUInt8(offset + 11)),\n      len: data.readUInt8(offset + 16),\n      decimal: data.readUInt8(offset + 17)\n    });\n\n    if (data.readUInt8(offset + 32) === 13) {\n      break;\n    } else {\n      offset += 32;\n    }\n  }\n\n  return out;\n}\n\nfunction rowFuncs(buffer, offset, len, type, decoder) {\n  var data = buffer.slice(offset, offset + len);\n  var textData = decoder(data);\n\n  switch (type) {\n    case 'N':\n    case 'F':\n    case 'O':\n      return parseFloat(textData, 10);\n\n    case 'D':\n      return new Date(textData.slice(0, 4), parseInt(textData.slice(4, 6), 10) - 1, textData.slice(6, 8));\n\n    case 'L':\n      return textData.toLowerCase() === 'y' || textData.toLowerCase() === 't';\n\n    default:\n      return textData;\n  }\n}\n\nfunction parseRow(buffer, offset, rowHeaders, decoder) {\n  var out = {};\n  var i = 0;\n  var len = rowHeaders.length;\n  var field;\n  var header;\n\n  while (i < len) {\n    header = rowHeaders[i];\n    field = rowFuncs(buffer, offset, header.len, header.dataType, decoder);\n    offset += header.len;\n\n    if (typeof field !== 'undefined') {\n      out[header.name] = field;\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\nmodule.exports = function (buffer, encoding) {\n  var decoder = createDecoder(encoding);\n  var header = dbfHeader(buffer);\n  var rowHeaders = dbfRowHeader(buffer, header.headerLen - 1, decoder);\n  var offset = (rowHeaders.length + 1 << 5) + 2;\n  var recLen = header.recLen;\n  var records = header.records;\n  var out = [];\n\n  while (records) {\n    out.push(parseRow(buffer, offset, rowHeaders, decoder));\n    offset += recLen;\n    records--;\n  }\n\n  return out;\n};","map":null,"metadata":{},"sourceType":"script"}