{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url_parse_1 = __importDefault(require(\"url-parse\"));\n\nvar query_string_1 = __importDefault(require(\"query-string\"));\n\nvar clone_js_1 = __importDefault(require(\"lodash/clone.js\"));\n\nvar isURL_1 = __importDefault(require(\"validator/lib/isURL\"));\n/**\n * Helper Class for the URL handling.\n *\n * @class\n */\n\n\nvar UrlUtil =\n/** @class */\nfunction () {\n  function UrlUtil() {}\n  /**\n   * Returns an object representation of an URL.\n   *\n   * @param {string} url The URL to read in.\n   * @return {URL} The parsed URL object.\n   */\n\n\n  UrlUtil.read = function (url) {\n    return new url_parse_1.default(url, null, query_string_1.default.parse);\n  };\n  /**\n   * Returns a string representation of an URL object.\n   *\n   * @param {URL} urlObj The URL object to write out.\n   * @return {string} The stringified URL.\n   */\n\n\n  UrlUtil.write = function (urlObj) {\n    return urlObj.toString();\n  };\n  /**\n   * Returns the base path of an URL.\n   *\n   * @param {string} url The URL to obtain the base path from.\n   * @return {string} The base path.\n   */\n\n\n  UrlUtil.getBasePath = function (url) {\n    var urlObj = UrlUtil.read(url);\n    return urlObj.protocol + \"//\" + urlObj.host + urlObj.pathname;\n  };\n  /**\n   * Returns the query params of a given URL as object.\n   *\n   * @param {string} url The URL to get the query params from.\n   * @return {Object} The query params of the given URL.\n   */\n\n\n  UrlUtil.getQueryParams = function (url) {\n    var urlObj = UrlUtil.read(url);\n    return urlObj.query;\n  };\n  /**\n   * Returns the value of the given query param of the provided URL. If not\n   * found, undefined will be returned.\n   *\n   * @param {string} url The URL to get the query params from.\n   * @param {string} key The key to get the value from.\n   * @return {string} The query param value.\n   */\n\n\n  UrlUtil.getQueryParam = function (url, key) {\n    var queryParamsObj = UrlUtil.getQueryParams(url);\n    var foundKey = Object.keys(queryParamsObj).filter(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    })[0];\n    return queryParamsObj[foundKey];\n  };\n  /**\n   * Joins some query parameters (defined by `keys`) of two query objects and\n   * returns the joined query parameters.\n   *\n   *     var params1 = {FOO: 'foo,bar', BAZ: 'baz', HUMPTY: '1'};\n   *     var params2 = {FOO: 'pupe,pape', BAZ: 'baz', DUMPTY: '42'};\n   *     var keys = ['FOO'];\n   *     var joined = this.joinQueryParams(params1, params2, keys);\n   *     // joined is now\n   *     // {FOO: 'foo,bar,pupe,pape', BAZ: 'baz', HUMPTY: '1'};\n   *\n   * @param {Object} params1 The first object with parameters, where certain\n   *                         keys might have values that are joined with `,`.\n   * @param {Object} params2 The second object with parameters, where certain\n   *                         keys might have values that are joined with `,`.\n   * @param {Array} keys The keys which we will consider for joining. Others\n   *                     will be taken from the first object with parameters.\n   * @return {Object} The joined query parameters.\n   */\n\n\n  UrlUtil.joinQueryParams = function (params1, params2, keys) {\n    var joined = clone_js_1.default(params1);\n    var comma = ',';\n    keys.forEach(function (key) {\n      if (joined[key]) {\n        joined[key] = joined[key].split(comma).concat(params2[key].split(comma)).join(comma);\n      }\n    });\n    return joined;\n  };\n  /**\n   * Checks if a given URL has the provided query parameter present.\n   *\n   * @param {string} url The URL to check.\n   * @param {string} key The query parameter to check.\n   * @return {boolean} Whether the parameter is present or not.\n   */\n\n\n  UrlUtil.hasQueryParam = function (url, key) {\n    var queryParamsObj = UrlUtil.getQueryParams(url);\n    return !!Object.keys(queryParamsObj).some(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  /**\n   * Creates a valid GetCapabilitiesRequest out of the given URL by checking if\n   * SERVICE, REQUEST and VERSION are set.\n   *\n   * @param {string} url The URL to validate.\n   * @param {string} service The service to set. Default is to 'WMS'.\n   * @param {string} version The version to set. Default is to '1.3.0'.\n   * @return {string} The validated URL.\n   */\n\n\n  UrlUtil.createValidGetCapabilitiesRequest = function (url, service, version) {\n    if (service === void 0) {\n      service = 'WMS';\n    }\n\n    if (version === void 0) {\n      version = '1.3.0';\n    }\n\n    var baseUrl = UrlUtil.getBasePath(url);\n    var queryParamsObject = UrlUtil.getQueryParams(url);\n\n    if (!UrlUtil.hasQueryParam(url, 'SERVICE')) {\n      queryParamsObject.SERVICE = service;\n    }\n\n    if (!UrlUtil.hasQueryParam(url, 'REQUEST')) {\n      queryParamsObject.REQUEST = 'GetCapabilities';\n    }\n\n    if (!UrlUtil.hasQueryParam(url, 'VERSION')) {\n      queryParamsObject.VERSION = version;\n    }\n\n    return baseUrl + \"?\" + UrlUtil.objectToRequestString(queryParamsObject);\n  };\n  /**\n   * This joins/bundles a given set of (typically WMS GetFeatureInfo) requests\n   * by the base URL. E.g. it merges the following two requests:\n   *\n   * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji\n   * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Kagawa\n   *\n   * to\n   *\n   * https://maps.bvb.de?SERVICE=WMS&REQUEST=GetFeatureInfo&LAYERS=Shinji,Kagawa\n   *\n   * @param {Array} featureInfoUrls An array of requests to bundle.\n   * @param {boolean} stringify Whether to stringify the output or not. If set\n   *                            to false an object keyed by the base URL and\n   *                            valued by the combined requests params will be\n   *                            returned.\n   * @param {Array} bundleParams An array of query params to bundle, default is\n   *                             to ['LAYERS', 'QUERY_LAYERS', 'STYLES'].\n   */\n\n\n  UrlUtil.bundleOgcRequests = function (featureInfoUrls, stringify, bundleParams) {\n    if (stringify === void 0) {\n      stringify = false;\n    }\n\n    if (bundleParams === void 0) {\n      bundleParams = ['LAYERS', 'QUERY_LAYERS', 'STYLES'];\n    }\n\n    var featureInfoUrlColl = {};\n    featureInfoUrls.forEach(function (featureInfoUrl) {\n      var featureInfoQueryParams = UrlUtil.getQueryParams(featureInfoUrl);\n      var featureInfoBaseUrl = UrlUtil.getBasePath(featureInfoUrl);\n\n      if (!featureInfoUrlColl[featureInfoBaseUrl]) {\n        featureInfoUrlColl[featureInfoBaseUrl] = featureInfoQueryParams;\n      } else {\n        var existingQueryParams = featureInfoUrlColl[featureInfoBaseUrl];\n        var newQueryParams = featureInfoQueryParams;\n        featureInfoUrlColl[featureInfoBaseUrl] = UrlUtil.joinQueryParams(existingQueryParams, newQueryParams, bundleParams);\n      }\n    });\n    var urls = [];\n\n    if (stringify) {\n      for (var _i = 0, _a = Object.entries(featureInfoUrlColl); _i < _a.length; _i++) {\n        var _b = _a[_i],\n            baseUrl = _b[0],\n            queryParams = _b[1];\n        var urlObj = UrlUtil.read(baseUrl);\n        urlObj.set('query', queryParams);\n        urls.push(UrlUtil.write(urlObj));\n      }\n\n      return urls;\n    }\n\n    return featureInfoUrlColl;\n  };\n  /**\n   * Transforms an object into a string containing requestParams (without\n   * leading questionmark).\n   *\n   * @param {Object} object An object containing kvp for the request.\n   *                        e.g. {height:400, width:200}\n   * @return {string} The kvps as a requestString. e.g. 'height=400&width=200'\n   */\n\n\n  UrlUtil.objectToRequestString = function (object) {\n    var requestString = Object.keys(object).map(function (key) {\n      return encodeURIComponent(key) + '=' + encodeURIComponent(object[key]);\n    }).join('&');\n    return requestString;\n  };\n  /**\n   * Checks if a given URL is valid. Implementation based on\n   * https://www.npmjs.com/package/validator.\n   *\n   * @param {string} url The URL to validate.\n   * @param {Object} opts The validation `validator` options.\n   * @return {boolean} Whether the URL is valid or not.\n   */\n\n\n  UrlUtil.isValid = function (url, opts) {\n    if (opts === void 0) {\n      opts = {\n        require_tld: false,\n        require_protocol: true\n      };\n    }\n\n    return isURL_1.default(url, opts);\n  };\n\n  return UrlUtil;\n}();\n\nexports.UrlUtil = UrlUtil;\nexports.default = UrlUtil;","map":null,"metadata":{},"sourceType":"script"}