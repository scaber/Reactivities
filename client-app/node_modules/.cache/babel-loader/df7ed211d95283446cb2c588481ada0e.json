{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\src\\\\features\\\\profiles\\\\ProfilePage.tsx\";\nimport React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ProfileHeader from './ProfileHeader';\nimport { ProfileContent } from './ProfileContent';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { observer } from 'mobx-react-lite';\n\nconst ProfilePage = ({\n  match\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadingProfile,\n    profile,\n    loadProfile\n  } = rootStore.profileStore;\n  useEffect(() => {\n    loadProfile(match.params.userName);\n  }, [loadProfile, match]);\n  if (loadingProfile) return /*#__PURE__*/React.createElement(LoadingComponent, {\n    content: \"Loading Profile ..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 31\n    }\n  });\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ProfileHeader, {\n    profile: profile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ProfileContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default observer(ProfilePage);","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/profiles/ProfilePage.tsx"],"names":["React","useContext","useEffect","Grid","ProfileHeader","ProfileContent","RootStoreContext","LoadingComponent","observer","ProfilePage","match","rootStore","loadingProfile","profile","loadProfile","profileStore","params","userName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,SAASC,QAAT,QAAyB,iBAAzB;;AAUC,MAAMC,WAA4B,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAC/C,QAAMC,SAAS,GAAEV,UAAU,CAACK,gBAAD,CAA3B;AACA,QAAM;AAACM,IAAAA,cAAD;AAAgBC,IAAAA,OAAhB;AAAwBC,IAAAA;AAAxB,MAAsCH,SAAS,CAACI,YAAtD;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,WAAW,CAACJ,KAAK,CAACM,MAAN,CAAaC,QAAd,CAAX;AAEH,GAHQ,EAGN,CAACH,WAAD,EAAaJ,KAAb,CAHM,CAAT;AAKA,MAAGE,cAAH,EAAmB,oBAAO,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEnB,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ;AAQH,CAnBA;;AAqBD,eAAeL,QAAQ,CAACC,WAAD,CAAvB","sourcesContent":["import React, { useContext, useEffect } from 'react'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport ProfileHeader from './ProfileHeader'\r\nimport { ProfileContent } from './ProfileContent'\r\nimport { RootStoreContext } from '../../app/stores/rootStore'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\n\r\ninterface RouteParams {\r\nuserName:string;    \r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {\r\n\r\n}\r\n const ProfilePage:React.FC<IProps> = ({match}) => {\r\n    const rootStore =useContext(RootStoreContext);\r\n    const {loadingProfile,profile,loadProfile} =rootStore.profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(match.params.userName)\r\n       \r\n    }, [loadProfile,match])\r\n\r\n    if(loadingProfile) return <LoadingComponent content ='Loading Profile ..'/>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader profile={profile!}/>\r\n                <ProfileContent/>\r\n            </Grid.Column> \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage)"]},"metadata":{},"sourceType":"module"}