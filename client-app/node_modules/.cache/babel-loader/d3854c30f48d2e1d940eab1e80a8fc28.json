{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { OptionsFactory } from \"./optionsFactory\";\nimport { ProvidedFilter } from \"./providedFilter\";\nimport { _ } from \"../../utils\";\nexport var ConditionPosition;\n\n(function (ConditionPosition) {\n  ConditionPosition[ConditionPosition[\"One\"] = 0] = \"One\";\n  ConditionPosition[ConditionPosition[\"Two\"] = 1] = \"Two\";\n})(ConditionPosition || (ConditionPosition = {}));\n\nvar DEFAULT_TRANSLATIONS = {\n  loadingOoo: 'Loading...',\n  empty: 'Choose One',\n  equals: 'Equals',\n  notEqual: 'Not equal',\n  lessThan: 'Less than',\n  greaterThan: 'Greater than',\n  inRange: 'In range',\n  lessThanOrEqual: 'Less than or equals',\n  greaterThanOrEqual: 'Greater than or equals',\n  filterOoo: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Not contains',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  searchOoo: 'Search...',\n  selectAll: 'Select All',\n  applyFilter: 'Apply Filter',\n  clearFilter: 'Clear Filter',\n  andCondition: 'AND',\n  orCondition: 'OR'\n};\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values\n */\n\nvar SimpleFilter =\n/** @class */\nfunction (_super) {\n  __extends(SimpleFilter, _super);\n\n  function SimpleFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // returns true if this type requires a 'from' field, eg any filter that requires at least one text value\n\n\n  SimpleFilter.prototype.showValueFrom = function (type) {\n    return !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter.EMPTY;\n  }; // returns true if this type requires a 'to' field, currently only 'range' returns true\n\n\n  SimpleFilter.prototype.showValueTo = function (type) {\n    return type === SimpleFilter.IN_RANGE;\n  }; // floating filter calls this when user applies filter from floating filter\n\n\n  SimpleFilter.prototype.onFloatingFilterChanged = function (type, value) {\n    this.setValueFromFloatingFilter(value);\n    this.setTypeFromFloatingFilter(type);\n    this.onUiChanged(true);\n  };\n\n  SimpleFilter.prototype.setTypeFromFloatingFilter = function (type) {\n    this.eType1.value = type;\n    this.eType2.value = null;\n    this.eJoinOperatorAnd.checked = true;\n  };\n\n  SimpleFilter.prototype.getModelFromUi = function () {\n    if (!this.isConditionUiComplete(ConditionPosition.One)) {\n      return null;\n    }\n\n    if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {\n      var res = {\n        filterType: this.getFilterType(),\n        operator: this.getJoinOperator(),\n        condition1: this.createCondition(ConditionPosition.One),\n        condition2: this.createCondition(ConditionPosition.Two)\n      };\n      return res;\n    } else {\n      var res = this.createCondition(ConditionPosition.One);\n      return res;\n    }\n  };\n\n  SimpleFilter.prototype.getCondition1Type = function () {\n    return this.eType1.value;\n  };\n\n  SimpleFilter.prototype.getCondition2Type = function () {\n    return this.eType2.value;\n  };\n\n  SimpleFilter.prototype.getJoinOperator = function () {\n    return this.eJoinOperatorOr.checked ? 'OR' : 'AND';\n  };\n\n  SimpleFilter.prototype.areModelsEqual = function (a, b) {\n    // both are missing\n    if (!a && !b) {\n      return true;\n    } // one is missing, other present\n\n\n    if (!a && b || a && !b) {\n      return false;\n    } // one is combined, the other is not\n\n\n    var aIsSimple = !a.operator;\n    var bIsSimple = !b.operator;\n    var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;\n\n    if (oneSimpleOneCombined) {\n      return false;\n    }\n\n    var res; // otherwise both present, so compare\n\n    if (aIsSimple) {\n      var aSimple = a;\n      var bSimple = b;\n      res = this.areSimpleModelsEqual(aSimple, bSimple);\n    } else {\n      var aCombined = a;\n      var bCombined = b;\n      res = aCombined.operator === bCombined.operator && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1) && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);\n    }\n\n    return res;\n  };\n\n  SimpleFilter.prototype.setModelIntoUi = function (model) {\n    var isCombined = model.operator;\n\n    if (isCombined) {\n      var combinedModel = model;\n      var orChecked = combinedModel.operator === 'OR';\n      this.eJoinOperatorAnd.checked = !orChecked;\n      this.eJoinOperatorOr.checked = orChecked;\n      this.eType1.value = combinedModel.condition1.type;\n      this.eType2.value = combinedModel.condition2.type;\n      this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);\n      this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);\n    } else {\n      var simpleModel = model;\n      this.eJoinOperatorAnd.checked = true;\n      this.eJoinOperatorOr.checked = false;\n      this.eType1.value = simpleModel.type;\n      this.eType2.value = this.optionsFactory.getDefaultOption();\n      this.setConditionIntoUi(simpleModel, ConditionPosition.One);\n      this.setConditionIntoUi(null, ConditionPosition.Two);\n    }\n  };\n\n  SimpleFilter.prototype.doesFilterPass = function (params) {\n    var model = this.getModel();\n    var isCombined = model.operator;\n\n    if (isCombined) {\n      var combinedModel = model;\n      var firstResult = this.individualConditionPasses(params, combinedModel.condition1);\n      var secondResult = this.individualConditionPasses(params, combinedModel.condition2);\n\n      if (combinedModel.operator === 'AND') {\n        return firstResult && secondResult;\n      } else {\n        return firstResult || secondResult;\n      }\n    } else {\n      var simpleModel = model;\n      var result = this.individualConditionPasses(params, simpleModel);\n      return result;\n    }\n  };\n\n  SimpleFilter.prototype.setParams = function (params) {\n    _super.prototype.setParams.call(this, params);\n\n    this.simpleFilterParams = params;\n    this.optionsFactory = new OptionsFactory();\n    this.optionsFactory.init(params, this.getDefaultFilterOptions());\n    this.allowTwoConditions = !params.suppressAndOrCondition;\n    this.putOptionsIntoDropdown();\n    this.addChangedListeners();\n  };\n\n  SimpleFilter.prototype.putOptionsIntoDropdown = function () {\n    var _this = this;\n\n    var filterOptions = this.optionsFactory.getFilterOptions();\n    filterOptions.forEach(function (option) {\n      var createOption = function () {\n        var key = typeof option === 'string' ? option : option.displayKey;\n\n        var localName = _this.translate(key);\n\n        var eOption = document.createElement(\"option\");\n        eOption.text = localName;\n        eOption.value = key;\n        return eOption;\n      };\n\n      _this.eType1.add(createOption());\n\n      _this.eType2.add(createOption());\n    });\n    var readOnly = filterOptions.length <= 1;\n    this.eType1.disabled = readOnly;\n    this.eType2.disabled = readOnly;\n  };\n\n  SimpleFilter.prototype.isAllowTwoConditions = function () {\n    return this.allowTwoConditions;\n  };\n\n  SimpleFilter.prototype.createBodyTemplate = function () {\n    var optionsTemplate1 = \"<select class=\\\"ag-filter-select\\\" ref=\\\"eOptions1\\\"></select>\";\n    var valueTemplate1 = this.createValueTemplate(ConditionPosition.One);\n    var optionsTemplate2 = \"<select class=\\\"ag-filter-select\\\" ref=\\\"eOptions2\\\"></select>\";\n    var valueTemplate2 = this.createValueTemplate(ConditionPosition.Two);\n    var uniqueGroupId = 'ag-simple-filter-and-or-' + this.getCompId();\n    var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n    var andOrTemplate = \"<div class=\\\"ag-filter-condition\\\" ref=\\\"eJoinOperatorPanel\\\">\\n                    <label>\\n                        <input ref=\\\"eJoinOperatorAnd\\\" type=\\\"radio\\\" class=\\\"and\\\" name=\\\"\" + uniqueGroupId + \"\\\" value=\\\"AND\\\")} checked=\\\"checked\\\" />\\n                        \" + translate('andCondition', 'AND') + \"\\n                    </label>\\n                    <label>\\n                        <input ref=\\\"eJoinOperatorOr\\\" type=\\\"radio\\\" class=\\\"or\\\" name=\\\"\" + uniqueGroupId + \"\\\" value=\\\"OR\\\" />\\n                        \" + translate('orCondition', 'OR') + \"\\n                    </label>\\n                </div>\";\n    var template = optionsTemplate1 + \"\\n                \" + valueTemplate1 + \"\\n                \" + andOrTemplate + \"\\n                \" + optionsTemplate2 + \"\\n                \" + valueTemplate2;\n    return template;\n  };\n\n  SimpleFilter.prototype.updateUiVisibility = function () {\n    var firstConditionComplete = this.isConditionUiComplete(ConditionPosition.One);\n    var showSecondFilter = this.allowTwoConditions && firstConditionComplete;\n\n    _.setDisplayed(this.eCondition2Body, showSecondFilter);\n\n    _.setDisplayed(this.eType2, showSecondFilter);\n\n    _.setDisplayed(this.eJoinOperatorPanel, showSecondFilter);\n  };\n\n  SimpleFilter.prototype.resetUiToDefaults = function () {\n    this.eJoinOperatorAnd.checked = true;\n    var defaultOption = this.optionsFactory.getDefaultOption();\n    this.eType1.value = defaultOption;\n    this.eType2.value = defaultOption;\n  };\n\n  SimpleFilter.prototype.translate = function (toTranslate) {\n    var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n    var defaultTranslation = DEFAULT_TRANSLATIONS[toTranslate];\n\n    if (!defaultTranslation && this.optionsFactory.getCustomOption(toTranslate)) {\n      defaultTranslation = this.optionsFactory.getCustomOption(toTranslate).displayName;\n    }\n\n    return translate(toTranslate, defaultTranslation);\n  };\n\n  SimpleFilter.prototype.addChangedListeners = function () {\n    var _this = this;\n\n    var listener = function () {\n      return _this.onUiChanged();\n    };\n\n    this.addDestroyableEventListener(this.eType1, \"change\", listener);\n    this.addDestroyableEventListener(this.eType2, \"change\", listener);\n    this.addDestroyableEventListener(this.eJoinOperatorOr, \"change\", listener);\n    this.addDestroyableEventListener(this.eJoinOperatorAnd, \"change\", listener);\n  };\n\n  SimpleFilter.prototype.doesFilterHaveHiddenInput = function (filterType) {\n    var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n    return customFilterOption && customFilterOption.hideFilterInput;\n  };\n\n  SimpleFilter.EMPTY = 'empty';\n  SimpleFilter.EQUALS = 'equals';\n  SimpleFilter.NOT_EQUAL = 'notEqual';\n  SimpleFilter.LESS_THAN = 'lessThan';\n  SimpleFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';\n  SimpleFilter.GREATER_THAN = 'greaterThan';\n  SimpleFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';\n  SimpleFilter.IN_RANGE = 'inRange';\n  SimpleFilter.CONTAINS = 'contains';\n  SimpleFilter.NOT_CONTAINS = 'notContains';\n  SimpleFilter.STARTS_WITH = 'startsWith';\n  SimpleFilter.ENDS_WITH = 'endsWith';\n\n  __decorate([RefSelector('eOptions1')], SimpleFilter.prototype, \"eType1\", void 0);\n\n  __decorate([RefSelector('eOptions2')], SimpleFilter.prototype, \"eType2\", void 0);\n\n  __decorate([RefSelector('eJoinOperatorAnd')], SimpleFilter.prototype, \"eJoinOperatorAnd\", void 0);\n\n  __decorate([RefSelector('eJoinOperatorOr')], SimpleFilter.prototype, \"eJoinOperatorOr\", void 0);\n\n  __decorate([RefSelector('eCondition2Body')], SimpleFilter.prototype, \"eCondition2Body\", void 0);\n\n  __decorate([RefSelector('eJoinOperatorPanel')], SimpleFilter.prototype, \"eJoinOperatorPanel\", void 0);\n\n  return SimpleFilter;\n}(ProvidedFilter);\n\nexport { SimpleFilter };","map":null,"metadata":{},"sourceType":"module"}