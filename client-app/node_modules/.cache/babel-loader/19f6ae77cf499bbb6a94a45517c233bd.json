{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nrequire(\"antd/es/tree/style\");\n\nvar _tree = _interopRequireDefault(require(\"antd/es/tree\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Base = _interopRequireDefault(require(\"ol/layer/Base\"));\n\nvar _Group = _interopRequireDefault(require(\"ol/layer/Group\"));\n\nvar _Collection = _interopRequireDefault(require(\"ol/Collection\"));\n\nvar _MapEvent = _interopRequireDefault(require(\"ol/MapEvent\"));\n\nvar _Observable = require(\"ol/Observable\");\n\nvar _Logger = _interopRequireDefault(require(\"@terrestris/base-util/dist/Logger\"));\n\nvar _MapUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MapUtil/MapUtil\"));\n\nvar _LayerTreeNode = _interopRequireDefault(require(\"./LayerTreeNode/LayerTreeNode\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _isBoolean = require('lodash/isBoolean');\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isEqual = require('lodash/isEqual');\n/**\n * The LayerTree.\n *\n * Note. This component expects that all layerGroups are permanently visibile.\n *\n * @class LayerTree\n * @extends React.Component\n */\n\n\nvar LayerTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LayerTree, _React$Component);\n\n  _createClass(LayerTree, null, [{\n    key: \"getDerivedStateFromProps\",\n\n    /**\n     * The className added to this component.\n     * @private\n     */\n\n    /**\n     *  An array of ol.EventsKey as returned by on() or once().\n     * @private\n     */\n\n    /**\n     * The default properties.\n     */\n\n    /**\n     * Invoked after the component is instantiated as well as when it\n     * receives new props. It should return an object to update state, or null\n     * to indicate that the new props do not require any state updates.\n     *\n     * @param nextProps The next properties.\n     * @param prevState The previous state.\n     */\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (prevState.layerGroup && nextProps.layerGroup) {\n        if (!_isEqual(prevState.layerGroup.ol_uid, nextProps.layerGroup.ol_uid) || !_isEqual(prevState.layerGroupRevision, nextProps.layerGroup.getRevision())) {\n          return {\n            layerGroup: nextProps.layerGroup,\n            layerGroupRevision: nextProps.layerGroup.getRevision()\n          };\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Create the LayerTree.\n     *\n     * @constructs LayerTree\n     */\n\n  }]);\n\n  function LayerTree(props) {\n    var _this;\n\n    _classCallCheck(this, LayerTree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LayerTree).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"layertree\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"olListenerKeys\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"onCollectionAdd\", function (evt) {\n      if (evt.element instanceof _Group[\"default\"]) {\n        _this.registerAddRemoveListeners(evt.element);\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCollectionRemove\", function (evt) {\n      _this.unregisterEventsByLayer(evt.element);\n\n      if (evt.element instanceof _Group[\"default\"]) {\n        evt.element.getLayers().forEach(function (layer) {\n          _this.unregisterEventsByLayer(layer);\n        });\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeLayers\", function (evt) {\n      _this.unregisterEventsByLayer(evt.oldValue);\n\n      if (evt.oldValue instanceof _Collection[\"default\"]) {\n        evt.oldValue.forEach(function (layer) {\n          return _this.unregisterEventsByLayer(layer);\n        });\n      }\n\n      if (evt.target instanceof _Group[\"default\"]) {\n        _this.registerAddRemoveListeners(evt.target);\n      }\n\n      _this.rebuildTreeNodes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unregisterEventsByLayer\", function (layer) {\n      _this.olListenerKeys = _this.olListenerKeys.filter(function (key) {\n        if (layer instanceof _Group[\"default\"]) {\n          var layers = layer.getLayers();\n\n          if (key.target === layers) {\n            if (key.type === 'add' && key.listener === _this.onCollectionAdd || key.type === 'remove' && key.listener === _this.onCollectionRemove || key.type === 'change:layers' && key.listener === _this.onChangeLayers) {\n              (0, _Observable.unByKey)(key);\n              return false;\n            }\n          }\n        } else if (key.target === layer) {\n          if (key.type === 'change:visible' && key.listener === _this.onLayerChangeVisible) {\n            (0, _Observable.unByKey)(key);\n            return false;\n          }\n        }\n\n        return true;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rebuildTreeNodes\", function (evt) {\n      var mapResolution = _this.state.mapResolution;\n\n      if (evt && evt instanceof _MapEvent[\"default\"] && evt.target && evt.target.getView) {\n        if (mapResolution === evt.target.getView().getResolution()) {\n          // If map resolution didn't change => no redraw of tree nodes needed.\n          return;\n        }\n      }\n\n      _this.treeNodesFromLayerGroup(_this.state.layerGroup);\n\n      var checkedKeys = _this.getVisibleOlUids();\n\n      _this.setState({\n        checkedKeys: checkedKeys,\n        mapResolution: evt ? evt.target.getView().getResolution() : -1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hasListener\", function (target, type, listener) {\n      return _this.olListenerKeys.some(function (listenerKey) {\n        return listenerKey.target === target && listenerKey.type === type && listenerKey.listener === listener;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLayerChangeVisible\", function () {\n      var checkedKeys = _this.getVisibleOlUids();\n\n      _this.setState({\n        checkedKeys: checkedKeys\n      }, function () {\n        _this.rebuildTreeNodes();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getVisibleOlUids\", function () {\n      var layers = _MapUtil[\"default\"].getAllLayers(_this.state.layerGroup, function (layer) {\n        return !(layer instanceof _Group[\"default\"]) && layer.getVisible();\n      }).filter(_this.props.filterFunction);\n\n      return layers.map(function (l) {\n        return l.ol_uid.toString();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onExpand\", function (expandedKeys, expandEvent) {\n      var onExpand = _this.props.onExpand;\n\n      _this.rebuildTreeNodes();\n\n      if (onExpand) {\n        onExpand(expandedKeys, expandEvent);\n      }\n    });\n\n    _this.state = {\n      layerGroup: null,\n      layerGroupRevision: null,\n      treeNodes: [],\n      checkedKeys: [],\n      mapResolution: -1\n    };\n    return _this;\n  }\n  /**\n   * Determines what to do on the initial mount.\n   */\n\n\n  _createClass(LayerTree, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var layerGroup = this.props.layerGroup ? this.props.layerGroup : this.props.map.getLayerGroup();\n      var revision = this.props.layerGroup ? this.props.layerGroup.getRevision() : 0;\n      this.setState({\n        layerGroup: layerGroup,\n        layerGroupRevision: revision\n      }, function () {\n        _this2.registerAddRemoveListeners(_this2.state.layerGroup);\n\n        _this2.registerResolutionChangeHandler();\n\n        _this2.rebuildTreeNodes();\n      });\n    }\n    /**\n     * Invoked immediately after updating occurs. This method is not called for\n     * the initial render.\n     *\n     * @param prevProps The previous props.\n     * @param prevState The previous state.\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props = this.props,\n          layerGroup = _this$props.layerGroup,\n          nodeTitleRenderer = _this$props.nodeTitleRenderer;\n\n      if (layerGroup && prevState.layerGroup) {\n        if (!_isEqual(prevState.layerGroup.ol_uid, layerGroup.ol_uid)) {\n          (0, _Observable.unByKey)(this.olListenerKeys);\n          this.olListenerKeys = [];\n          this.registerAddRemoveListeners(layerGroup);\n          this.rebuildTreeNodes();\n        }\n      }\n\n      if (nodeTitleRenderer !== prevProps.nodeTitleRenderer) {\n        this.rebuildTreeNodes();\n      }\n    }\n    /**\n     * Determines what to do when the component is unmounted.\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      (0, _Observable.unByKey)(this.olListenerKeys);\n    }\n    /**\n     * Creates TreeNodes from a given layergroup and sets the treeNodes in the state.\n     *\n     * @param groupLayer A grouplayer.\n     */\n\n  }, {\n    key: \"treeNodesFromLayerGroup\",\n    value: function treeNodesFromLayerGroup(groupLayer) {\n      var _this3 = this;\n\n      var layerArray = groupLayer.getLayers().getArray().filter(this.props.filterFunction);\n      var treeNodes = layerArray.map(function (layer) {\n        return _this3.treeNodeFromLayer(layer);\n      });\n      treeNodes.reverse();\n      this.setState({\n        treeNodes: treeNodes\n      });\n    }\n    /**\n     * Registers the add/remove listeners recursively for all ol.layer.Group.\n     *\n     * @param groupLayer A ol.layer.Group\n     */\n\n  }, {\n    key: \"registerAddRemoveListeners\",\n    value: function registerAddRemoveListeners(groupLayer) {\n      var _this4 = this;\n\n      var collection = groupLayer.getLayers();\n      var addEvtKey = collection.on('add', this.onCollectionAdd);\n      var removeEvtKey = collection.on('remove', this.onCollectionRemove);\n      var changeEvtKey = groupLayer.on('change:layers', this.onChangeLayers);\n      this.olListenerKeys.push(addEvtKey, removeEvtKey, changeEvtKey);\n      collection.forEach(function (layer) {\n        if (layer instanceof _Group[\"default\"]) {\n          _this4.registerAddRemoveListeners(layer);\n        }\n      });\n    }\n    /**\n     * Registers an eventhandler on the `ol.View`, which will rebuild the tree\n     * nodes whenever the view's resolution changes.\n     */\n\n  }, {\n    key: \"registerResolutionChangeHandler\",\n    value: function registerResolutionChangeHandler() {\n      var map = this.props.map;\n      var evtKey = map.on('moveend', this.rebuildTreeNodes.bind(this));\n      this.olListenerKeys.push(evtKey); // TODO when and how to we unbind?\n    }\n    /**\n     * Listens to the collections add event of a collection.\n     * Registers add/remove listeners if element is a collection and rebuilds the\n     * treeNodes.\n     *\n     * @param evt The add event.\n     */\n\n  }, {\n    key: \"getTreeNodeTitle\",\n\n    /**\n     * Returns the title to render in the LayerTreeNode. If a nodeTitleRenderer\n     * has been passed as prop, it will be called and the (custom) return value\n     * will be rendered. Note: This can be any renderable element collection! If\n     * no function is given (the default) the layer name will be passed.\n     *\n     * @param layer The layer attached to the tree node.\n     * @return The title composition to render.\n     */\n    value: function getTreeNodeTitle(layer) {\n      if (_isFunction(this.props.nodeTitleRenderer)) {\n        return this.props.nodeTitleRenderer.call(this, layer);\n      } else {\n        return layer.get('name');\n      }\n    }\n    /**\n     * Creates a treeNode from a given layer.\n     *\n     * @param layer The given layer.\n     * @return The corresponding LayerTreeNode Element.\n     */\n\n  }, {\n    key: \"treeNodeFromLayer\",\n    value: function treeNodeFromLayer(layer) {\n      var _this5 = this;\n\n      var childNodes;\n\n      if (layer instanceof _Group[\"default\"]) {\n        if (!layer.getVisible()) {\n          _Logger[\"default\"].warn('Your map configuration contains layerGroups that are' + 'invisible. This might lead to buggy behaviour.');\n        }\n\n        var childLayers = layer.getLayers().getArray().filter(this.props.filterFunction);\n        childNodes = childLayers.map(function (childLayer) {\n          return _this5.treeNodeFromLayer(childLayer);\n        });\n        childNodes.reverse();\n      } else {\n        if (!this.hasListener(layer, 'change:visible', this.onLayerChangeVisible)) {\n          var eventKey = layer.on('change:visible', this.onLayerChangeVisible);\n          this.olListenerKeys.push(eventKey);\n        }\n      }\n\n      return React.createElement(_LayerTreeNode[\"default\"], {\n        title: this.getTreeNodeTitle(layer),\n        key: layer.ol_uid.toString(),\n        inResolutionRange: _MapUtil[\"default\"].layerInResolutionRange(layer, this.props.map)\n      }, childNodes);\n    }\n    /**\n     * Determines if the target has already registered the given listener for the\n     * given eventtype.\n     *\n     * @param target The event target.\n     * @param type The events type (name).\n     * @param listener The function.\n     * @return True if the listener is already contained in this.olListenerKeys.\n     */\n\n  }, {\n    key: \"onCheck\",\n\n    /**\n     * Sets the visibility of a layer due to its checked state.\n     *\n     * @param checkedKeys Contains all checkedKeys.\n     * @param checked The ant-tree event object for this event. See ant docs.\n     */\n    value: function onCheck(checkedKeys, e) {\n      var checked = e.checked;\n      var eventKey = e.node.props.eventKey;\n\n      var layer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, eventKey);\n\n      this.setLayerVisibility(layer, checked);\n    }\n    /**\n     * Sets the layer visibility. Calls itself recursively for groupLayers.\n     *\n     * @param layer The layer.\n     * @param visibility The visibility.\n     */\n\n  }, {\n    key: \"setLayerVisibility\",\n    value: function setLayerVisibility(layer, visibility) {\n      var _this6 = this;\n\n      if (!(layer instanceof _Base[\"default\"]) || !_isBoolean(visibility)) {\n        _Logger[\"default\"].error('setLayerVisibility called without layer or visiblity.');\n\n        return;\n      }\n\n      if (layer instanceof _Group[\"default\"]) {\n        layer.getLayers().forEach(function (subLayer) {\n          _this6.setLayerVisibility(subLayer, visibility);\n        });\n      } else {\n        layer.setVisible(visibility);\n      }\n    }\n    /**\n     * The callback method for the drop event. Layers will get reordered in the map\n     * and the tree.\n     *\n     * @param e The ant-tree event object for this event. See ant docs.\n     */\n\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(e) {\n      var dragLayer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, e.dragNode.props.eventKey);\n\n      var dragInfo = _MapUtil[\"default\"].getLayerPositionInfo(dragLayer, this.props.map);\n\n      var dragCollection = dragInfo.groupLayer.getLayers();\n\n      var dropLayer = _MapUtil[\"default\"].getLayerByOlUid(this.props.map, e.node.props.eventKey);\n\n      var dropPos = e.node.props.pos.split('-');\n      var location = e.dropPosition - Number(dropPos[dropPos.length - 1]);\n      dragCollection.remove(dragLayer);\n\n      var dropInfo = _MapUtil[\"default\"].getLayerPositionInfo(dropLayer, this.props.map);\n\n      var dropPosition = dropInfo.position;\n      var dropCollection = dropInfo.groupLayer.getLayers(); // drop before node\n\n      if (location === -1) {\n        if (dropPosition === dropCollection.getLength() - 1) {\n          dropCollection.push(dragLayer);\n        } else {\n          dropCollection.insertAt(dropPosition + 1, dragLayer);\n        } // drop on node\n\n      } else if (location === 0) {\n        if (dropLayer instanceof _Group[\"default\"]) {\n          dropLayer.getLayers().push(dragLayer);\n        } else {\n          dropCollection.insertAt(dropPosition + 1, dragLayer);\n        } // drop after node\n\n      } else if (location === 1) {\n        dropCollection.insertAt(dropPosition, dragLayer);\n      }\n\n      this.rebuildTreeNodes();\n    }\n    /**\n     * Call rebuildTreeNodes onExpand to avoid sync issues.\n     *\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * The render function.\n     */\n    value: function render() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          layerGroup = _this$props2.layerGroup,\n          map = _this$props2.map,\n          nodeTitleRenderer = _this$props2.nodeTitleRenderer,\n          passThroughProps = _objectWithoutProperties(_this$props2, [\"className\", \"layerGroup\", \"map\", \"nodeTitleRenderer\"]);\n\n      var ddListeners;\n\n      if (passThroughProps.draggable) {\n        ddListeners = {\n          onDrop: this.onDrop.bind(this)\n        };\n      }\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      return React.createElement(_tree[\"default\"], _extends({\n        className: finalClassName,\n        checkedKeys: this.state.checkedKeys,\n        onCheck: this.onCheck.bind(this)\n      }, ddListeners, passThroughProps, {\n        onExpand: this.onExpand\n      }), this.state.treeNodes);\n    }\n  }]);\n\n  return LayerTree;\n}(React.Component);\n\n_defineProperty(LayerTree, \"defaultProps\", {\n  draggable: true,\n  checkable: true,\n  filterFunction: function filterFunction() {\n    return true;\n  }\n});\n\nvar _default = LayerTree;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}