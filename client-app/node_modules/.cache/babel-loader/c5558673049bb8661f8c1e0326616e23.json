{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { RowComp } from \"./rowComp\";\nimport { Column } from \"../entities/column\";\nimport { Events } from \"../events\";\nimport { Constants } from \"../constants\";\nimport { CellComp } from \"./cellComp\";\nimport { Autowired, Bean, Optional, Qualifier } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { _ } from \"../utils\";\n\nvar RowRenderer =\n/** @class */\nfunction (_super) {\n  __extends(RowRenderer, _super);\n\n  function RowRenderer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.destroyFuncsForColumnListeners = []; // map of row ids to row objects. keeps track of which elements\n    // are rendered for which rows in the dom.\n\n    _this.rowCompsByIndex = {};\n    _this.floatingTopRowComps = [];\n    _this.floatingBottomRowComps = []; // we only allow one refresh at a time, otherwise the internal memory structure here\n    // will get messed up. this can happen if the user has a cellRenderer, and inside the\n    // renderer they call an API method that results in another pass of the refresh,\n    // then it will be trying to draw rows in the middle of a refresh.\n\n    _this.refreshInProgress = false;\n    return _this;\n  }\n\n  RowRenderer.prototype.registerGridCore = function (gridCore) {\n    this.gridCore = gridCore;\n  };\n\n  RowRenderer.prototype.getGridCore = function () {\n    return this.gridCore;\n  };\n\n  RowRenderer.prototype.agWire = function (loggerFactory) {\n    this.logger = loggerFactory.create(\"RowRenderer\");\n  };\n\n  RowRenderer.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n    this.rowContainers = this.gridPanel.getRowContainers();\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));\n    this.addDestroyableEventListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));\n    this.registerCellEventListeners();\n    this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n    this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();\n    this.redrawAfterModelUpdate();\n  }; // in a clean design, each cell would register for each of these events. however when scrolling, all the cells\n  // registering and de-registering for events is a performance bottleneck. so we register here once and inform\n  // all active cells.\n\n\n  RowRenderer.prototype.registerCellEventListeners = function () {\n    var _this = this;\n\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_CELL_FOCUSED, function (event) {\n      _this.forEachCellComp(function (cellComp) {\n        return cellComp.onCellFocused(event);\n      });\n    });\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_FLASH_CELLS, function (event) {\n      _this.forEachCellComp(function (cellComp) {\n        return cellComp.onFlashCells(event);\n      });\n    });\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, function () {\n      _this.forEachCellComp(function (cellComp) {\n        return cellComp.onColumnHover();\n      });\n    }); // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,\n    // then changing the width of the containers will impact left position. eg the center cols all have their\n    // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,\n    // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are\n    // in different containers so doesn't impact.\n\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function () {\n      if (_this.printLayout) {\n        _this.forEachCellComp(function (cellComp) {\n          return cellComp.onLeftChanged();\n        });\n      }\n    });\n    var rangeSelectionEnabled = this.gridOptionsWrapper.isEnableRangeSelection();\n\n    if (rangeSelectionEnabled) {\n      this.addDestroyableEventListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function () {\n        _this.forEachCellComp(function (cellComp) {\n          return cellComp.onRangeSelectionChanged();\n        });\n      });\n      this.addDestroyableEventListener(this.eventService, Events.EVENT_COLUMN_MOVED, function () {\n        _this.forEachCellComp(function (cellComp) {\n          return cellComp.updateRangeBordersIfRangeCount();\n        });\n      });\n      this.addDestroyableEventListener(this.eventService, Events.EVENT_COLUMN_PINNED, function () {\n        _this.forEachCellComp(function (cellComp) {\n          return cellComp.updateRangeBordersIfRangeCount();\n        });\n      });\n      this.addDestroyableEventListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function () {\n        _this.forEachCellComp(function (cellComp) {\n          return cellComp.updateRangeBordersIfRangeCount();\n        });\n      });\n    } // add listeners to the grid columns\n\n\n    this.refreshListenersToColumnsForCellComps(); // if the grid columns change, then refresh the listeners again\n\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));\n    this.addDestroyFunc(this.removeGridColumnListeners.bind(this));\n  }; // executes all functions in destroyFuncsForColumnListeners and then clears the list\n\n\n  RowRenderer.prototype.removeGridColumnListeners = function () {\n    this.destroyFuncsForColumnListeners.forEach(function (func) {\n      return func();\n    });\n    this.destroyFuncsForColumnListeners.length = 0;\n  }; // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.\n  // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to\n  // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here\n  // once instead.\n\n\n  RowRenderer.prototype.refreshListenersToColumnsForCellComps = function () {\n    var _this = this;\n\n    this.removeGridColumnListeners();\n    var cols = this.columnController.getAllGridColumns();\n\n    if (!cols) {\n      return;\n    }\n\n    cols.forEach(function (col) {\n      var forEachCellWithThisCol = function (callback) {\n        _this.forEachCellComp(function (cellComp) {\n          if (cellComp.getColumn() === col) {\n            callback(cellComp);\n          }\n        });\n      };\n\n      var leftChangedListener = function () {\n        forEachCellWithThisCol(function (cellComp) {\n          return cellComp.onLeftChanged();\n        });\n      };\n\n      var widthChangedListener = function () {\n        forEachCellWithThisCol(function (cellComp) {\n          return cellComp.onWidthChanged();\n        });\n      };\n\n      var firstRightPinnedChangedListener = function () {\n        forEachCellWithThisCol(function (cellComp) {\n          return cellComp.onFirstRightPinnedChanged();\n        });\n      };\n\n      var lastLeftPinnedChangedListener = function () {\n        forEachCellWithThisCol(function (cellComp) {\n          return cellComp.onLastLeftPinnedChanged();\n        });\n      };\n\n      col.addEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);\n      col.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n      col.addEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);\n      col.addEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);\n\n      _this.destroyFuncsForColumnListeners.push(function () {\n        col.removeEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);\n        col.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n        col.removeEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);\n        col.removeEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);\n      });\n    });\n  };\n\n  RowRenderer.prototype.onDomLayoutChanged = function () {\n    var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n    var embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows(); // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid\n    // out using absolute positioning when doing print layout\n\n    var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;\n    this.printLayout = printLayout;\n    this.embedFullWidthRows = embedFullWidthRows;\n\n    if (destroyRows) {\n      this.redrawAfterModelUpdate();\n    }\n  }; // for row models that have datasources, when we update the datasource, we need to force the rowRenderer\n  // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.\n\n\n  RowRenderer.prototype.datasourceChanged = function () {\n    this.firstRenderedRow = 0;\n    this.lastRenderedRow = -1;\n    var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);\n    this.removeRowComps(rowIndexesToRemove);\n  };\n\n  RowRenderer.prototype.onPageLoaded = function (refreshEvent) {\n    if (_.missing(refreshEvent)) {\n      refreshEvent = {\n        type: Events.EVENT_MODEL_UPDATED,\n        api: this.gridApi,\n        columnApi: this.columnApi,\n        animate: false,\n        keepRenderedRows: false,\n        newData: false,\n        newPage: false\n      };\n    }\n\n    this.onModelUpdated(refreshEvent);\n  };\n\n  RowRenderer.prototype.getAllCellsForColumn = function (column) {\n    var eCells = [];\n\n    _.iterateObject(this.rowCompsByIndex, callback);\n\n    _.iterateObject(this.floatingBottomRowComps, callback);\n\n    _.iterateObject(this.floatingTopRowComps, callback);\n\n    function callback(key, rowComp) {\n      var eCell = rowComp.getCellForCol(column);\n\n      if (eCell) {\n        eCells.push(eCell);\n      }\n    }\n\n    return eCells;\n  };\n\n  RowRenderer.prototype.refreshFloatingRowComps = function () {\n    this.refreshFloatingRows(this.floatingTopRowComps, this.pinnedRowModel.getPinnedTopRowData(), this.rowContainers.floatingTopPinnedLeft, this.rowContainers.floatingTopPinnedRight, this.rowContainers.floatingTop, this.rowContainers.floatingTopFullWidth);\n    this.refreshFloatingRows(this.floatingBottomRowComps, this.pinnedRowModel.getPinnedBottomRowData(), this.rowContainers.floatingBottomPinnedLeft, this.rowContainers.floatingBottomPinnedRight, this.rowContainers.floatingBottom, this.rowContainers.floatingBottomFullWith);\n  };\n\n  RowRenderer.prototype.refreshFloatingRows = function (rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp) {\n    var _this = this;\n\n    rowComps.forEach(function (row) {\n      row.destroy();\n    });\n    rowComps.length = 0;\n\n    if (rowNodes) {\n      rowNodes.forEach(function (node) {\n        var rowComp = new RowComp(_this.$scope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, node, _this.beans, false, false, _this.printLayout, _this.embedFullWidthRows);\n        rowComp.init();\n        rowComps.push(rowComp);\n      });\n    }\n\n    this.flushContainers(rowComps);\n  };\n\n  RowRenderer.prototype.onPinnedRowDataChanged = function () {\n    // recycling rows in order to ensure cell editing is not cancelled\n    var params = {\n      recycleRows: true\n    };\n    this.redrawAfterModelUpdate(params);\n  };\n\n  RowRenderer.prototype.onModelUpdated = function (refreshEvent) {\n    var params = {\n      recycleRows: refreshEvent.keepRenderedRows,\n      animate: refreshEvent.animate,\n      newData: refreshEvent.newData,\n      newPage: refreshEvent.newPage,\n      // because this is a model updated event (not pinned rows), we\n      // can skip updating the pinned rows. this is needed so that if user\n      // is doing transaction updates, the pinned rows are not getting constantly\n      // trashed - or editing cells in pinned rows are not refreshed and put into read mode\n      onlyBody: true\n    };\n    this.redrawAfterModelUpdate(params);\n  }; // if the row nodes are not rendered, no index is returned\n\n\n  RowRenderer.prototype.getRenderedIndexesForRowNodes = function (rowNodes) {\n    var result = [];\n\n    if (_.missing(rowNodes)) {\n      return result;\n    }\n\n    _.iterateObject(this.rowCompsByIndex, function (index, renderedRow) {\n      var rowNode = renderedRow.getRowNode();\n\n      if (rowNodes.indexOf(rowNode) >= 0) {\n        result.push(index);\n      }\n    });\n\n    return result;\n  };\n\n  RowRenderer.prototype.redrawRows = function (rowNodes) {\n    if (!rowNodes || rowNodes.length == 0) {\n      return;\n    } // we only need to be worried about rendered rows, as this method is\n    // called to what's rendered. if the row isn't rendered, we don't care\n\n\n    var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes); // remove the rows\n\n    this.removeRowComps(indexesToRemove); // add draw them again\n\n    this.redrawAfterModelUpdate({\n      recycleRows: true\n    });\n  };\n\n  RowRenderer.prototype.getCellToRestoreFocusToAfterRefresh = function (params) {\n    var focusedCell = params.suppressKeepFocus ? null : this.focusedCellController.getFocusCellToUseAfterRefresh();\n\n    if (_.missing(focusedCell)) {\n      return null;\n    } // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this\n    // solves is with editing - if the user is editing, eg focus is on a text field, and not on the\n    // cell itself, then the cell can be registered as having focus, however it's the text field that\n    // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus\n    // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,\n    // the focus is lost from the text field. we do not want this.\n\n\n    var activeElement = document.activeElement;\n    var domData = this.gridOptionsWrapper.getDomData(activeElement, CellComp.DOM_DATA_KEY_CELL_COMP);\n\n    var elementIsNotACellDev = _.missing(domData);\n\n    if (elementIsNotACellDev) {\n      return null;\n    }\n\n    return focusedCell;\n  }; // gets called after changes to the model.\n\n\n  RowRenderer.prototype.redrawAfterModelUpdate = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    this.getLockOnRefresh();\n    var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);\n    this.sizeContainerToPageHeight();\n    this.scrollToTopIfNewData(params); // never recycle rows when print layout, we draw each row again from scratch. this is because print layout\n    // uses normal dom layout to put cells into dom - it doesn't allow reordering rows.\n\n    var recycleRows = !this.printLayout && params.recycleRows;\n    var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();\n    var rowsToRecycle = this.binRowComps(recycleRows);\n    this.redraw(rowsToRecycle, animate);\n\n    if (!params.onlyBody) {\n      this.refreshFloatingRowComps();\n    }\n\n    this.restoreFocusedCell(focusedCell);\n    this.releaseLockOnRefresh();\n  };\n\n  RowRenderer.prototype.scrollToTopIfNewData = function (params) {\n    var scrollToTop = params.newData || params.newPage;\n    var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();\n\n    if (scrollToTop && !suppressScrollToTop) {\n      this.gridPanel.scrollToTop();\n    }\n  };\n\n  RowRenderer.prototype.sizeContainerToPageHeight = function () {\n    var containers = [this.rowContainers.body, this.rowContainers.fullWidth, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight];\n\n    if (this.printLayout) {\n      containers.forEach(function (container) {\n        return container.setHeight(null);\n      });\n      return;\n    }\n\n    var containerHeight = this.paginationProxy.getCurrentPageHeight(); // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,\n    // we still want the scroll to be present, otherwise there would be no way to scroll the header\n    // which might be needed us user wants to access columns\n    // on the RHS - and if that was where the filter was that cause no rows to be presented, there\n    // is no way to remove the filter.\n\n    if (containerHeight === 0) {\n      containerHeight = 1;\n    }\n\n    this.maxDivHeightScaler.setModelHeight(containerHeight);\n    var realHeight = this.maxDivHeightScaler.getUiContainerHeight();\n    containers.forEach(function (container) {\n      return container.setHeight(realHeight);\n    });\n  };\n\n  RowRenderer.prototype.getLockOnRefresh = function () {\n    if (this.refreshInProgress) {\n      throw new Error(\"ag-Grid: cannot get grid to draw rows when it is in the middle of drawing rows. \" + \"Your code probably called a grid API method while the grid was in the render stage. To overcome \" + \"this, put the API call into a timeout, eg instead of api.refreshView(), \" + \"call setTimeout(function(){api.refreshView(),0}). To see what part of your code \" + \"that caused the refresh check this stacktrace.\");\n    }\n\n    this.refreshInProgress = true;\n  };\n\n  RowRenderer.prototype.releaseLockOnRefresh = function () {\n    this.refreshInProgress = false;\n  }; // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without\n  // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits\n  // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the\n  // edited cell).\n\n\n  RowRenderer.prototype.restoreFocusedCell = function (cellPosition) {\n    if (cellPosition) {\n      this.focusedCellController.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);\n    }\n  };\n\n  RowRenderer.prototype.stopEditing = function (cancel) {\n    if (cancel === void 0) {\n      cancel = false;\n    }\n\n    this.forEachRowComp(function (key, rowComp) {\n      rowComp.stopEditing(cancel);\n    });\n  };\n\n  RowRenderer.prototype.forEachCellComp = function (callback) {\n    this.forEachRowComp(function (key, rowComp) {\n      return rowComp.forEachCellComp(callback);\n    });\n  };\n\n  RowRenderer.prototype.forEachRowComp = function (callback) {\n    _.iterateObject(this.rowCompsByIndex, callback);\n\n    _.iterateObject(this.floatingTopRowComps, callback);\n\n    _.iterateObject(this.floatingBottomRowComps, callback);\n  };\n\n  RowRenderer.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {\n    var rowComp = this.rowCompsByIndex[rowIndex];\n\n    if (rowComp) {\n      rowComp.addEventListener(eventName, callback);\n    }\n  };\n\n  RowRenderer.prototype.flashCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {\n      return cellComp.flashCell();\n    });\n  };\n\n  RowRenderer.prototype.refreshCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    var refreshCellParams = {\n      forceRefresh: params.force,\n      newData: false\n    };\n    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {\n      return cellComp.refreshCell(refreshCellParams);\n    });\n  };\n\n  RowRenderer.prototype.getCellRendererInstances = function (params) {\n    var res = [];\n    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {\n      var cellRenderer = cellComp.getCellRenderer();\n\n      if (cellRenderer) {\n        res.push(cellRenderer);\n      }\n    });\n    return res;\n  };\n\n  RowRenderer.prototype.getCellEditorInstances = function (params) {\n    var res = [];\n    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {\n      var cellEditor = cellComp.getCellEditor();\n\n      if (cellEditor) {\n        res.push(cellEditor);\n      }\n    });\n    return res;\n  };\n\n  RowRenderer.prototype.getEditingCells = function () {\n    var res = [];\n    this.forEachCellComp(function (cellComp) {\n      if (cellComp.isEditing()) {\n        var cellPosition = cellComp.getCellPosition();\n        res.push(cellPosition);\n      }\n    });\n    return res;\n  }; // calls the callback for each cellComp that match the provided rowNodes and columns. eg if one row node\n  // and two columns provided, that identifies 4 cells, so callback gets called 4 times, once for each cell.\n\n\n  RowRenderer.prototype.forEachCellCompFiltered = function (rowNodes, columns, callback) {\n    var _this = this;\n\n    var rowIdsMap;\n\n    if (_.exists(rowNodes)) {\n      rowIdsMap = {\n        top: {},\n        bottom: {},\n        normal: {}\n      };\n      rowNodes.forEach(function (rowNode) {\n        if (rowNode.rowPinned === Constants.PINNED_TOP) {\n          rowIdsMap.top[rowNode.id] = true;\n        } else if (rowNode.rowPinned === Constants.PINNED_BOTTOM) {\n          rowIdsMap.bottom[rowNode.id] = true;\n        } else {\n          rowIdsMap.normal[rowNode.id] = true;\n        }\n      });\n    }\n\n    var colIdsMap;\n\n    if (_.exists(columns)) {\n      colIdsMap = {};\n      columns.forEach(function (colKey) {\n        var column = _this.columnController.getGridColumn(colKey);\n\n        if (_.exists(column)) {\n          colIdsMap[column.getId()] = true;\n        }\n      });\n    }\n\n    var processRow = function (rowComp) {\n      var rowNode = rowComp.getRowNode();\n      var id = rowNode.id;\n      var floating = rowNode.rowPinned; // skip this row if it is missing from the provided list\n\n      if (_.exists(rowIdsMap)) {\n        if (floating === Constants.PINNED_BOTTOM) {\n          if (!rowIdsMap.bottom[id]) {\n            return;\n          }\n        } else if (floating === Constants.PINNED_TOP) {\n          if (!rowIdsMap.top[id]) {\n            return;\n          }\n        } else {\n          if (!rowIdsMap.normal[id]) {\n            return;\n          }\n        }\n      }\n\n      rowComp.forEachCellComp(function (cellComp) {\n        var colId = cellComp.getColumn().getId();\n        var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];\n\n        if (excludeColFromRefresh) {\n          return;\n        }\n\n        callback(cellComp);\n      });\n    };\n\n    _.iterateObject(this.rowCompsByIndex, function (index, rowComp) {\n      processRow(rowComp);\n    });\n\n    if (this.floatingTopRowComps) {\n      this.floatingTopRowComps.forEach(processRow);\n    }\n\n    if (this.floatingBottomRowComps) {\n      this.floatingBottomRowComps.forEach(processRow);\n    }\n  };\n\n  RowRenderer.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);\n    this.removeRowComps(rowIndexesToRemove);\n  };\n\n  RowRenderer.prototype.binRowComps = function (recycleRows) {\n    var _this = this;\n\n    var indexesToRemove;\n    var rowsToRecycle = {};\n\n    if (recycleRows) {\n      indexesToRemove = [];\n\n      _.iterateObject(this.rowCompsByIndex, function (index, rowComp) {\n        var rowNode = rowComp.getRowNode();\n\n        if (_.exists(rowNode.id)) {\n          rowsToRecycle[rowNode.id] = rowComp;\n          delete _this.rowCompsByIndex[index];\n        } else {\n          indexesToRemove.push(index);\n        }\n      });\n    } else {\n      indexesToRemove = Object.keys(this.rowCompsByIndex);\n    }\n\n    this.removeRowComps(indexesToRemove);\n    return rowsToRecycle;\n  }; // takes array of row indexes\n\n\n  RowRenderer.prototype.removeRowComps = function (rowsToRemove) {\n    var _this = this; // if no fromIndex then set to -1, which will refresh everything\n    // let realFromIndex = -1;\n\n\n    rowsToRemove.forEach(function (indexToRemove) {\n      var renderedRow = _this.rowCompsByIndex[indexToRemove];\n      renderedRow.destroy();\n      delete _this.rowCompsByIndex[indexToRemove];\n    });\n  }; // gets called when rows don't change, but viewport does, so after:\n  // 1) height of grid body changes, ie number of displayed rows has changed\n  // 2) grid scrolled to new position\n  // 3) ensure index visible (which is a scroll)\n\n\n  RowRenderer.prototype.redrawAfterScroll = function () {\n    this.getLockOnRefresh();\n    this.redraw(null, false, true);\n    this.releaseLockOnRefresh();\n  };\n\n  RowRenderer.prototype.removeRowCompsNotToDraw = function (indexesToDraw) {\n    // for speedy lookup, dump into map\n    var indexesToDrawMap = {};\n    indexesToDraw.forEach(function (index) {\n      return indexesToDrawMap[index] = true;\n    });\n    var existingIndexes = Object.keys(this.rowCompsByIndex);\n    var indexesNotToDraw = existingIndexes.filter(function (index) {\n      return !indexesToDrawMap[index];\n    });\n    this.removeRowComps(indexesNotToDraw);\n  };\n\n  RowRenderer.prototype.calculateIndexesToDraw = function () {\n    var _this = this; // all in all indexes in the viewport\n\n\n    var indexesToDraw = _.createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow); // add in indexes of rows we want to keep, because they are currently editing\n\n\n    _.iterateObject(this.rowCompsByIndex, function (indexStr, rowComp) {\n      var index = Number(indexStr);\n\n      if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {\n        if (_this.doNotUnVirtualiseRow(rowComp)) {\n          indexesToDraw.push(index);\n        }\n      }\n    });\n\n    indexesToDraw.sort(function (a, b) {\n      return a - b;\n    });\n    return indexesToDraw;\n  };\n\n  RowRenderer.prototype.redraw = function (rowsToRecycle, animate, afterScroll) {\n    var _this = this;\n\n    if (animate === void 0) {\n      animate = false;\n    }\n\n    if (afterScroll === void 0) {\n      afterScroll = false;\n    }\n\n    this.maxDivHeightScaler.updateOffset();\n    this.workOutFirstAndLastRowsToRender(); // the row can already exist and be in the following:\n    // rowsToRecycle -> if model change, then the index may be different, however row may\n    //                         exist here from previous time (mapped by id).\n    // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport\n    // this is all the indexes we want, including those that already exist, so this method\n    // will end up going through each index and drawing only if the row doesn't already exist\n\n    var indexesToDraw = this.calculateIndexesToDraw();\n    this.removeRowCompsNotToDraw(indexesToDraw); // never animate when doing print layout - as we want to get things ready to print as quickly as possible,\n    // otherwise we risk the printer printing a row that's half faded (half way through fading in)\n\n    if (this.printLayout) {\n      animate = false;\n    } // add in new rows\n\n\n    var nextVmTurnFunctions = [];\n    var rowComps = [];\n    indexesToDraw.forEach(function (rowIndex) {\n      var rowComp = _this.createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);\n\n      if (_.exists(rowComp)) {\n        rowComps.push(rowComp);\n\n        _.pushAll(nextVmTurnFunctions, rowComp.getAndClearNextVMTurnFunctions());\n      }\n    });\n    this.flushContainers(rowComps);\n\n    _.executeNextVMTurn(nextVmTurnFunctions);\n\n    var useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;\n\n    if (useAnimationFrame) {\n      this.beans.taskQueue.addDestroyTask(this.destroyRowComps.bind(this, rowsToRecycle, animate));\n    } else {\n      this.destroyRowComps(rowsToRecycle, animate);\n    }\n\n    this.checkAngularCompile();\n    this.gridPanel.updateRowCount();\n  };\n\n  RowRenderer.prototype.flushContainers = function (rowComps) {\n    _.iterateObject(this.rowContainers, function (key, rowContainerComp) {\n      if (rowContainerComp) {\n        rowContainerComp.flushRowTemplates();\n      }\n    });\n\n    rowComps.forEach(function (rowComp) {\n      return rowComp.afterFlush();\n    });\n  };\n\n  RowRenderer.prototype.onDisplayedColumnsChanged = function () {\n    var pinningLeft = this.columnController.isPinningLeft();\n    var pinningRight = this.columnController.isPinningRight();\n    var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;\n\n    if (atLeastOneChanged) {\n      this.pinningLeft = pinningLeft;\n      this.pinningRight = pinningRight;\n\n      if (this.embedFullWidthRows) {\n        this.redrawFullWidthEmbeddedRows();\n      }\n    }\n  }; // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,\n  // then it should go into the pinned left area if pinning left, or the center area if not pinning.\n\n\n  RowRenderer.prototype.redrawFullWidthEmbeddedRows = function () {\n    // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when\n    // embedded, as what appears in each section depends on whether we are pinned or not\n    var rowsToRemove = [];\n\n    _.iterateObject(this.rowCompsByIndex, function (id, rowComp) {\n      if (rowComp.isFullWidth()) {\n        var rowIndex = rowComp.getRowNode().rowIndex;\n        rowsToRemove.push(rowIndex.toString());\n      }\n    });\n\n    this.refreshFloatingRowComps();\n    this.removeRowComps(rowsToRemove);\n    this.redrawAfterScroll();\n  };\n\n  RowRenderer.prototype.refreshFullWidthRows = function () {\n    var rowsToRemove = [];\n\n    _.iterateObject(this.rowCompsByIndex, function (id, rowComp) {\n      if (rowComp.isFullWidth()) {\n        var fullWidthRowsRefreshed = rowComp.refreshFullWidth();\n\n        if (!fullWidthRowsRefreshed) {\n          var rowIndex = rowComp.getRowNode().rowIndex;\n          rowsToRemove.push(rowIndex.toString());\n        }\n      }\n    });\n\n    this.removeRowComps(rowsToRemove);\n    this.redrawAfterScroll();\n  };\n\n  RowRenderer.prototype.createOrUpdateRowComp = function (rowIndex, rowsToRecycle, animate, afterScroll) {\n    var rowNode;\n    var rowComp = this.rowCompsByIndex[rowIndex]; // if no row comp, see if we can get it from the previous rowComps\n\n    if (!rowComp) {\n      rowNode = this.paginationProxy.getRow(rowIndex);\n\n      if (_.exists(rowNode) && _.exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {\n        rowComp = rowsToRecycle[rowNode.id];\n        rowsToRecycle[rowNode.id] = null;\n      }\n    }\n\n    var creatingNewRowComp = !rowComp;\n\n    if (creatingNewRowComp) {\n      // create a new one\n      if (!rowNode) {\n        rowNode = this.paginationProxy.getRow(rowIndex);\n      }\n\n      if (_.exists(rowNode)) {\n        rowComp = this.createRowComp(rowNode, animate, afterScroll);\n      } else {\n        // this should never happen - if somehow we are trying to create\n        // a row for a rowNode that does not exist.\n        return;\n      }\n    } else {\n      // ensure row comp is in right position in DOM\n      rowComp.ensureDomOrder();\n    }\n\n    if (rowNode) {\n      // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures\n      // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.\n      rowNode.alreadyRendered = true;\n    }\n\n    this.rowCompsByIndex[rowIndex] = rowComp;\n    return rowComp;\n  };\n\n  RowRenderer.prototype.destroyRowComps = function (rowCompsMap, animate) {\n    var delayedFuncs = [];\n\n    _.iterateObject(rowCompsMap, function (nodeId, rowComp) {\n      // if row was used, then it's null\n      if (!rowComp) {\n        return;\n      }\n\n      rowComp.destroy(animate);\n\n      _.pushAll(delayedFuncs, rowComp.getAndClearDelayedDestroyFunctions());\n    });\n\n    _.executeInAWhile(delayedFuncs);\n  };\n\n  RowRenderer.prototype.checkAngularCompile = function () {\n    var _this = this; // if we are doing angular compiling, then do digest the scope here\n\n\n    if (this.gridOptionsWrapper.isAngularCompileRows()) {\n      // we do it in a timeout, in case we are already in an apply\n      window.setTimeout(function () {\n        _this.$scope.$apply();\n      }, 0);\n    }\n  };\n\n  RowRenderer.prototype.workOutFirstAndLastRowsToRender = function () {\n    var _this = this;\n\n    var newFirst;\n    var newLast;\n\n    if (!this.paginationProxy.isRowsToRender()) {\n      newFirst = 0;\n      newLast = -1; // setting to -1 means nothing in range\n    } else if (this.printLayout) {\n      newFirst = this.paginationProxy.getPageFirstRow();\n      newLast = this.paginationProxy.getPageLastRow();\n    } else {\n      var paginationOffset = this.paginationProxy.getPixelOffset();\n      var maxDivHeightScaler = this.maxDivHeightScaler.getOffset();\n      var bodyVRange = this.gridPanel.getVScrollPosition();\n      var bodyTopPixel = bodyVRange.top;\n      var bodyBottomPixel = bodyVRange.bottom;\n      var bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();\n      var firstPixel = bodyTopPixel + paginationOffset + maxDivHeightScaler - bufferPixels;\n      var lastPixel = bodyBottomPixel + paginationOffset + maxDivHeightScaler + bufferPixels;\n      this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);\n      var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);\n      var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);\n      var pageFirstRow = this.paginationProxy.getPageFirstRow();\n      var pageLastRow = this.paginationProxy.getPageLastRow(); // adjust, in case buffer extended actual size\n\n      if (firstRowIndex < pageFirstRow) {\n        firstRowIndex = pageFirstRow;\n      }\n\n      if (lastRowIndex > pageLastRow) {\n        lastRowIndex = pageLastRow;\n      }\n\n      newFirst = firstRowIndex;\n      newLast = lastRowIndex;\n    } // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up\n    // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of\n    // killing the browser, we limit the number of rows. just in case some use case we didn't think\n    // of, we also have a property to not do this operation.\n\n\n    var rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n    var suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();\n    var rowBufferMaxSize = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);\n\n    if (rowLayoutNormal && !suppressRowCountRestriction) {\n      if (newLast - newFirst > rowBufferMaxSize) {\n        newLast = newFirst + rowBufferMaxSize;\n      }\n    }\n\n    var firstDiffers = newFirst !== this.firstRenderedRow;\n    var lastDiffers = newLast !== this.lastRenderedRow;\n\n    if (firstDiffers || lastDiffers) {\n      this.firstRenderedRow = newFirst;\n      this.lastRenderedRow = newLast;\n      var event_1 = {\n        type: Events.EVENT_VIEWPORT_CHANGED,\n        firstRow: newFirst,\n        lastRow: newLast,\n        api: this.gridApi,\n        columnApi: this.columnApi\n      };\n      this.eventService.dispatchEvent(event_1);\n    } // only dispatch firstDataRendered if we have actually rendered some data\n\n\n    if (this.paginationProxy.isRowsToRender()) {\n      var event_2 = {\n        type: Events.EVENT_FIRST_DATA_RENDERED,\n        firstRow: newFirst,\n        lastRow: newLast,\n        api: this.gridApi,\n        columnApi: this.columnApi\n      }; // added a small delay here because in some scenarios this can be fired\n      // before the grid is actually rendered, causing component creation\n      // on EVENT_FIRST_DATA_RENDERED to fail.\n\n      window.setTimeout(function () {\n        return _this.eventService.dispatchEventOnce(event_2);\n      }, 50);\n    }\n  };\n\n  RowRenderer.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function (topPixel, bottomPixel) {\n    // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.\n    // all the other row models just hard code so the method just returns back false\n    var rowHeightsChanged = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);\n\n    if (rowHeightsChanged) {\n      // if row heights have changed, we need to resize the containers the rows sit it\n      this.sizeContainerToPageHeight(); // we also need to update heightScaler as this has dependency of row container height\n\n      this.maxDivHeightScaler.updateOffset();\n    }\n  };\n\n  RowRenderer.prototype.getFirstVirtualRenderedRow = function () {\n    return this.firstRenderedRow;\n  };\n\n  RowRenderer.prototype.getLastVirtualRenderedRow = function () {\n    return this.lastRenderedRow;\n  }; // check that none of the rows to remove are editing or focused as:\n  // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,\n  //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered\n  //    the edit is reset - so we want to keep it rendered.\n  // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,\n  //    otherwise the user can range select and drag (with focus cell going out of the viewport)\n  //    and then ctrl+c, nothing will happen if cell is removed from dom.\n  // c) if detail record of master detail, as users complained that the context of detail rows\n  //    was getting lost when detail row out of view. eg user expands to show detail row,\n  //    then manipulates the detail panel (eg sorts the detail grid), then context is lost\n  //    after detail panel is scrolled out of / into view.\n\n\n  RowRenderer.prototype.doNotUnVirtualiseRow = function (rowComp) {\n    var REMOVE_ROW = false;\n    var KEEP_ROW = true;\n    var rowNode = rowComp.getRowNode();\n    var rowHasFocus = this.focusedCellController.isRowNodeFocused(rowNode);\n    var rowIsEditing = rowComp.isEditing();\n    var rowIsDetail = rowNode.detail;\n    var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail; // if we deffo don't want to keep it,\n\n    if (!mightWantToKeepRow) {\n      return REMOVE_ROW;\n    } // editing row, only remove if it is no longer rendered, eg filtered out or new data set.\n    // the reason we want to keep is if user is scrolling up and down, we don't want to loose\n    // the context of the editing in process.\n\n\n    var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);\n    return rowNodePresent ? KEEP_ROW : REMOVE_ROW;\n  };\n\n  RowRenderer.prototype.createRowComp = function (rowNode, animate, afterScroll) {\n    var suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame(); // we don't use animations frames for printing, so the user can put the grid into print mode\n    // and immediately print - otherwise the user would have to wait for the rows to draw in the background\n    // (via the animation frames) which is awkward to do from code.\n    // we only do the animation frames after scrolling, as this is where we want the smooth user experience.\n    // having animation frames for other times makes the grid look 'jumpy'.\n\n    var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;\n    var rowComp = new RowComp(this.$scope, this.rowContainers.body, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight, this.rowContainers.fullWidth, rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout, this.embedFullWidthRows);\n    rowComp.init();\n    return rowComp;\n  };\n\n  RowRenderer.prototype.getRenderedNodes = function () {\n    var renderedRows = this.rowCompsByIndex;\n    return Object.keys(renderedRows).map(function (key) {\n      return renderedRows[key].getRowNode();\n    });\n  }; // we use index for rows, but column object for columns, as the next column (by index) might not\n  // be visible (header grouping) so it's not reliable, so using the column object instead.\n\n\n  RowRenderer.prototype.navigateToNextCell = function (event, key, currentCell, allowUserOverride) {\n    // we keep searching for a next cell until we find one. this is how the group rows get skipped\n    var nextCell = currentCell;\n    var finished = false;\n\n    while (!finished) {\n      // if the current cell is spanning across multiple columns, we need to move\n      // our current position to be the last cell on the right before finding the\n      // the next target.\n      if (this.gridOptionsWrapper.isEnableRtl()) {\n        if (key === Constants.KEY_LEFT) {\n          nextCell = this.getLastCellOfColSpan(nextCell);\n        }\n      } else if (key === Constants.KEY_RIGHT) {\n        nextCell = this.getLastCellOfColSpan(nextCell);\n      }\n\n      nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell); // eg if going down, and nextCell=undefined, means we are gone past the last row\n\n      var hitEdgeOfGrid = _.missing(nextCell);\n\n      if (hitEdgeOfGrid) {\n        finished = true;\n        continue;\n      }\n\n      var rowNode = this.rowPositionUtils.getRowNode(nextCell); // we do not allow focusing on detail rows and full width rows\n\n      if (rowNode.detail || rowNode.isFullWidthCell()) {\n        continue;\n      } // if not a group, then we have a valid row, so quit the search\n\n\n      if (!rowNode.group) {\n        finished = true;\n        continue;\n      } // full width rows cannot be focused, so if it's a group and using full width rows,\n      // we need to skip over the row\n\n\n      var pivotMode = this.columnController.isPivotMode();\n      var usingFullWidthRows = this.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);\n\n      if (!usingFullWidthRows) {\n        finished = true;\n      }\n    } // allow user to override what cell to go to next. when doing normal cell navigation (with keys)\n    // we allow this, however if processing 'enter after edit' we don't allow override\n\n\n    if (allowUserOverride) {\n      var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();\n\n      if (_.exists(userFunc)) {\n        var params = {\n          key: key,\n          previousCellPosition: currentCell,\n          nextCellPosition: nextCell ? nextCell : null,\n          event: event\n        };\n        var userCell = userFunc(params);\n\n        if (_.exists(userCell)) {\n          if (userCell.floating) {\n            _.doOnce(function () {\n              console.warn(\"ag-Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?\");\n            }, 'no floating in userCell');\n\n            userCell.rowPinned = userCell.floating;\n          }\n\n          nextCell = {\n            rowPinned: userCell.rowPinned,\n            rowIndex: userCell.rowIndex,\n            column: userCell.column\n          };\n        } else {\n          nextCell = null;\n        }\n      }\n    } // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid\n\n\n    if (!nextCell) {\n      return;\n    } // in case we have col spanning we get the cellComp and use it to\n    // get the position. This was we always focus the first cell inside\n    // the spanning.\n\n\n    this.ensureCellVisible(nextCell); // ensureCellVisible first, to make sure nextCell is rendered\n\n    var cellComp = this.getComponentForCell(nextCell);\n    nextCell = cellComp.getCellPosition(); // we call this again, as nextCell can be different to it's previous value due to Column Spanning\n    // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the\n    // last column in the group, however now it's the first column in the group). if we didn't do\n    // ensureCellVisible again, then we could only be showing the last portion (last column) of the\n    // merged cells.\n\n    this.ensureCellVisible(nextCell);\n    this.focusedCellController.setFocusedCell(nextCell.rowIndex, nextCell.column, nextCell.rowPinned, true);\n\n    if (this.rangeController) {\n      this.rangeController.setRangeToCell(nextCell);\n    }\n  };\n\n  RowRenderer.prototype.getLastCellOfColSpan = function (cell) {\n    var cellComp = this.getComponentForCell(cell);\n\n    if (!cellComp) {\n      return cell;\n    }\n\n    var colSpanningList = cellComp.getColSpanningList();\n\n    if (colSpanningList.length === 1) {\n      return cell;\n    }\n\n    return {\n      rowIndex: cell.rowIndex,\n      column: _.last(colSpanningList),\n      rowPinned: cell.rowPinned\n    };\n  };\n\n  RowRenderer.prototype.ensureCellVisible = function (gridCell) {\n    // this scrolls the row into view\n    if (_.missing(gridCell.rowPinned)) {\n      this.gridPanel.ensureIndexVisible(gridCell.rowIndex);\n    }\n\n    if (!gridCell.column.isPinned()) {\n      this.gridPanel.ensureColumnVisible(gridCell.column);\n    } // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible\n    // floating cell, the scrolls get out of sync\n\n\n    this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter(); // need to flush frames, to make sure the correct cells are rendered\n\n    this.animationFrameService.flushAllFrames();\n  };\n\n  RowRenderer.prototype.startEditingCell = function (gridCell, keyPress, charPress) {\n    var cell = this.getComponentForCell(gridCell);\n\n    if (cell) {\n      cell.startRowOrCellEdit(keyPress, charPress);\n    }\n  };\n\n  RowRenderer.prototype.getComponentForCell = function (cellPosition) {\n    var rowComponent;\n\n    switch (cellPosition.rowPinned) {\n      case Constants.PINNED_TOP:\n        rowComponent = this.floatingTopRowComps[cellPosition.rowIndex];\n        break;\n\n      case Constants.PINNED_BOTTOM:\n        rowComponent = this.floatingBottomRowComps[cellPosition.rowIndex];\n        break;\n\n      default:\n        rowComponent = this.rowCompsByIndex[cellPosition.rowIndex];\n        break;\n    }\n\n    if (!rowComponent) {\n      return null;\n    }\n\n    var cellComponent = rowComponent.getRenderedCellForColumn(cellPosition.column);\n    return cellComponent;\n  };\n\n  RowRenderer.prototype.getRowNode = function (gridRow) {\n    switch (gridRow.rowPinned) {\n      case Constants.PINNED_TOP:\n        return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n\n      case Constants.PINNED_BOTTOM:\n        return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n\n      default:\n        return this.rowModel.getRow(gridRow.rowIndex);\n    }\n  };\n\n  RowRenderer.prototype.onTabKeyDown = function (previousRenderedCell, keyboardEvent) {\n    var backwards = keyboardEvent.shiftKey;\n    var success = this.moveToCellAfter(previousRenderedCell, backwards);\n\n    if (success) {\n      keyboardEvent.preventDefault();\n    }\n  };\n\n  RowRenderer.prototype.tabToNextCell = function (backwards) {\n    var focusedCell = this.focusedCellController.getFocusedCell(); // if no focus, then cannot navigate\n\n    if (_.missing(focusedCell)) {\n      return false;\n    }\n\n    var renderedCell = this.getComponentForCell(focusedCell); // if cell is not rendered, means user has scrolled away from the cell\n\n    if (_.missing(renderedCell)) {\n      return false;\n    }\n\n    var result = this.moveToCellAfter(renderedCell, backwards);\n    return result;\n  };\n\n  RowRenderer.prototype.moveToCellAfter = function (previousRenderedCell, backwards) {\n    var editing = previousRenderedCell.isEditing();\n    var res;\n\n    if (editing) {\n      if (this.gridOptionsWrapper.isFullRowEdit()) {\n        res = this.moveToNextEditingRow(previousRenderedCell, backwards);\n      } else {\n        res = this.moveToNextEditingCell(previousRenderedCell, backwards);\n      }\n    } else {\n      res = this.moveToNextCellNotEditing(previousRenderedCell, backwards);\n    }\n\n    return res;\n  };\n\n  RowRenderer.prototype.moveToNextEditingCell = function (previousRenderedCell, backwards) {\n    var gridCell = previousRenderedCell.getCellPosition(); // need to do this before getting next cell to edit, in case the next cell\n    // has editable function (eg colDef.editable=func() ) and it depends on the\n    // result of this cell, so need to save updates from the first edit, in case\n    // the value is referenced in the function.\n\n    previousRenderedCell.stopEditing(); // find the next cell to start editing\n\n    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);\n\n    var foundCell = _.exists(nextRenderedCell); // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n    // to the normal tabbing so user can exit the grid.\n\n\n    if (foundCell) {\n      nextRenderedCell.startEditingIfEnabled(null, null, true);\n      nextRenderedCell.focusCell(false);\n    }\n\n    return foundCell;\n  };\n\n  RowRenderer.prototype.moveToNextEditingRow = function (previousRenderedCell, backwards) {\n    var gridCell = previousRenderedCell.getCellPosition(); // find the next cell to start editing\n\n    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);\n\n    var foundCell = _.exists(nextRenderedCell); // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n    // to the normal tabbing so user can exit the grid.\n\n\n    if (foundCell) {\n      this.moveEditToNextCellOrRow(previousRenderedCell, nextRenderedCell);\n    }\n\n    return foundCell;\n  };\n\n  RowRenderer.prototype.moveToNextCellNotEditing = function (previousRenderedCell, backwards) {\n    var gridCell = previousRenderedCell.getCellPosition(); // find the next cell to start editing\n\n    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, false);\n\n    var foundCell = _.exists(nextRenderedCell); // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n    // to the normal tabbing so user can exit the grid.\n\n\n    if (foundCell) {\n      nextRenderedCell.focusCell(true);\n    }\n\n    return foundCell;\n  };\n\n  RowRenderer.prototype.moveEditToNextCellOrRow = function (previousRenderedCell, nextRenderedCell) {\n    var pGridCell = previousRenderedCell.getCellPosition();\n    var nGridCell = nextRenderedCell.getCellPosition();\n    var rowsMatch = pGridCell.rowIndex === nGridCell.rowIndex && pGridCell.rowPinned === nGridCell.rowPinned;\n\n    if (rowsMatch) {\n      // same row, so we don't start / stop editing, we just move the focus along\n      previousRenderedCell.setFocusOutOnEditor();\n      nextRenderedCell.setFocusInOnEditor();\n    } else {\n      var pRow = previousRenderedCell.getRenderedRow();\n      var nRow = nextRenderedCell.getRenderedRow();\n      previousRenderedCell.setFocusOutOnEditor();\n      pRow.stopEditing();\n      nRow.startRowEditing();\n      nextRenderedCell.setFocusInOnEditor();\n    }\n\n    nextRenderedCell.focusCell();\n  }; // called by the cell, when tab is pressed while editing.\n  // @return: RenderedCell when navigation successful, otherwise null\n\n\n  RowRenderer.prototype.findNextCellToFocusOn = function (gridCell, backwards, startEditing) {\n    var nextCell = gridCell;\n\n    while (true) {\n      if (!backwards) {\n        nextCell = this.getLastCellOfColSpan(nextCell);\n      }\n\n      nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards); // allow user to override what cell to go to next\n\n      var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();\n\n      if (_.exists(userFunc)) {\n        var params = {\n          backwards: backwards,\n          editing: startEditing,\n          previousCellPosition: gridCell,\n          nextCellPosition: nextCell ? nextCell : null\n        };\n        var userCell = userFunc(params);\n\n        if (_.exists(userCell)) {\n          if (userCell.floating) {\n            _.doOnce(function () {\n              console.warn(\"ag-Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?\");\n            }, 'no floating in userCell');\n\n            userCell.rowPinned = userCell.floating;\n          }\n\n          nextCell = {\n            rowIndex: userCell.rowIndex,\n            column: userCell.column,\n            rowPinned: userCell.rowPinned\n          };\n        } else {\n          nextCell = null;\n        }\n      } // if no 'next cell', means we have got to last cell of grid, so nothing to move to,\n      // so bottom right cell going forwards, or top left going backwards\n\n\n      if (!nextCell) {\n        return null;\n      } // if editing, but cell not editable, skip cell. we do this before we do all of\n      // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping\n      // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless\n      // (except for the last one) which causes grid to stall for a while.\n\n\n      if (startEditing) {\n        var rowNode = this.lookupRowNodeForCell(nextCell);\n        var cellIsEditable = nextCell.column.isCellEditable(rowNode);\n\n        if (!cellIsEditable) {\n          continue;\n        }\n      } // this scrolls the row into view\n\n\n      var cellIsNotFloating = _.missing(nextCell.rowPinned);\n\n      if (cellIsNotFloating) {\n        this.gridPanel.ensureIndexVisible(nextCell.rowIndex);\n      } // pinned columns don't scroll, so no need to ensure index visible\n\n\n      if (!nextCell.column.isPinned()) {\n        this.gridPanel.ensureColumnVisible(nextCell.column);\n      } // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible\n      // floating cell, the scrolls get out of sync\n\n\n      this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter(); // get the grid panel to flush all animation frames - otherwise the call below to get the cellComp\n      // could fail, if we just scrolled the grid (to make a cell visible) and the rendering hasn't finished.\n\n      this.animationFrameService.flushAllFrames(); // we have to call this after ensureColumnVisible - otherwise it could be a virtual column\n      // or row that is not currently in view, hence the renderedCell would not exist\n\n      var nextCellComp = this.getComponentForCell(nextCell); // if next cell is fullWidth row, then no rendered cell,\n      // as fullWidth rows have no cells, so we skip it\n\n      if (_.missing(nextCellComp)) {\n        continue;\n      }\n\n      if (nextCellComp.isSuppressNavigable()) {\n        continue;\n      } // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation\n      // consistent, we set into range here also.\n\n\n      if (this.rangeController) {\n        this.rangeController.setRangeToCell(nextCell);\n      } // we successfully tabbed onto a grid cell, so return true\n\n\n      return nextCellComp;\n    }\n  };\n\n  RowRenderer.prototype.lookupRowNodeForCell = function (cell) {\n    if (cell.rowPinned === Constants.PINNED_TOP) {\n      return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);\n    }\n\n    if (cell.rowPinned === Constants.PINNED_BOTTOM) {\n      return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);\n    }\n\n    return this.paginationProxy.getRow(cell.rowIndex);\n  };\n\n  __decorate([Autowired(\"paginationProxy\")], RowRenderer.prototype, \"paginationProxy\", void 0);\n\n  __decorate([Autowired(\"columnController\")], RowRenderer.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired(\"gridOptionsWrapper\")], RowRenderer.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired(\"$scope\")], RowRenderer.prototype, \"$scope\", void 0);\n\n  __decorate([Autowired(\"eventService\")], RowRenderer.prototype, \"eventService\", void 0);\n\n  __decorate([Autowired(\"pinnedRowModel\")], RowRenderer.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([Autowired(\"rowModel\")], RowRenderer.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired(\"loggerFactory\")], RowRenderer.prototype, \"loggerFactory\", void 0);\n\n  __decorate([Autowired(\"focusedCellController\")], RowRenderer.prototype, \"focusedCellController\", void 0);\n\n  __decorate([Autowired(\"cellNavigationService\")], RowRenderer.prototype, \"cellNavigationService\", void 0);\n\n  __decorate([Autowired(\"columnApi\")], RowRenderer.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired(\"gridApi\")], RowRenderer.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired(\"beans\")], RowRenderer.prototype, \"beans\", void 0);\n\n  __decorate([Autowired(\"maxDivHeightScaler\")], RowRenderer.prototype, \"maxDivHeightScaler\", void 0);\n\n  __decorate([Autowired(\"animationFrameService\")], RowRenderer.prototype, \"animationFrameService\", void 0);\n\n  __decorate([Autowired(\"rowPositionUtils\")], RowRenderer.prototype, \"rowPositionUtils\", void 0);\n\n  __decorate([Optional(\"rangeController\")], RowRenderer.prototype, \"rangeController\", void 0);\n\n  __decorate([__param(0, Qualifier(\"loggerFactory\"))], RowRenderer.prototype, \"agWire\", null);\n\n  RowRenderer = __decorate([Bean(\"rowRenderer\")], RowRenderer);\n  return RowRenderer;\n}(BeanStub);\n\nexport { RowRenderer };","map":null,"metadata":{},"sourceType":"module"}