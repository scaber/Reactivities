{"ast":null,"code":"import toDate from '../toDate/index.js';\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start, dirtyOptions);\n  var endDate = toDate(interval.end, dirtyOptions);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate, dirtyOptions));\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n\n  return dates;\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/eachDayOfInterval/index.js"],"names":["toDate","eachDayOfInterval","dirtyInterval","dirtyOptions","arguments","length","TypeError","interval","startDate","start","endDate","end","endTime","getTime","RangeError","dates","currentDate","setHours","push","setDate","getDate"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,eAAe,SAASC,iBAAT,CAA4BC,aAA5B,EAA2CC,YAA3C,EAAyD;AACtE,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UAApE,CAAN;AACD;;AAED,MAAIE,QAAQ,GAAGL,aAAa,IAAI,EAAhC;AACA,MAAIM,SAAS,GAAGR,MAAM,CAACO,QAAQ,CAACE,KAAV,EAAiBN,YAAjB,CAAtB;AACA,MAAIO,OAAO,GAAGV,MAAM,CAACO,QAAQ,CAACI,GAAV,EAAeR,YAAf,CAApB;AAEA,MAAIS,OAAO,GAAGF,OAAO,CAACG,OAAR,EAAd,CATsE,CAWtE;;AACA,MAAI,EAAEL,SAAS,CAACK,OAAV,MAAuBD,OAAzB,CAAJ,EAAuC;AACrC,UAAM,IAAIE,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,MAAIC,KAAK,GAAG,EAAZ;AAEA,MAAIC,WAAW,GAAGR,SAAlB;AACAQ,EAAAA,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;;AAEA,SAAOD,WAAW,CAACH,OAAZ,MAAyBD,OAAhC,EAAyC;AACvCG,IAAAA,KAAK,CAACG,IAAN,CAAWlB,MAAM,CAACgB,WAAD,EAAcb,YAAd,CAAjB;AACAa,IAAAA,WAAW,CAACG,OAAZ,CAAoBH,WAAW,CAACI,OAAZ,KAAwB,CAA5C;AACD;;AAED,SAAOL,KAAP;AACD","sourcesContent":["import toDate from '../toDate/index.js'\n\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\nexport default function eachDayOfInterval (dirtyInterval, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var interval = dirtyInterval || {}\n  var startDate = toDate(interval.start, dirtyOptions)\n  var endDate = toDate(interval.end, dirtyOptions)\n\n  var endTime = endDate.getTime()\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval')\n  }\n\n  var dates = []\n\n  var currentDate = startDate\n  currentDate.setHours(0, 0, 0, 0)\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate, dirtyOptions))\n    currentDate.setDate(currentDate.getDate() + 1)\n  }\n\n  return dates\n}\n"]},"metadata":{},"sourceType":"module"}