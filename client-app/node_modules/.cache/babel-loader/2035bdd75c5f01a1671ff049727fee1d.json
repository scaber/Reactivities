{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nrequire(\"antd/es/modal/style\");\n\nvar _modal = _interopRequireDefault(require(\"antd/es/modal\"));\n\nrequire(\"antd/es/input/style\");\n\nvar _input = _interopRequireDefault(require(\"antd/es/input\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Vector = _interopRequireDefault(require(\"ol/layer/Vector\"));\n\nvar _Vector2 = _interopRequireDefault(require(\"ol/source/Vector\"));\n\nvar _Collection = _interopRequireDefault(require(\"ol/Collection\"));\n\nvar _Style = _interopRequireDefault(require(\"ol/style/Style\"));\n\nvar _Stroke = _interopRequireDefault(require(\"ol/style/Stroke\"));\n\nvar _Fill = _interopRequireDefault(require(\"ol/style/Fill\"));\n\nvar _Circle = _interopRequireDefault(require(\"ol/style/Circle\"));\n\nvar _Text = _interopRequireDefault(require(\"ol/style/Text\"));\n\nvar _Draw = _interopRequireWildcard(require(\"ol/interaction/Draw\"));\n\nvar _Select = _interopRequireDefault(require(\"ol/interaction/Select\"));\n\nvar _Modify = _interopRequireDefault(require(\"ol/interaction/Modify\"));\n\nvar _Translate = _interopRequireDefault(require(\"ol/interaction/Translate\"));\n\nvar _condition = require(\"ol/events/condition\");\n\nvar _ToggleButton = _interopRequireDefault(require(\"../ToggleButton/ToggleButton\"));\n\nvar _MapUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/MapUtil/MapUtil\"));\n\nvar _StringUtil = _interopRequireDefault(require(\"@terrestris/base-util/dist/StringUtil/StringUtil\"));\n\nvar _AnimateUtil = _interopRequireDefault(require(\"@terrestris/ol-util/dist/AnimateUtil/AnimateUtil\"));\n\nvar _Logger = _interopRequireDefault(require(\"@terrestris/base-util/dist/Logger\"));\n\nvar _constants = require(\"../../constants\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar TextArea = _input[\"default\"].TextArea;\n\nvar _isFunction = require('lodash/isFunction');\n/**\n * The DigitizeButton.\n *\n * @class The DigitizeButton\n * @extends React.Component\n *\n */\n\n\nvar DigitizeButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DigitizeButton, _React$Component);\n  /**\n   * The className added to this component.\n   *\n   * @private\n   */\n\n  /**\n   * Currently existing digitize features as collection.\n   *\n   * @private\n   */\n\n  /**\n   * The layer used for the digitization.\n   *\n   * @private\n   */\n\n  /**\n   * Currently drawn feature which should be represent as label or postit.\n   * @private\n   */\n\n  /**\n   * Reference to OL select interaction which will be used in edit mode.\n   * @private\n   */\n\n  /**\n   * The interactions.\n   * @private\n   */\n\n  /**\n   * Name of point draw type.\n   * @private\n   */\n\n  /**\n   * Name of line string draw type.\n   * @private\n   */\n\n  /**\n   * Name of polygon draw type.\n   * @private\n   */\n\n  /**\n   * Name of circle draw type.\n   * @private\n   */\n\n  /**\n   * Name of rectangle draw type.\n   * @private\n   */\n\n  /**\n   * Name of text draw type.\n   * @private\n   */\n\n  /**\n   * Name of copy edit type.\n   * @private\n   */\n\n  /**\n   * Name of edit edit type.\n   * @private\n   */\n\n  /**\n   * Name of delete edit type.\n   * @private\n   */\n\n  /**\n   * Default fill color used in style object of drawn features.\n   */\n\n  /**\n   * Default stroke color used in style object of drawn features.\n   */\n\n  /**\n   * Hit detection in pixels used for select interaction.\n   */\n\n  /**\n   * Default style for digitized points.\n   */\n\n  /**\n   * Default style for digitized lines.\n   */\n\n  /**\n   * Default style for digitized polygons or circles.\n   */\n\n  /**\n   * Default style for digitized labels.\n   */\n\n  /**\n   * The default properties.\n   */\n\n  /**\n   * Creates the DigitizeButton.\n   *\n   * @constructs DigitizeButton\n   */\n\n\n  function DigitizeButton(props) {\n    var _this;\n\n    _classCallCheck(this, DigitizeButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DigitizeButton).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"digitizebutton\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"_digitizeFeatures\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_digitizeLayer\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_digitizeTextFeature\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_selectInteraction\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_interactions\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggle\", function (pressed) {\n      var _this$props = _this.props,\n          map = _this$props.map,\n          drawType = _this$props.drawType,\n          editType = _this$props.editType,\n          drawStyle = _this$props.drawStyle,\n          onFeatureSelect = _this$props.onFeatureSelect;\n\n      _this.props.onToggle(pressed);\n\n      if (_this._digitizeLayer) {\n        _this._digitizeFeatures = _this._digitizeLayer.getSource().getFeaturesCollection();\n      }\n\n      if (pressed) {\n        if (drawStyle) {\n          _this._digitizeLayer.setStyle(_this.getDigitizeStyleFunction);\n        }\n\n        if (drawType) {\n          _this.createDrawInteraction(pressed);\n        } else if (editType) {\n          _this.createSelectOrModifyInteraction();\n        }\n      } else {\n        _this._interactions.forEach(function (i) {\n          return map.removeInteraction(i);\n        });\n\n        if (drawType === DigitizeButton.TEXT_DRAW_TYPE) {\n          _this._digitizeFeatures.un('add', _this.handleTextAdding);\n        } else {\n          if (_this._selectInteraction) {\n            _this._selectInteraction.getFeatures().clear();\n          }\n\n          if (editType === DigitizeButton.DELETE_EDIT_TYPE) {\n            _this._selectInteraction.un('select', _this.onFeatureRemove);\n          }\n\n          if (editType === DigitizeButton.COPY_EDIT_TYPE) {\n            _this._selectInteraction.un('select', _this.onFeatureCopy);\n          }\n\n          if (_isFunction(onFeatureSelect) && editType === DigitizeButton.EDIT_EDIT_TYPE) {\n            _this._selectInteraction.un('select', onFeatureSelect);\n          }\n\n          map.un('pointermove', _this.onPointerMove);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createDigitizeLayer\", function () {\n      var _this$props2 = _this.props,\n          digitizeLayerName = _this$props2.digitizeLayerName,\n          map = _this$props2.map;\n\n      var digitizeLayer = _MapUtil[\"default\"].getLayerByName(map, digitizeLayerName);\n\n      if (!digitizeLayer) {\n        digitizeLayer = new _Vector[\"default\"]({\n          name: digitizeLayerName,\n          source: new _Vector2[\"default\"]({\n            features: new _Collection[\"default\"]()\n          })\n        });\n        map.addLayer(digitizeLayer);\n      }\n\n      digitizeLayer.setStyle(_this.getDigitizeStyleFunction);\n      _this._digitizeLayer = digitizeLayer;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDigitizeStyleFunction\", function (feature) {\n      var drawStyle = _this.props.drawStyle;\n      var styleObj;\n\n      if (!feature.getGeometry()) {\n        return;\n      }\n\n      switch (feature.getGeometry().getType()) {\n        case DigitizeButton.POINT_DRAW_TYPE:\n          {\n            if (!feature.get('isLabel')) {\n              styleObj = drawStyle || new _Style[\"default\"]({\n                image: new _Circle[\"default\"]({\n                  radius: 7,\n                  fill: new _Fill[\"default\"]({\n                    color: DigitizeButton.DEFAULT_FILL_COLOR\n                  }),\n                  stroke: new _Stroke[\"default\"]({\n                    color: DigitizeButton.DEFAULT_STROKE_COLOR\n                  })\n                })\n              });\n            } else {\n              styleObj = drawStyle || new _Style[\"default\"]({\n                text: new _Text[\"default\"]({\n                  text: feature.get('label'),\n                  offsetX: 5,\n                  offsetY: 5,\n                  font: '12px sans-serif',\n                  fill: new _Fill[\"default\"]({\n                    color: DigitizeButton.DEFAULT_FILL_COLOR\n                  }),\n                  stroke: new _Stroke[\"default\"]({\n                    color: DigitizeButton.DEFAULT_STROKE_COLOR\n                  })\n                })\n              });\n            }\n\n            return styleObj;\n          }\n\n        case DigitizeButton.LINESTRING_DRAW_TYPE:\n          {\n            styleObj = drawStyle || new _Style[\"default\"]({\n              stroke: new _Stroke[\"default\"]({\n                color: DigitizeButton.DEFAULT_STROKE_COLOR,\n                width: 2\n              })\n            });\n            return styleObj;\n          }\n\n        case DigitizeButton.POLYGON_DRAW_TYPE:\n        case DigitizeButton.CIRCLE_DRAW_TYPE:\n          {\n            styleObj = drawStyle || new _Style[\"default\"]({\n              fill: new _Fill[\"default\"]({\n                color: DigitizeButton.DEFAULT_FILL_COLOR\n              }),\n              stroke: new _Stroke[\"default\"]({\n                color: DigitizeButton.DEFAULT_STROKE_COLOR,\n                width: 2\n              })\n            });\n            return styleObj;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSelectedStyleFunction\", function (feature, res, text) {\n      var _this$props3 = _this.props,\n          selectFillColor = _this$props3.selectFillColor,\n          selectStrokeColor = _this$props3.selectStrokeColor;\n\n      if (feature.get('label')) {\n        text = feature.get('label');\n      }\n\n      return new _Style[\"default\"]({\n        image: new _Circle[\"default\"]({\n          radius: 7,\n          fill: new _Fill[\"default\"]({\n            color: selectFillColor\n          }),\n          stroke: new _Stroke[\"default\"]({\n            color: selectStrokeColor\n          })\n        }),\n        text: new _Text[\"default\"]({\n          text: text ? text : '',\n          offsetX: 5,\n          offsetY: 5,\n          font: '12px sans-serif',\n          fill: new _Fill[\"default\"]({\n            color: selectFillColor\n          }),\n          stroke: new _Stroke[\"default\"]({\n            color: selectStrokeColor\n          })\n        }),\n        stroke: new _Stroke[\"default\"]({\n          color: selectStrokeColor,\n          width: 2\n        }),\n        fill: new _Fill[\"default\"]({\n          color: selectFillColor\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createDrawInteraction\", function (pressed) {\n      var _this$props4 = _this.props,\n          drawType = _this$props4.drawType,\n          map = _this$props4.map,\n          onDrawEnd = _this$props4.onDrawEnd,\n          onDrawStart = _this$props4.onDrawStart,\n          digitizeLayerName = _this$props4.digitizeLayerName,\n          drawInteractionConfig = _this$props4.drawInteractionConfig;\n      var geometryFunction;\n      var type = drawType; // check whether the digitizeLayer is in map and set it from state if not\n\n      var digitizeLayer = _MapUtil[\"default\"].getLayerByName(map, digitizeLayerName);\n\n      if (!digitizeLayer) {\n        map.addLayer(_this._digitizeLayer);\n      }\n\n      if (drawType === DigitizeButton.RECTANGLE_DRAW_TYPE) {\n        geometryFunction = (0, _Draw.createBox)();\n        type = DigitizeButton.CIRCLE_DRAW_TYPE;\n      } else if (drawType === DigitizeButton.TEXT_DRAW_TYPE) {\n        type = DigitizeButton.POINT_DRAW_TYPE;\n\n        _this._digitizeFeatures.on('add', _this.handleTextAdding);\n      }\n\n      var drawInteraction = new _Draw[\"default\"](_objectSpread({\n        source: _this._digitizeLayer.getSource(),\n        type: type,\n        geometryFunction: geometryFunction,\n        style: _this.getDigitizeStyleFunction,\n        freehandCondition: _condition.never\n      }, drawInteractionConfig));\n\n      if (onDrawEnd) {\n        drawInteraction.on('drawend', onDrawEnd);\n      }\n\n      if (onDrawStart) {\n        drawInteraction.on('drawstart', onDrawStart);\n      }\n\n      map.addInteraction(drawInteraction);\n      _this._interactions = [drawInteraction];\n      drawInteraction.setActive(pressed);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createSelectOrModifyInteraction\", function () {\n      var _this$props5 = _this.props,\n          editType = _this$props5.editType,\n          map = _this$props5.map,\n          selectInteractionConfig = _this$props5.selectInteractionConfig,\n          modifyInteractionConfig = _this$props5.modifyInteractionConfig,\n          translateInteractionConfig = _this$props5.translateInteractionConfig,\n          onFeatureSelect = _this$props5.onFeatureSelect;\n      _this._selectInteraction = new _Select[\"default\"](_objectSpread({\n        condition: _condition.singleClick,\n        hitTolerance: DigitizeButton.HIT_TOLERANCE,\n        style: _this.getSelectedStyleFunction\n      }, selectInteractionConfig));\n\n      if (editType === DigitizeButton.DELETE_EDIT_TYPE) {\n        _this._selectInteraction.on('select', _this.onFeatureRemove);\n      } else if (editType === DigitizeButton.COPY_EDIT_TYPE) {\n        _this._selectInteraction.on('select', _this.onFeatureCopy);\n      }\n\n      if (_isFunction(onFeatureSelect) && editType === DigitizeButton.EDIT_EDIT_TYPE) {\n        _this._selectInteraction.on('select', onFeatureSelect);\n      }\n\n      var interactions = [_this._selectInteraction];\n\n      if (editType === DigitizeButton.EDIT_EDIT_TYPE) {\n        var edit = new _Modify[\"default\"](_objectSpread({\n          features: _this._selectInteraction.getFeatures(),\n          deleteCondition: _condition.singleClick,\n          style: _this.getSelectedStyleFunction\n        }, modifyInteractionConfig));\n        edit.on('modifystart', _this.onModifyStart);\n        edit.on('modifyend', _this.onModifyEnd);\n        var translate = new _Translate[\"default\"](_objectSpread({\n          features: _this._selectInteraction.getFeatures()\n        }, translateInteractionConfig));\n        translate.on('translatestart', _this.onTranslateStart);\n        translate.on('translateend', _this.onTranslateEnd);\n        translate.on('translating', _this.onTranslating);\n        interactions.push(edit, translate);\n      }\n\n      interactions.forEach(function (i) {\n        return map.addInteraction(i);\n      });\n      map.on('pointermove', _this.onPointerMove);\n      _this._interactions = interactions;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFeatureRemove\", function (evt) {\n      var _this$props6 = _this.props,\n          onFeatureRemove = _this$props6.onFeatureRemove,\n          onFeatureSelect = _this$props6.onFeatureSelect;\n\n      if (_isFunction(onFeatureRemove)) {\n        onFeatureRemove(evt);\n      }\n\n      if (_isFunction(onFeatureSelect)) {\n        onFeatureSelect(evt);\n      }\n\n      var feat = evt.selected[0];\n\n      _this._selectInteraction.getFeatures().remove(feat);\n\n      _this._digitizeLayer.getSource().removeFeature(feat);\n\n      _this.props.map.renderSync();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFeatureCopy\", function (evt) {\n      var _this$props7 = _this.props,\n          map = _this$props7.map,\n          onFeatureCopy = _this$props7.onFeatureCopy,\n          onFeatureSelect = _this$props7.onFeatureSelect;\n      var feat = evt.selected[0];\n\n      if (!feat) {\n        return;\n      }\n\n      if (_isFunction(onFeatureCopy)) {\n        onFeatureCopy(evt);\n      }\n\n      if (_isFunction(onFeatureSelect)) {\n        onFeatureSelect(evt);\n      }\n\n      var copy = feat.clone();\n      copy.setStyle(_this.getDigitizeStyleFunction(feat));\n\n      _this._digitizeFeatures.push(copy);\n\n      _AnimateUtil[\"default\"].moveFeature(map, _this._digitizeLayer, copy, 500, 50, _this.getDigitizeStyleFunction(feat));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onModifyStart\", function (evt) {\n      var onModifyStart = _this.props.onModifyStart;\n\n      if (_isFunction(onModifyStart)) {\n        onModifyStart(evt);\n      }\n\n      var feature = evt.features.getArray()[0];\n\n      if (feature.get('isLabel')) {\n        _this._digitizeTextFeature = feature;\n        var textLabel = '';\n\n        var featureStyle = _this.getDigitizeStyleFunction(feature);\n\n        if (featureStyle && featureStyle.getText()) {\n          textLabel = featureStyle.getText().getText();\n        } else if (feature.get('label')) {\n          textLabel = feature.get('label');\n        }\n\n        _this.setState({\n          showLabelPrompt: true,\n          textLabel: textLabel\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onModifyEnd\", function (evt) {\n      var onModifyEnd = _this.props.onModifyEnd;\n\n      if (_isFunction(onModifyEnd)) {\n        onModifyEnd(evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTranslateStart\", function (evt) {\n      var onTranslateStart = _this.props.onTranslateStart;\n\n      if (_isFunction(onTranslateStart)) {\n        onTranslateStart(evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTranslateEnd\", function (evt) {\n      var onTranslateEnd = _this.props.onTranslateEnd;\n\n      if (_isFunction(onTranslateEnd)) {\n        onTranslateEnd(evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTranslating\", function (evt) {\n      var onTranslating = _this.props.onTranslating;\n\n      if (_isFunction(onTranslating)) {\n        onTranslating(evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTextAdding\", function (evt) {\n      _this.setState({\n        showLabelPrompt: true\n      });\n\n      _this._digitizeTextFeature = evt.element;\n\n      _this._digitizeTextFeature.set('isLabel', true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onModalLabelOk\", function () {\n      var onModalLabelOk = _this.props.onModalLabelOk;\n\n      _this.setState({\n        showLabelPrompt: false\n      }, function () {\n        _this.setTextOnFeature(_this._digitizeTextFeature, onModalLabelOk);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onModalLabelCancel\", function (event) {\n      var onModalLabelCancel = _this.props.onModalLabelCancel;\n\n      _this.setState({\n        showLabelPrompt: false,\n        textLabel: ''\n      }, function () {\n        if (!(_this._interactions.length > 1)) {\n          _this._digitizeFeatures.remove(_this._digitizeTextFeature);\n\n          _this._digitizeTextFeature = null;\n        }\n\n        if (_isFunction(onModalLabelCancel)) {\n          onModalLabelCancel(event);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTextOnFeature\", function (feat, onModalOkCbk) {\n      var maxLabelLineLength = _this.props.maxLabelLineLength;\n      var textLabel = _this.state.textLabel;\n      var label = textLabel;\n\n      if (maxLabelLineLength) {\n        label = _StringUtil[\"default\"].stringDivider(textLabel, maxLabelLineLength, '\\n');\n      }\n\n      feat.set('label', label);\n\n      _this.setState({\n        textLabel: ''\n      }, function () {\n        if (_isFunction(onModalOkCbk)) {\n          onModalOkCbk(feat, label);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLabelChange\", function (evt) {\n      _this.setState({\n        textLabel: evt.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function (evt) {\n      if (evt.dragging) {\n        return;\n      }\n\n      var _this$props8 = _this.props,\n          map = _this$props8.map,\n          digitizeLayerName = _this$props8.digitizeLayerName;\n      var pixel = map.getEventPixel(evt.originalEvent);\n      var hit = map.hasFeatureAtPixel(pixel, {\n        layerFilter: function layerFilter(l) {\n          return l.get('name') === digitizeLayerName;\n        },\n        hitTolerance: DigitizeButton.HIT_TOLERANCE\n      });\n      map.getTargetElement().style.cursor = hit ? 'pointer' : '';\n    });\n\n    if (!props.drawType && !props.editType) {\n      _Logger[\"default\"].warn('Neither \"drawType\" nor \"editType\" was provided. Digitize ' + 'button won\\'t work properly!');\n    }\n\n    _this.state = {\n      showLabelPrompt: false,\n      textLabel: ''\n    };\n    return _this;\n  }\n  /**\n   * `componentDidMount` method of the DigitizeButton. Just calls\n   * `createDigitizeLayer` method.\n   */\n\n\n  _createClass(DigitizeButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createDigitizeLayer();\n    }\n    /**\n     * Called on componentWillUnmount lifecycle.\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var map = this.props.map;\n\n      this._interactions.forEach(function (i) {\n        return map.removeInteraction(i);\n      });\n    }\n    /**\n     * Called when the digitize button is toggled. If the button state is pressed,\n     * the appropriate draw, modify or select interaction will be created.\n     * Otherwise, by untoggling, the same previously created interaction will be\n     * removed from the map.\n     *\n     * @param pressed Whether the digitize button is pressed or not.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * The render function.\n     */\n    value: function render() {\n      var _this$props9 = this.props,\n          className = _this$props9.className,\n          map = _this$props9.map,\n          drawType = _this$props9.drawType,\n          editType = _this$props9.editType,\n          digitizeLayerName = _this$props9.digitizeLayerName,\n          drawStyle = _this$props9.drawStyle,\n          selectFillColor = _this$props9.selectFillColor,\n          selectStrokeColor = _this$props9.selectStrokeColor,\n          modalPromptTitle = _this$props9.modalPromptTitle,\n          modalPromptOkButtonText = _this$props9.modalPromptOkButtonText,\n          modalPromptCancelButtonText = _this$props9.modalPromptCancelButtonText,\n          onDrawStart = _this$props9.onDrawStart,\n          onDrawEnd = _this$props9.onDrawEnd,\n          onModifyStart = _this$props9.onModifyStart,\n          onModifyEnd = _this$props9.onModifyEnd,\n          onTranslateStart = _this$props9.onTranslateStart,\n          onTranslateEnd = _this$props9.onTranslateEnd,\n          onTranslating = _this$props9.onTranslating,\n          onFeatureRemove = _this$props9.onFeatureRemove,\n          onFeatureCopy = _this$props9.onFeatureCopy,\n          onFeatureSelect = _this$props9.onFeatureSelect,\n          drawInteractionConfig = _this$props9.drawInteractionConfig,\n          selectInteractionConfig = _this$props9.selectInteractionConfig,\n          modifyInteractionConfig = _this$props9.modifyInteractionConfig,\n          translateInteractionConfig = _this$props9.translateInteractionConfig,\n          onToggle = _this$props9.onToggle,\n          onModalLabelOk = _this$props9.onModalLabelOk,\n          onModalLabelCancel = _this$props9.onModalLabelCancel,\n          maxLabelLineLength = _this$props9.maxLabelLineLength,\n          passThroughProps = _objectWithoutProperties(_this$props9, [\"className\", \"map\", \"drawType\", \"editType\", \"digitizeLayerName\", \"drawStyle\", \"selectFillColor\", \"selectStrokeColor\", \"modalPromptTitle\", \"modalPromptOkButtonText\", \"modalPromptCancelButtonText\", \"onDrawStart\", \"onDrawEnd\", \"onModifyStart\", \"onModifyEnd\", \"onTranslateStart\", \"onTranslateEnd\", \"onTranslating\", \"onFeatureRemove\", \"onFeatureCopy\", \"onFeatureSelect\", \"drawInteractionConfig\", \"selectInteractionConfig\", \"modifyInteractionConfig\", \"translateInteractionConfig\", \"onToggle\", \"onModalLabelOk\", \"onModalLabelCancel\", \"maxLabelLineLength\"]);\n\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      var btnWrapperClass = \"\".concat(_constants.CSS_PREFIX, \"digitize-button-wrapper\");\n      return React.createElement(\"span\", {\n        className: btnWrapperClass\n      }, React.createElement(_ToggleButton[\"default\"], _extends({\n        onToggle: this.onToggle,\n        className: finalClassName\n      }, passThroughProps)), this.state.showLabelPrompt ? React.createElement(_modal[\"default\"], {\n        title: modalPromptTitle,\n        okText: modalPromptOkButtonText,\n        cancelText: modalPromptCancelButtonText,\n        visible: this.state.showLabelPrompt,\n        closable: false,\n        onOk: this.onModalLabelOk,\n        onCancel: this.onModalLabelCancel\n      }, React.createElement(TextArea, {\n        value: this.state.textLabel,\n        onChange: this.onLabelChange,\n        autosize: true\n      })) : null);\n    }\n  }]);\n\n  return DigitizeButton;\n}(React.Component);\n\n_defineProperty(DigitizeButton, \"POINT_DRAW_TYPE\", 'Point');\n\n_defineProperty(DigitizeButton, \"LINESTRING_DRAW_TYPE\", 'LineString');\n\n_defineProperty(DigitizeButton, \"POLYGON_DRAW_TYPE\", 'Polygon');\n\n_defineProperty(DigitizeButton, \"CIRCLE_DRAW_TYPE\", 'Circle');\n\n_defineProperty(DigitizeButton, \"RECTANGLE_DRAW_TYPE\", 'Rectangle');\n\n_defineProperty(DigitizeButton, \"TEXT_DRAW_TYPE\", 'Text');\n\n_defineProperty(DigitizeButton, \"COPY_EDIT_TYPE\", 'Copy');\n\n_defineProperty(DigitizeButton, \"EDIT_EDIT_TYPE\", 'Edit');\n\n_defineProperty(DigitizeButton, \"DELETE_EDIT_TYPE\", 'Delete');\n\n_defineProperty(DigitizeButton, \"DEFAULT_FILL_COLOR\", 'rgba(154, 26, 56, 0.5)');\n\n_defineProperty(DigitizeButton, \"DEFAULT_STROKE_COLOR\", 'rgba(154, 26, 56, 0.8)');\n\n_defineProperty(DigitizeButton, \"HIT_TOLERANCE\", 5);\n\n_defineProperty(DigitizeButton, \"DEFAULT_POINT_STYLE\", new _Style[\"default\"]({\n  image: new _Circle[\"default\"]({\n    radius: 7,\n    fill: new _Fill[\"default\"]({\n      color: DigitizeButton.DEFAULT_FILL_COLOR\n    }),\n    stroke: new _Stroke[\"default\"]({\n      color: DigitizeButton.DEFAULT_STROKE_COLOR\n    })\n  })\n}));\n\n_defineProperty(DigitizeButton, \"DEFAULT_LINESTRING_STYLE\", new _Style[\"default\"]({\n  stroke: new _Stroke[\"default\"]({\n    color: DigitizeButton.DEFAULT_STROKE_COLOR,\n    width: 2\n  })\n}));\n\n_defineProperty(DigitizeButton, \"DEFAULT_POLYGON_STYLE\", new _Style[\"default\"]({\n  fill: new _Fill[\"default\"]({\n    color: DigitizeButton.DEFAULT_FILL_COLOR\n  }),\n  stroke: new _Stroke[\"default\"]({\n    color: DigitizeButton.DEFAULT_STROKE_COLOR,\n    width: 2\n  })\n}));\n\n_defineProperty(DigitizeButton, \"DEFAULT_TEXT_STYLE\", new _Style[\"default\"]({\n  text: new _Text[\"default\"]({\n    text: '',\n    offsetX: 5,\n    offsetY: 5,\n    font: '12px sans-serif',\n    fill: new _Fill[\"default\"]({\n      color: DigitizeButton.DEFAULT_FILL_COLOR\n    }),\n    stroke: new _Stroke[\"default\"]({\n      color: DigitizeButton.DEFAULT_STROKE_COLOR\n    })\n  })\n}));\n\n_defineProperty(DigitizeButton, \"defaultProps\", {\n  digitizeLayerName: 'react-geo_digitize',\n  selectFillColor: 'rgba(240, 240, 90, 0.5)',\n  selectStrokeColor: 'rgba(220, 120, 20, 0.8)',\n  modalPromptTitle: 'Label',\n  modalPromptOkButtonText: 'Ok',\n  modalPromptCancelButtonText: 'Cancel',\n  drawInteractionConfig: {},\n  selectInteractionConfig: {},\n  modifyInteractionConfig: {},\n  translateInteractionConfig: {},\n  onToggle: function onToggle() {\n    return undefined;\n  }\n});\n\nvar _default = DigitizeButton;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}