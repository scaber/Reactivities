{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _render = require(\"ol/render\");\n\nvar _Observable = require(\"ol/Observable\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * This class provides some static methods which might be helpful when working\n * with digitize functions to animate features.\n *\n * @class AnimateUtil\n */\n\n\nvar AnimateUtil =\n/*#__PURE__*/\nfunction () {\n  function AnimateUtil() {\n    _classCallCheck(this, AnimateUtil);\n  }\n\n  _createClass(AnimateUtil, null, [{\n    key: \"moveFeature\",\n\n    /**\n     * Moves / translates an `OlFeature` to the given `pixel` delta in\n     * in the end with given `duration` in ms, using the given style.\n     *\n     * @param {ol.Map} map An OlMap.\n     * @param {ol.layer.Vector} layer A vector layer which feature should be moved.\n     * @param {ol.Feature} featureToMove The feature to move.\n     * @param {number} duration The duration in ms for the moving to complete.\n     * @param {Array<number>} pixel Delta of pixels to move the feature.\n     * @param {ol.style.Style} style The style to use when moving the feature.\n     *\n     * @return {string} A listener key from a postrender event.\n     */\n    value: function moveFeature(map, layer, featureToMove, duration, pixel, style) {\n      return new Promise(function (resolve) {\n        var listenerKey;\n        var geometry = featureToMove.getGeometry();\n        var start = new Date().getTime();\n        var resolution = map.getView().getResolution();\n        var totalDisplacement = pixel * resolution;\n        var expectedFrames = duration / 1000 * 60;\n        var actualFrames = 0;\n        var deltaX = totalDisplacement / expectedFrames;\n        var deltaY = totalDisplacement / expectedFrames;\n        /**\n         * Moves the feature `pixel` right and `pixel` up.\n         * @ignore\n         */\n\n        var animate = function animate(event) {\n          var vectorContext = (0, _render.getVectorContext)(event);\n          var frameState = event.frameState;\n          var elapsed = frameState.time - start;\n          geometry.translate(deltaX, deltaY);\n\n          if (style) {\n            vectorContext.setStyle(style);\n          }\n\n          vectorContext.drawGeometry(geometry);\n\n          if (elapsed > duration || actualFrames >= expectedFrames) {\n            (0, _Observable.unByKey)(listenerKey);\n            resolve(featureToMove);\n          } // tell OpenLayers to continue postrender animation\n\n\n          frameState.animate = true;\n          actualFrames++;\n          map.render();\n        };\n\n        listenerKey = layer.on('postrender', animate);\n      });\n    }\n  }]);\n\n  return AnimateUtil;\n}();\n\nvar _default = AnimateUtil;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}