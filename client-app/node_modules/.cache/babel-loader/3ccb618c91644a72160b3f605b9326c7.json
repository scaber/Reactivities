{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, PostConstruct } from \"@ag-grid-community/core\";\n\nvar FilterService =\n/** @class */\nfunction () {\n  function FilterService() {}\n\n  FilterService.prototype.postConstruct = function () {\n    this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n  };\n\n  FilterService.prototype.filter = function (changedPath) {\n    var filterActive = this.filterManager.isAnyFilterPresent();\n    this.filterNodes(filterActive, changedPath);\n  };\n\n  FilterService.prototype.filterNodes = function (filterActive, changedPath) {\n    var _this = this;\n\n    var filterCallback = function (rowNode, includeChildNodes) {\n      // recursively get all children that are groups to also filter\n      if (rowNode.hasChildren()) {\n        // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n        if (filterActive && !includeChildNodes) {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {\n            // a group is included in the result if it has any children of it's own.\n            // by this stage, the child groups are already filtered\n            var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0; // both leaf level nodes and tree data nodes have data. these get added if\n            // the data passes the filter\n\n            var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode); // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n\n\n            return passBecauseChildren || passBecauseDataPasses;\n          });\n        } else {\n          // if not filtering, the result is the original list\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        }\n\n        _this.setAllChildrenCount(rowNode);\n      } else {\n        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        rowNode.setAllChildrenCount(null);\n      }\n    };\n\n    if (this.doingTreeDataFiltering()) {\n      var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {\n        // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n        // filter, and parent nodes will be include if any children exist.\n        if (rowNode.childrenAfterGroup) {\n          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            var childNode = rowNode.childrenAfterGroup[i]; // first check if current node passes filter before invoking child nodes\n\n            var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter(childNode);\n\n            if (childNode.childrenAfterGroup) {\n              treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);\n            } else {\n              filterCallback(childNode, foundInParent);\n            }\n          }\n        }\n\n        filterCallback(rowNode, alreadyFoundInParent);\n      };\n\n      var treeDataFilterCallback = function (rowNode) {\n        return treeDataDepthFirstFilter_1(rowNode, false);\n      };\n\n      changedPath.executeFromRootNode(treeDataFilterCallback);\n    } else {\n      var defaultFilterCallback = function (rowNode) {\n        return filterCallback(rowNode, false);\n      };\n\n      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n    }\n  };\n\n  FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {\n    // for tree data, we include all children, groups and leafs\n    var allChildrenCount = 0;\n    rowNode.childrenAfterFilter.forEach(function (child) {\n      // include child itself\n      allChildrenCount++; // include children of children\n\n      allChildrenCount += child.allChildrenCount;\n    });\n    rowNode.setAllChildrenCount(allChildrenCount);\n  };\n\n  FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {\n    // for grid data, we only count the leafs\n    var allChildrenCount = 0;\n    rowNode.childrenAfterFilter.forEach(function (child) {\n      if (child.group) {\n        allChildrenCount += child.allChildrenCount;\n      } else {\n        allChildrenCount++;\n      }\n    });\n    rowNode.setAllChildrenCount(allChildrenCount);\n  };\n\n  FilterService.prototype.setAllChildrenCount = function (rowNode) {\n    if (this.doingTreeData) {\n      this.setAllChildrenCountTreeData(rowNode);\n    } else {\n      this.setAllChildrenCountGridGrouping(rowNode);\n    }\n  };\n\n  FilterService.prototype.doingTreeDataFiltering = function () {\n    return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();\n  };\n\n  __decorate([Autowired('filterManager')], FilterService.prototype, \"filterManager\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], FilterService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([PostConstruct], FilterService.prototype, \"postConstruct\", null);\n\n  FilterService = __decorate([Bean(\"filterService\")], FilterService);\n  return FilterService;\n}();\n\nexport { FilterService };","map":null,"metadata":{},"sourceType":"module"}