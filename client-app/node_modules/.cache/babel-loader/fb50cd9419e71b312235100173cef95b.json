{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.Panel = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRnd = require(\"react-rnd\");\n\nvar _Titlebar = _interopRequireDefault(require(\"../Titlebar/Titlebar\"));\n\nvar _SimpleButton = _interopRequireDefault(require(\"../../Button/SimpleButton/SimpleButton\"));\n\nvar _constants = require(\"../../constants\");\n\nrequire(\"./Panel.less\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _uniqueId = require('lodash/uniqueId');\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isFunction = require('lodash/isFunction');\n/**\n * The Panel.\n *\n * @class The Panel\n * @extends React.Component\n */\n\n\nvar Panel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Panel, _React$Component);\n  /**\n   * The className added to this component.\n   * @private\n   */\n\n  /**\n   * Printed representation of the pressed escape keyboard key.\n   * s. https://developer.mozilla.org/de/docs/Web/API/KeyboardEvent/key/Key_Values\n   * @private\n   */\n\n  /**\n   *\n   *\n   */\n\n  /**\n   * The default properties.\n   */\n\n  /**\n   * Create the SimpleButton.\n   *\n   * @constructs SimpleButton\n   */\n\n\n  function Panel(props) {\n    var _this;\n\n    _classCallCheck(this, Panel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Panel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"className\", \"\".concat(_constants.CSS_PREFIX, \"panel\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"_escapeKeyboardEventKey\", 'Esc');\n\n    _defineProperty(_assertThisInitialized(_this), \"_rnd\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (evt) {\n      var onEscape = _this.props.onEscape;\n\n      if (evt && evt.key.startsWith(_this._escapeKeyboardEventKey) && onEscape) {\n        _this._rnd.getSelfElement().focus();\n\n        onEscape(evt);\n      }\n    });\n\n    var id = props.id || _uniqueId('panel-');\n\n    _this.state = {\n      id: id,\n      collapsed: _this.props.collapsible ? _this.props.collapsed : false,\n      titleBarHeight: _this.props.title ? props.titleBarHeight : 0,\n      height: props.height,\n      width: props.width,\n      resizing: false\n    };\n    return _this;\n  }\n  /**\n   * componentDidMount life cycle method.\n   * Registers `keydown` listener if `onEscape` function was provided via props.\n   */\n\n\n  _createClass(Panel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.onEscape) {\n        document.addEventListener('keydown', this.onKeyDown, false);\n      }\n    }\n    /**\n     * componentWillUnmount life cycle method.\n     * Unregisters `keydown` listener if `onEscape` function was provided via props.\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.onEscape) {\n        document.removeEventListener('keydown', this.onKeyDown, false);\n      }\n    }\n    /**\n     * Calculates the height of the Panel and returns a number.\n     */\n\n  }, {\n    key: \"calculateHeight\",\n    value: function calculateHeight() {\n      return this.state.collapsed ? this.state.titleBarHeight : this.state.height;\n    }\n    /**\n     * Calculates the height of the Panel body and returns a valid css height\n     * expression.\n     */\n\n  }, {\n    key: \"calculateBodyHeight\",\n    value: function calculateBodyHeight() {\n      if (this.state.collapsed) {\n        return '0px';\n      } else {\n        return _isNumber(this.state.height) ? this.state.height - this.state.titleBarHeight + 'px' : this.state.height;\n      }\n    }\n    /**\n     * Toggles the collapse state of the panel.\n     */\n\n  }, {\n    key: \"toggleCollapse\",\n    value: function toggleCollapse() {\n      var _this2 = this;\n\n      this.setState({\n        collapsed: !this.state.collapsed\n      }, function () {\n        _this2._rnd.updateSize({\n          height: _this2.calculateHeight(),\n          width: _this2.state.width\n        });\n      });\n    }\n    /**\n     * Function called while resizing.\n     *\n     * @param evt The MouseEvent event.\n     * @param direction A string discribing where the element was grabed.\n     * @param el The element which gets resized.\n     * @param delta The delta of the resizing.\n     * @param position The position of the resizing.\n     */\n\n  }, {\n    key: \"onResize\",\n    value: function onResize(evt, direction, el, delta, position) {\n      var onResize = this.props.onResize;\n\n      if (_isFunction(onResize)) {\n        onResize(evt, direction, el, delta, position);\n      }\n\n      this.setState({\n        height: el.clientHeight,\n        width: el.clientWidth\n      });\n    }\n    /**\n     * Function called when resizing is started.\n     *\n     * @param evt The MouseEvent event.\n     * @param direction A string discribing where the element was grabed.\n     * @param el The element which gets resized.\n     */\n\n  }, {\n    key: \"onResizeStart\",\n    value: function onResizeStart(evt, direction, el) {\n      var onResizeStart = this.props.onResizeStart;\n\n      if (_isFunction(onResizeStart)) {\n        onResizeStart(evt, direction, el);\n      }\n\n      this.setState({\n        resizing: true\n      });\n    }\n    /**\n     * Function called when resizing is stopped.\n     *\n     * @param evt The MouseEvent event.\n     * @param direction A string discribing where the element was grabed.\n     * @param el The element which gets resized.\n     * @param delta The delta of the resizing.\n     * @param position The position of the resizing.\n     */\n\n  }, {\n    key: \"onResizeStop\",\n    value: function onResizeStop(evt, direction, el, delta, position) {\n      var onResizeStop = this.props.onResizeStop;\n\n      if (_isFunction(onResizeStop)) {\n        onResizeStop(evt, direction, el, delta, position);\n      }\n\n      this.setState({\n        resizing: false\n      });\n    }\n    /**\n     * Called on keyboard `keydown` event. Will be only triggered if pressed key\n     * is `Escape` key and `onEscape` function is provided via props.\n     * @param evt `keydown` event.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * The render function.\n     */\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          id = _this$props.id,\n          className = _this$props.className,\n          children = _this$props.children,\n          title = _this$props.title,\n          resizeOpts = _this$props.resizeOpts,\n          onResize = _this$props.onResize,\n          onResizeStart = _this$props.onResizeStart,\n          onResizeStop = _this$props.onResizeStop,\n          onEscape = _this$props.onEscape,\n          draggable = _this$props.draggable,\n          collapsible = _this$props.collapsible,\n          collapsed = _this$props.collapsed,\n          height = _this$props.height,\n          width = _this$props.width,\n          titleBarHeight = _this$props.titleBarHeight,\n          collapseTooltip = _this$props.collapseTooltip,\n          tools = _this$props.tools,\n          rndOpts = _objectWithoutProperties(_this$props, [\"id\", \"className\", \"children\", \"title\", \"resizeOpts\", \"onResize\", \"onResizeStart\", \"onResizeStop\", \"onEscape\", \"draggable\", \"collapsible\", \"collapsed\", \"height\", \"width\", \"titleBarHeight\", \"collapseTooltip\", \"tools\"]);\n\n      var toolsClone = tools.map(function (tool) {\n        return React.cloneElement(tool);\n      });\n      var finalClassName = className ? \"\".concat(className, \" \").concat(this.className) : this.className;\n      var rndClassName = \"\".concat(finalClassName, \" \").concat(this.state.id);\n      var enableResizing = resizeOpts === true ? undefined : resizeOpts;\n\n      if (collapsible) {\n        toolsClone.unshift(React.createElement(_SimpleButton[\"default\"], {\n          icon: \"compress\",\n          key: \"collapse-tool\",\n          onClick: this.toggleCollapse.bind(this),\n          tooltip: collapseTooltip,\n          size: \"small\"\n        }));\n      }\n\n      var titleBarClassName = draggable ? 'drag-handle ant-modal-header' : 'ant-modal-header';\n      var titleBar = title ? React.createElement(_Titlebar[\"default\"], {\n        className: titleBarClassName,\n        tools: toolsClone,\n        style: {\n          height: this.state.titleBarHeight,\n          cursor: draggable ? 'move' : 'default'\n        }\n      }, title) : null;\n      var defaultWidth = this.state.width;\n      var defaultHeight = this.calculateHeight();\n      var x = rndOpts.x,\n          y = rndOpts.y;\n      var defX = x && _isNumber(x) ? x : _isNumber(defaultWidth) ? window.innerWidth / 2 - defaultWidth / 2 : undefined;\n      var defY = y && _isNumber(y) ? y : _isNumber(defaultHeight) ? window.innerHeight / 2 - defaultHeight / 2 : undefined;\n      return React.createElement(_reactRnd.Rnd, _extends({\n        className: rndClassName,\n        ref: function ref(rnd) {\n          return _this3._rnd = rnd;\n        },\n        \"default\": {\n          x: defX,\n          y: defY,\n          width: defaultWidth,\n          height: defaultHeight\n        },\n        dragHandleClassName: \"drag-handle\",\n        disableDragging: !draggable,\n        enableResizing: enableResizing,\n        resizeHandleClasses: {\n          bottom: 'resize-handle resize-handle-bottom',\n          bottomLeft: 'resize-handle resize-handle-bottom-left',\n          bottomRight: 'resize-handle resize-handle-bottom-right',\n          left: 'resize-handle resize-handle-left',\n          right: 'resize-handle resize-handle-right',\n          top: 'resize-handle resize-handle-top',\n          topLeft: 'resize-handle resize-handle-top-left',\n          topRight: 'resize-handle resize-handle-top-right'\n        },\n        onResize: this.onResize.bind(this),\n        onResizeStart: this.onResizeStart.bind(this),\n        onResizeStop: this.onResizeStop.bind(this)\n      }, rndOpts), titleBar, React.createElement(\"div\", {\n        className: \"body\",\n        tabIndex: 0,\n        style: {\n          cursor: 'default',\n          overflow: 'hidden',\n          height: this.calculateBodyHeight(),\n          transition: this.state.resizing ? '' : 'height 0.25s'\n        }\n      }, children));\n    }\n  }]);\n\n  return Panel;\n}(React.Component);\n\nexports.Panel = Panel;\n\n_defineProperty(Panel, \"defaultProps\", {\n  draggable: false,\n  collapsible: false,\n  collapsed: false,\n  resizeOpts: false,\n  titleBarHeight: 37.5,\n  tools: [],\n  height: 'auto',\n  width: 'auto',\n  collapseTooltip: 'Collapse'\n});\n\nvar _default = Panel;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}