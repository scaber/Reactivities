{"ast":null,"code":"import React,{useRef}from\"react\";import Cropper from\"react-cropper\";import\"cropperjs/dist/cropper.css\";var PhotoWidgetCropper=function PhotoWidgetCropper(_ref){var setImage=_ref.setImage,imagePreview=_ref.imagePreview;var cropper=useRef(null);var cropImage=function cropImage(){if(cropper.current&&typeof cropper.current.getCroppedCanvas()==='undefined'){return;}cropper&&cropper.current&&cropper.current.getCroppedCanvas().toBlob(function(blob){setImage(blob);},'image/jpeg');};return/*#__PURE__*/React.createElement(Cropper,{ref:cropper,src:imagePreview,style:{height:200,width:\"100%\"}// Cropper.js options\n,aspectRatio:1/1,preview:\".img-preview\",guides:false,viewMode:1,dragMode:\"move\",scalable:true,cropBoxMovable:true,cropBoxResizable:true,crop:cropImage});};export default PhotoWidgetCropper;","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/app/common/photoUpload/PhotoWidgetCropper.tsx"],"names":["React","useRef","Cropper","PhotoWidgetCropper","setImage","imagePreview","cropper","cropImage","current","getCroppedCanvas","toBlob","blob","height","width"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,KAA8B,OAA9B,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAO,4BAAP,CAQC,GAAMC,CAAAA,kBAAmC,CAAG,QAAtCA,CAAAA,kBAAsC,MAA6B,IAA3BC,CAAAA,QAA2B,MAA3BA,QAA2B,CAAlBC,YAAkB,MAAlBA,YAAkB,CACvE,GAAMC,CAAAA,OAAO,CAACL,MAAM,CAAU,IAAV,CAApB,CACA,GAAMM,CAAAA,SAAS,CAAE,QAAXA,CAAAA,SAAW,EAAM,CACrB,GAAID,OAAO,CAACE,OAAR,EAAmB,MAAOF,CAAAA,OAAO,CAACE,OAAR,CAAgBC,gBAAhB,EAAP,GAA8C,WAArE,CAAkF,CAChF,OACD,CACDH,OAAO,EAAIA,OAAO,CAACE,OAAnB,EAA8BF,OAAO,CAACE,OAAR,CAAgBC,gBAAhB,GAAmCC,MAAnC,CAA0C,SAACC,IAAD,CACxE,CACEP,QAAQ,CAACO,IAAD,CAAR,CACD,CAH6B,CAG5B,YAH4B,CAA9B,CAID,CARD,CASD,mBACE,oBAAC,OAAD,EACE,GAAG,CAAEL,OADP,CAEE,GAAG,CAAED,YAFP,CAGE,KAAK,CAAE,CAAEO,MAAM,CAAE,GAAV,CAAeC,KAAK,CAAE,MAAtB,CACP;AAJF,CAKE,WAAW,CAAE,EAAI,CALnB,CAME,OAAO,CAAC,cANV,CAOE,MAAM,CAAE,KAPV,CAQE,QAAQ,CAAE,CARZ,CASE,QAAQ,CAAC,MATX,CAUE,QAAQ,CAAE,IAVZ,CAWE,cAAc,CAAE,IAXlB,CAYE,gBAAgB,CAAE,IAZpB,CAaE,IAAI,CAAEN,SAbR,EADF,CAiBD,CA5BA,CA6BD,cAAeJ,CAAAA,kBAAf","sourcesContent":["import React, { useRef } from \"react\";\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\n\r\ninterface IProps {\r\n\r\n  setImage:(file: Blob) => void;\r\n  imagePreview:string;\r\n}\r\n const PhotoWidgetCropper:React.FC<IProps> = ({setImage,imagePreview}) => {\r\n   const cropper=useRef<Cropper>(null);\r\n   const cropImage =() => {\r\n     if (cropper.current && typeof cropper.current.getCroppedCanvas() === 'undefined') {\r\n       return;\r\n     }\r\n     cropper && cropper.current && cropper.current.getCroppedCanvas().toBlob((blob: any) => \r\n     {\r\n       setImage(blob);\r\n     },'image/jpeg');\r\n   }\r\n  return (\r\n    <Cropper\r\n      ref={cropper}\r\n      src={imagePreview}\r\n      style={{ height: 200, width: \"100%\" }}\r\n      // Cropper.js options\r\n      aspectRatio={1 / 1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      dragMode='move'\r\n      scalable={true}\r\n      cropBoxMovable={true}\r\n      cropBoxResizable={true}\r\n      crop={cropImage}\r\n     />\r\n  );\r\n};\r\nexport default PhotoWidgetCropper;"]},"metadata":{},"sourceType":"module"}