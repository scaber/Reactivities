{"ast":null,"code":"export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = parsePatterns.findIndex(function (pattern) {\n        return pattern.test(string);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(string);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js"],"names":["buildMatchFn","args","dirtyString","dirtyOptions","string","String","options","width","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","value","Object","prototype","toString","call","findIndex","pattern","test","findKey","valueCallback","rest","slice","length","object","predicate","key","hasOwnProperty"],"mappings":"AAAA,eAAe,SAASA,YAAT,CAAuBC,IAAvB,EAA6B;AAC1C,SAAO,UAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AAC1C,QAAIC,MAAM,GAAGC,MAAM,CAACH,WAAD,CAAnB;AACA,QAAII,OAAO,GAAGH,YAAY,IAAI,EAA9B;AACA,QAAII,KAAK,GAAGD,OAAO,CAACC,KAApB;AAEA,QAAIC,YAAY,GAAID,KAAK,IAAIN,IAAI,CAACQ,aAAL,CAAmBF,KAAnB,CAAV,IAAwCN,IAAI,CAACQ,aAAL,CAAmBR,IAAI,CAACS,iBAAxB,CAA3D;AACA,QAAIC,WAAW,GAAGP,MAAM,CAACQ,KAAP,CAAaJ,YAAb,CAAlB;;AAEA,QAAI,CAACG,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,QAAIE,aAAa,GAAGF,WAAW,CAAC,CAAD,CAA/B;AAEA,QAAIG,aAAa,GAAIP,KAAK,IAAIN,IAAI,CAACa,aAAL,CAAmBP,KAAnB,CAAV,IAAwCN,IAAI,CAACa,aAAL,CAAmBb,IAAI,CAACc,iBAAxB,CAA5D;AAEA,QAAIC,KAAJ;;AACA,QAAIC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,aAA/B,MAAkD,gBAAtD,EAAwE;AACtEE,MAAAA,KAAK,GAAGF,aAAa,CAACO,SAAd,CAAwB,UAAUC,OAAV,EAAmB;AACjD,eAAOA,OAAO,CAACC,IAAR,CAAanB,MAAb,CAAP;AACD,OAFO,CAAR;AAGD,KAJD,MAIO;AACLY,MAAAA,KAAK,GAAGQ,OAAO,CAACV,aAAD,EAAgB,UAAUQ,OAAV,EAAmB;AAChD,eAAOA,OAAO,CAACC,IAAR,CAAanB,MAAb,CAAP;AACD,OAFc,CAAf;AAGD;;AAEDY,IAAAA,KAAK,GAAGf,IAAI,CAACwB,aAAL,GAAqBxB,IAAI,CAACwB,aAAL,CAAmBT,KAAnB,CAArB,GAAiDA,KAAzD;AACAA,IAAAA,KAAK,GAAGV,OAAO,CAACmB,aAAR,GAAwBnB,OAAO,CAACmB,aAAR,CAAsBT,KAAtB,CAAxB,GAAuDA,KAA/D;AAEA,WAAO;AACLA,MAAAA,KAAK,EAAEA,KADF;AAELU,MAAAA,IAAI,EAAEtB,MAAM,CAACuB,KAAP,CAAad,aAAa,CAACe,MAA3B;AAFD,KAAP;AAID,GAjCD;AAkCD;;AAED,SAASJ,OAAT,CAAkBK,MAAlB,EAA0BC,SAA1B,EAAqC;AACnC,OAAK,IAAIC,GAAT,IAAgBF,MAAhB,EAAwB;AACtB,QAAIA,MAAM,CAACG,cAAP,CAAsBD,GAAtB,KAA8BD,SAAS,CAACD,MAAM,CAACE,GAAD,CAAP,CAA3C,EAA0D;AACxD,aAAOA,GAAP;AACD;AACF;AACF","sourcesContent":["export default function buildMatchFn (args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString)\n    var options = dirtyOptions || {}\n    var width = options.width\n\n    var matchPattern = (width && args.matchPatterns[width]) || args.matchPatterns[args.defaultMatchWidth]\n    var matchResult = string.match(matchPattern)\n\n    if (!matchResult) {\n      return null\n    }\n    var matchedString = matchResult[0]\n\n    var parsePatterns = (width && args.parsePatterns[width]) || args.parsePatterns[args.defaultParseWidth]\n\n    var value\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = parsePatterns.findIndex(function (pattern) {\n        return pattern.test(string)\n      })\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(string)\n      })\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value\n    value = options.valueCallback ? options.valueCallback(value) : value\n\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    }\n  }\n}\n\nfunction findKey (object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}