{"ast":null,"code":"import toDate from '../toDate/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport compareAsc from '../compareAsc/index.js';\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of full days\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 2, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n*/\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = toDate(dirtyDateLeft, dirtyOptions);\n  var dateRight = toDate(dirtyDateRight, dirtyOptions);\n  var sign = compareAsc(dateLeft, dateRight, dirtyOptions);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight, dirtyOptions));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = compareAsc(dateLeft, dateRight, dirtyOptions) === -sign;\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/differenceInDays/index.js"],"names":["toDate","differenceInCalendarDays","compareAsc","differenceInDays","dirtyDateLeft","dirtyDateRight","dirtyOptions","arguments","length","TypeError","dateLeft","dateRight","sign","difference","Math","abs","setDate","getDate","isLastDayNotFull","result"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,wBAAP,MAAqC,sCAArC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,eAAe,SAASC,gBAAT,CAA2BC,aAA3B,EAA0CC,cAA1C,EAA0DC,YAA1D,EAAwE;AACrF,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,QAAQ,GAAGV,MAAM,CAACI,aAAD,EAAgBE,YAAhB,CAArB;AACA,MAAIK,SAAS,GAAGX,MAAM,CAACK,cAAD,EAAiBC,YAAjB,CAAtB;AAEA,MAAIM,IAAI,GAAGV,UAAU,CAACQ,QAAD,EAAWC,SAAX,EAAsBL,YAAtB,CAArB;AACA,MAAIO,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASd,wBAAwB,CAACS,QAAD,EAAWC,SAAX,EAAsBL,YAAtB,CAAjC,CAAjB;AAEAI,EAAAA,QAAQ,CAACM,OAAT,CAAiBN,QAAQ,CAACO,OAAT,KAAqBL,IAAI,GAAGC,UAA7C,EAXqF,CAarF;AACA;;AACA,MAAIK,gBAAgB,GAAGhB,UAAU,CAACQ,QAAD,EAAWC,SAAX,EAAsBL,YAAtB,CAAV,KAAkD,CAACM,IAA1E;AACA,MAAIO,MAAM,GAAGP,IAAI,IAAIC,UAAU,GAAGK,gBAAjB,CAAjB,CAhBqF,CAiBrF;;AACA,SAAOC,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD","sourcesContent":["import toDate from '../toDate/index.js'\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js'\nimport compareAsc from '../compareAsc/index.js'\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of full days\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 2, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n*/\nexport default function differenceInDays (dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var dateLeft = toDate(dirtyDateLeft, dirtyOptions)\n  var dateRight = toDate(dirtyDateRight, dirtyOptions)\n\n  var sign = compareAsc(dateLeft, dateRight, dirtyOptions)\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight, dirtyOptions))\n\n  dateLeft.setDate(dateLeft.getDate() - sign * difference)\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  var isLastDayNotFull = compareAsc(dateLeft, dateRight, dirtyOptions) === -sign\n  var result = sign * (difference - isLastDayNotFull)\n  // Prevent negative zero\n  return result === 0 ? 0 : result\n}\n"]},"metadata":{},"sourceType":"module"}