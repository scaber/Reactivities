{"ast":null,"code":"export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\n\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\n\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI / 2; // ellipoid pj_set_ell.c\n\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\n\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\n\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10; // you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI / 4;\nexport var TWO_PI = Math.PI * 2; // SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\n\nexport var SPI = 3.14159265359;","map":null,"metadata":{},"sourceType":"module"}