{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail } from \"./Utils\";\n/** @private */\n\nvar WebSocketTransport =\n/** @class */\nfunction () {\n  function WebSocketTransport(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor) {\n    this.logger = logger;\n    this.accessTokenFactory = accessTokenFactory;\n    this.logMessageContent = logMessageContent;\n    this.webSocketConstructor = webSocketConstructor;\n    this.httpClient = httpClient;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  WebSocketTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\n            if (!this.accessTokenFactory) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n\n            if (token) {\n              url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (\"access_token=\" + encodeURIComponent(token));\n            }\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              url = url.replace(/^http/, \"ws\");\n              var webSocket;\n\n              var cookies = _this.httpClient.getCookieString(url);\n\n              if (typeof window === \"undefined\" && cookies) {\n                // Only pass cookies when in non-browser environments\n                webSocket = new _this.webSocketConstructor(url, undefined, {\n                  headers: {\n                    Cookie: \"\" + cookies\n                  }\n                });\n              }\n\n              if (!webSocket) {\n                // Chrome is not happy with passing 'undefined' as protocol\n                webSocket = new _this.webSocketConstructor(url);\n              }\n\n              if (transferFormat === TransferFormat.Binary) {\n                webSocket.binaryType = \"arraybuffer\";\n              } // tslint:disable-next-line:variable-name\n\n\n              webSocket.onopen = function (_event) {\n                _this.logger.log(LogLevel.Information, \"WebSocket connected to \" + url + \".\");\n\n                _this.webSocket = webSocket;\n                resolve();\n              };\n\n              webSocket.onerror = function (event) {\n                var error = null; // ErrorEvent is a browser only type we need to check if the type exists before using it\n\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n                  error = event.error;\n                }\n\n                reject(error);\n              };\n\n              webSocket.onmessage = function (message) {\n                _this.logger.log(LogLevel.Trace, \"(WebSockets transport) data received. \" + getDataDetail(message.data, _this.logMessageContent) + \".\");\n\n                if (_this.onreceive) {\n                  _this.onreceive(message.data);\n                }\n              };\n\n              webSocket.onclose = function (event) {\n                return _this.close(event);\n              };\n            })];\n        }\n      });\n    });\n  };\n\n  WebSocketTransport.prototype.send = function (data) {\n    if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\n      this.logger.log(LogLevel.Trace, \"(WebSockets transport) sending data. \" + getDataDetail(data, this.logMessageContent) + \".\");\n      this.webSocket.send(data);\n      return Promise.resolve();\n    }\n\n    return Promise.reject(\"WebSocket is not in the OPEN state\");\n  };\n\n  WebSocketTransport.prototype.stop = function () {\n    if (this.webSocket) {\n      // Clear websocket handlers because we are considering the socket closed now\n      this.webSocket.onclose = function () {};\n\n      this.webSocket.onmessage = function () {};\n\n      this.webSocket.onerror = function () {};\n\n      this.webSocket.close();\n      this.webSocket = undefined; // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n      // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n\n      this.close(undefined);\n    }\n\n    return Promise.resolve();\n  };\n\n  WebSocketTransport.prototype.close = function (event) {\n    // webSocket will be null if the transport did not start successfully\n    this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n\n    if (this.onclose) {\n      if (event && (event.wasClean === false || event.code !== 1000)) {\n        this.onclose(new Error(\"WebSocket closed with status code: \" + event.code + \" (\" + event.reason + \").\"));\n      } else {\n        this.onclose();\n      }\n    }\n  };\n\n  return WebSocketTransport;\n}();\n\nexport { WebSocketTransport };","map":{"version":3,"sources":["../../src/WebSocketTransport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private readonly httpClient: HttpClient;\r\n    private webSocket?: WebSocket;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n        this.httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this.httpClient.getCookieString(url);\r\n\r\n            if (typeof window === \"undefined\" && cookies) {\r\n                // Only pass cookies when in non-browser environments\r\n                webSocket = new this.webSocketConstructor(url, undefined, {\r\n                    headers: {\r\n                        Cookie: `${cookies}`,\r\n                    },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => this.close(event);\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (event && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}