{"ast":null,"code":"import axios from \"axios\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\naxios.defaults.baseURL = \"http://localhost:5000/api\";\naxios.interceptors.request.use(config => {\n  const token = window.localStorage.getItem(\"jwt\");\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(undefined, error => {\n  if (error.message === \"Network Error\" && !error.response) {\n    toast.error(\"Network error - make sure API is running!\");\n  }\n\n  const {\n    status,\n    data,\n    config\n  } = error.response;\n\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n\n  if (status === 400 && config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\n    history.push(\"/notfound\");\n  }\n\n  if (status === 500) {\n    toast.error(\"Server error - check the terminal for more info!\");\n  }\n\n  throw error.response;\n});\n\nconst responseBody = response => response.data;\n\nconst sleep = ms => response => new Promise(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n  get: url => axios.get(url).then(sleep(1000)).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n  del: url => axios.delete(url).then(sleep(1000)).then(responseBody),\n  postForm: (url, file) => {\n    let formData = new FormData();\n    formData.append(\"File\", file);\n    return axios.post(url, formData, {\n      headers: {\n        \"Conteent-type\": \"multipart/form-data\"\n      }\n    }).then(responseBody);\n  }\n};\nconst Activities = {\n  list: () => requests.get(\"/activities\"),\n  details: id => requests.get(`/activities/${id}`),\n  create: activity => requests.post(\"/activities\", activity),\n  update: activity => requests.put(`/activities/${activity.id}`, activity),\n  delete: id => requests.del(`/activities/${id}`),\n  attend: id => requests.post(`/activities/${id}/attend`, {}),\n  unattend: id => requests.del(`/activities/${id}/attend`)\n};\nconst User = {\n  current: () => requests.get(\"/user\"),\n  login: user => requests.post(`/user/login`, user),\n  register: user => requests.post(`/user/register`, user)\n};\nconst Profiles = {\n  get: userName => requests.get(`/profiles/${userName}`),\n  uploadPhoto: photo => requests.postForm(`/photos`, photo),\n  setMainPhoto: id => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: id => requests.del(`/photos/${id}`),\n  updateProfile: profile => requests.put(`/profiles`, profile),\n  follow: username => requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: username => requests.del(`/profiles/${username}/follow`),\n  listFollowings: (username, predicate) => requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username, predicate) => requests.get(`/profiles/${username}/activities?predicate=${predicate}`)\n};\nexport default {\n  Activities,\n  User,\n  Profiles\n};","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/app/api/agent.ts"],"names":["axios","history","toast","defaults","baseURL","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","status","data","push","method","errors","hasOwnProperty","responseBody","sleep","ms","resolve","setTimeout","requests","get","url","then","post","body","put","del","delete","postForm","file","formData","FormData","append","Activities","list","details","id","create","activity","update","attend","unattend","User","current","login","user","register","Profiles","userName","uploadPhoto","photo","setMainPhoto","deletePhoto","updateProfile","profile","follow","username","unfollow","listFollowings","predicate","listActivities"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { IActivity } from \"../models/activity\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\nimport { IUser, IUserFormValues } from \"../models/user\";\nimport { IProfile, IPhoto } from \"../models/profile\";\n\naxios.defaults.baseURL = \"http://localhost:5000/api\";\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem(\"jwt\");\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (error.message === \"Network Error\" && !error.response) {\n    toast.error(\"Network error - make sure API is running!\");\n  }\n  const { status, data, config } = error.response;\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n  if (\n    status === 400 &&\n    config.method === \"get\" &&\n    data.errors.hasOwnProperty(\"id\")\n  ) {\n    history.push(\"/notfound\");\n  }\n  if (status === 500) {\n    toast.error(\"Server error - check the terminal for more info!\");\n  }\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst sleep = (ms: number) => (response: AxiosResponse) =>\n  new Promise<AxiosResponse>((resolve) =>\n    setTimeout(() => resolve(response), ms)\n  );\n\nconst requests = {\n  get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\n  post: (url: string, body: {}) =>\n    axios.post(url, body).then(sleep(1000)).then(responseBody),\n  put: (url: string, body: {}) =>\n    axios.put(url, body).then(sleep(1000)).then(responseBody),\n  del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append(\"File\", file);\n    return axios\n      .post(url, formData, {\n        headers: { \"Conteent-type\": \"multipart/form-data\" },\n      })\n      .then(responseBody);\n  },\n};\n\nconst Activities = {\n  list: (): Promise<IActivity[]> => requests.get(\"/activities\"),\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.del(`/activities/${id}`),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get(\"/user\"),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/login`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/register`, user),\n};\n\nconst Profiles = {\n  get: (userName: string): Promise<IProfile> =>\n    requests.get(`/profiles/${userName}`),\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\n    requests.postForm(`/photos`, photo),\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n  updateProfile: (profile: Partial<IProfile>) =>\n    requests.put(`/profiles`, profile),\n  follow: (username: string) =>\n    requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`)\n};\n\nexport default {\n  Activities,\n  User,\n  Profiles,\n};\n"]},"metadata":{},"sourceType":"module"}