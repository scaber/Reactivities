{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"../context/context\";\nimport { CellComp } from \"./cellComp\";\nimport { _ } from \"../utils\";\n\nvar AutoHeightCalculator =\n/** @class */\nfunction () {\n  function AutoHeightCalculator() {}\n\n  AutoHeightCalculator.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  AutoHeightCalculator.prototype.getPreferredHeightForRow = function (rowNode) {\n    var _this = this;\n\n    if (!this.eDummyContainer) {\n      this.eDummyContainer = document.createElement('div'); // so any styles on row also get applied in dummy, otherwise\n      // the content in dummy may differ to the real\n\n      _.addCssClass(this.eDummyContainer, 'ag-row ag-row-no-focus');\n    } // we put the dummy into the body container, so it will inherit all the\n    // css styles that the real cells are inheriting\n\n\n    var eBodyContainer = this.gridPanel.getCenterContainer();\n    eBodyContainer.appendChild(this.eDummyContainer);\n    var cellComps = [];\n    var autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();\n    var visibleAutoRowHeightCols = autoRowHeightCols.filter(function (col) {\n      return col.isVisible();\n    });\n    visibleAutoRowHeightCols.forEach(function (col) {\n      var cellComp = new CellComp(_this.$scope, _this.beans, col, rowNode, null, true, false);\n      cellComp.setParentRow(_this.eDummyContainer);\n      cellComps.push(cellComp);\n    });\n    var template = cellComps.map(function (cellComp) {\n      return cellComp.getCreateTemplate();\n    }).join(' ');\n    this.eDummyContainer.innerHTML = template; // this gets any cellComps that are using components to put the components in\n\n    cellComps.forEach(function (cellComp) {\n      return cellComp.afterAttached();\n    }); // we should be able to just take the height of the row at this point, however\n    // the row isn't expanding to cover the cell heights, i don't know why, i couldn't\n    // figure it out so instead looking at the individual cells instead\n\n    var maxCellHeight = 0;\n\n    for (var i = 0; i < this.eDummyContainer.children.length; i++) {\n      var child = this.eDummyContainer.children[i];\n\n      if (child.offsetHeight > maxCellHeight) {\n        maxCellHeight = child.offsetHeight;\n      }\n    } // we are finished with the dummy container, so get rid of it\n\n\n    eBodyContainer.removeChild(this.eDummyContainer);\n    cellComps.forEach(function (cellComp) {\n      // dunno why we need to detach first, doing it here to be consistent with code in RowComp\n      cellComp.detach();\n      cellComp.destroy();\n    }); // in case anything left over from last time\n\n    _.clearElement(this.eDummyContainer);\n\n    return maxCellHeight;\n  };\n\n  __decorate([Autowired('beans')], AutoHeightCalculator.prototype, \"beans\", void 0);\n\n  __decorate([Autowired(\"$scope\")], AutoHeightCalculator.prototype, \"$scope\", void 0);\n\n  __decorate([Autowired(\"columnController\")], AutoHeightCalculator.prototype, \"columnController\", void 0);\n\n  AutoHeightCalculator = __decorate([Bean('autoHeightCalculator')], AutoHeightCalculator);\n  return AutoHeightCalculator;\n}();\n\nexport { AutoHeightCalculator };","map":null,"metadata":{},"sourceType":"module"}