{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Bean, Autowired } from './context/context';\nimport { _ } from './utils';\nvar MAT_GRID_SIZE = 8;\nvar FRESH_GRID_SIZE = 4;\nvar BALHAM_GRID_SIZE = 4;\nvar ALPINE_GRID_SIZE = 6;\nvar HARD_CODED_SIZES = {\n  'ag-theme-material': {\n    headerHeight: MAT_GRID_SIZE * 7,\n    virtualItemHeight: MAT_GRID_SIZE * 5,\n    rowHeight: MAT_GRID_SIZE * 6,\n    chartMenuPanelWidth: 220\n  },\n  'ag-theme-classic': {\n    headerHeight: 25,\n    virtualItemHeight: FRESH_GRID_SIZE * 5,\n    rowHeight: 25,\n    chartMenuPanelWidth: 220\n  },\n  'ag-theme-balham': {\n    headerHeight: BALHAM_GRID_SIZE * 8,\n    virtualItemHeight: BALHAM_GRID_SIZE * 7,\n    rowHeight: BALHAM_GRID_SIZE * 7,\n    chartMenuPanelWidth: 220\n  },\n  'ag-theme-alpine': {\n    headerHeight: ALPINE_GRID_SIZE * 8,\n    virtualItemHeight: ALPINE_GRID_SIZE * 5,\n    rowHeight: ALPINE_GRID_SIZE * 7,\n    chartMenuPanelWidth: 240\n  }\n};\n/**\n * this object contains a list of Sass variables and an array\n * of CSS styles required to get the correct value.\n * eg. $virtual-item-height requires a structure, so we can get its height.\n * <div class=\"ag-theme-balham\">\n *     <div class=\"ag-virtual-list-container\">\n *         <div class=\"ag-virtual-list-item\"></div>\n *     </div>\n */\n\nvar SASS_PROPERTY_BUILDER = {\n  headerHeight: ['ag-header-row'],\n  virtualItemHeight: ['ag-virtual-list-container', 'ag-virtual-list-item'],\n  rowHeight: ['ag-row'],\n  chartMenuPanelWidth: ['ag-chart-docked-container']\n};\nvar CALCULATED_SIZES = {};\n\nvar Environment =\n/** @class */\nfunction () {\n  function Environment() {}\n\n  Environment.prototype.getSassVariable = function (theme, key) {\n    var useTheme = 'ag-theme-' + (theme.match('material') ? 'material' : theme.match('balham') ? 'balham' : theme.match('alpine') ? 'alpine' : 'classic');\n    var defaultValue = HARD_CODED_SIZES[useTheme][key];\n    var calculatedValue = 0;\n\n    if (!CALCULATED_SIZES[theme]) {\n      CALCULATED_SIZES[theme] = {};\n    }\n\n    if (CALCULATED_SIZES[theme][key]) {\n      return CALCULATED_SIZES[theme][key];\n    }\n\n    if (SASS_PROPERTY_BUILDER[key]) {\n      var classList = SASS_PROPERTY_BUILDER[key];\n      var div = document.createElement('div');\n      var el = classList.reduce(function (el, currentClass, idx) {\n        if (idx === 0) {\n          _.addCssClass(el, theme);\n        }\n\n        var div = document.createElement('div');\n\n        _.addCssClass(div, currentClass);\n\n        el.appendChild(div);\n        return div;\n      }, div);\n\n      if (document.body) {\n        document.body.appendChild(div);\n        calculatedValue = parseInt(window.getComputedStyle(el).height, 10);\n        document.body.removeChild(div);\n      }\n    }\n\n    CALCULATED_SIZES[theme][key] = calculatedValue || defaultValue;\n    return CALCULATED_SIZES[theme][key];\n  };\n\n  Environment.prototype.isThemeDark = function () {\n    var theme = this.getTheme().theme;\n    return !!theme && theme.indexOf('dark') >= 0;\n  };\n\n  Environment.prototype.useNativeCheckboxes = function () {\n    var theme = this.getTheme().theme;\n    return !!theme && theme.indexOf('alpine') >= 0;\n  };\n\n  Environment.prototype.chartMenuPanelWidth = function () {\n    return HARD_CODED_SIZES[this.getTheme().themeFamily].chartMenuPanelWidth;\n  };\n\n  Environment.prototype.getTheme = function () {\n    var reg = /\\bag-(fresh|dark|blue|material|bootstrap|(?:theme-([\\w\\-]*)))\\b/;\n    var el = this.eGridDiv;\n    var themeMatch;\n\n    while (el) {\n      themeMatch = reg.exec(el.className);\n\n      if (!themeMatch) {\n        el = el.parentElement;\n      } else {\n        break;\n      }\n    }\n\n    if (!themeMatch) {\n      return {};\n    }\n\n    var theme = themeMatch[0];\n    var usingOldTheme = themeMatch[2] === undefined;\n\n    if (usingOldTheme) {\n      var newTheme_1 = theme.replace('ag-', 'ag-theme-');\n\n      _.doOnce(function () {\n        return console.warn(\"ag-Grid: As of v19 old theme are no longer provided. Please replace \" + theme + \" with \" + newTheme_1 + \".\");\n      }, 'using-old-theme');\n    }\n\n    return {\n      theme: theme,\n      el: el,\n      themeFamily: theme.replace(/-dark$/, '')\n    };\n  };\n\n  __decorate([Autowired('eGridDiv')], Environment.prototype, \"eGridDiv\", void 0);\n\n  Environment = __decorate([Bean('environment')], Environment);\n  return Environment;\n}();\n\nexport { Environment };","map":null,"metadata":{},"sourceType":"module"}