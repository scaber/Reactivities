{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { _ } from \"../utils\";\n\nvar SelectableService =\n/** @class */\nfunction () {\n  function SelectableService() {}\n\n  SelectableService.prototype.init = function () {\n    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n  };\n\n  SelectableService.prototype.updateSelectableAfterGrouping = function (rowNode) {\n    if (this.isRowSelectableFunc) {\n      var nextChildrenFunc = function (rowNode) {\n        return rowNode.childrenAfterGroup;\n      };\n\n      this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);\n    }\n  };\n\n  SelectableService.prototype.updateSelectableAfterFiltering = function (rowNode) {\n    if (this.isRowSelectableFunc) {\n      var nextChildrenFunc = function (rowNode) {\n        return rowNode.childrenAfterFilter;\n      };\n\n      this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);\n    }\n  };\n\n  SelectableService.prototype.recurseDown = function (children, nextChildrenFunc) {\n    var _this = this;\n\n    children.forEach(function (child) {\n      if (!child.group) {\n        return;\n      } // only interested in groups\n\n\n      if (child.hasChildren()) {\n        _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);\n      }\n\n      var rowSelectable;\n\n      if (_this.groupSelectsChildren) {\n        // have this group selectable if at least one direct child is selectable\n        var firstSelectable = _.find(nextChildrenFunc(child), 'selectable', true);\n\n        rowSelectable = _.exists(firstSelectable);\n      } else {\n        // directly retrieve selectable value from user callback\n        rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;\n      }\n\n      child.setRowSelectable(rowSelectable);\n    });\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], SelectableService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([PostConstruct], SelectableService.prototype, \"init\", null);\n\n  SelectableService = __decorate([Bean('selectableService')], SelectableService);\n  return SelectableService;\n}();\n\nexport { SelectableService };","map":null,"metadata":{},"sourceType":"module"}