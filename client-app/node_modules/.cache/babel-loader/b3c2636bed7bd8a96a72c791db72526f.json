{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _activeElement = _interopRequireDefault(require(\"dom-helpers/activeElement\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _deprecated = _interopRequireDefault(require(\"prop-types-extra/lib/deprecated\"));\n\nvar _uncontrollable = _interopRequireDefault(require(\"uncontrollable\"));\n\nvar _Widget = _interopRequireDefault(require(\"./Widget\"));\n\nvar _WidgetPicker = _interopRequireDefault(require(\"./WidgetPicker\"));\n\nvar _Popup = _interopRequireDefault(require(\"./Popup\"));\n\nvar _Button = _interopRequireDefault(require(\"./Button\"));\n\nvar _Calendar = _interopRequireDefault(require(\"./Calendar\"));\n\nvar _DateTimePickerInput = _interopRequireDefault(require(\"./DateTimePickerInput\"));\n\nvar _Select = _interopRequireDefault(require(\"./Select\"));\n\nvar _TimeList = _interopRequireDefault(require(\"./TimeList\"));\n\nvar _messages = require(\"./messages\");\n\nvar Props = _interopRequireWildcard(require(\"./util/Props\"));\n\nvar CustomPropTypes = _interopRequireWildcard(require(\"./util/PropTypes\"));\n\nvar _focusManager = _interopRequireDefault(require(\"./util/focusManager\"));\n\nvar _scrollManager = _interopRequireDefault(require(\"./util/scrollManager\"));\n\nvar _interaction = require(\"./util/interaction\");\n\nvar _dates = _interopRequireDefault(require(\"./util/dates\"));\n\nvar _localizers = require(\"./util/localizers\");\n\nvar _widgetHelpers = require(\"./util/widgetHelpers\");\n\nvar _Icon = require(\"./Icon\");\n\nvar _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3, _temp;\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nfunction _initializerWarningHelper(descriptor, context) {\n  throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.');\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar NEXT_VIEW = {\n  date: 'time',\n  time: 'date'\n};\n\nvar isBothOrNeither = function isBothOrNeither(a, b) {\n  return a && b || !a && !b;\n};\n\nvar propTypes = _extends({}, _Calendar.default.ControlledComponent.propTypes, {\n  /**\n   * @example ['valuePicker', [ ['new Date()', null] ]]\n   */\n  value: _propTypes.default.instanceOf(Date),\n\n  /**\n   * @example ['onChangePicker', [ ['new Date()', null] ]]\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * @type {(false | 'time' | 'date')}\n   * @example ['openDateTime']\n   */\n  open: _propTypes.default.oneOf([false, 'time', 'date']),\n  onToggle: _propTypes.default.func,\n\n  /**\n   * Default current date at which the calendar opens. If none is provided, opens at today's date or the `value` date (if any).\n   */\n  currentDate: _propTypes.default.instanceOf(Date),\n\n  /**\n   * Change event Handler that is called when the currentDate is changed. The handler is called with the currentDate object.\n   */\n  onCurrentDateChange: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n\n  /**\n   * The minimum Date that can be selected. Min only limits selection, it doesn't constrain the date values that\n   * can be typed or pasted into the widget. If you need this behavior you can constrain values via\n   * the `onChange` handler.\n   *\n   * @example ['prop', ['min', 'new Date()']]\n   */\n  min: _propTypes.default.instanceOf(Date),\n\n  /**\n   * The maximum Date that can be selected. Max only limits selection, it doesn't constrain the date values that\n   * can be typed or pasted into the widget. If you need this behavior you can constrain values via\n   * the `onChange` handler.\n   *\n   * @example ['prop', ['max', 'new Date()']]\n   */\n  max: _propTypes.default.instanceOf(Date),\n\n  /**\n   * The amount of minutes between each entry in the time list.\n   *\n   * @example ['prop', { step: 90 }]\n   */\n  step: _propTypes.default.number,\n  culture: _propTypes.default.string,\n\n  /**\n   * A formatter used to display the date value. For more information about formats\n   * visit the [Localization page](/localization)\n   *\n   * @example ['dateFormat', ['format', \"{ raw: 'MMM dd, yyyy' }\", null, { defaultValue: 'new Date()', time: 'false' }]]\n   */\n  format: CustomPropTypes.dateFormat,\n\n  /**\n   * A formatter used by the time dropdown to render times. For more information about formats visit\n   * the [Localization page](/localization).\n   *\n   * @example ['dateFormat', ['timeFormat', \"{ time: 'medium' }\", null, { date: 'false', open: '\"time\"' }]]\n   */\n  timeFormat: CustomPropTypes.dateFormat,\n\n  /**\n   * A formatter to be used while the date input has focus. Useful for showing a simpler format for inputing.\n   * For more information about formats visit the [Localization page](/localization)\n   *\n   * @example ['dateFormat', ['editFormat', \"{ date: 'short' }\", null, { defaultValue: 'new Date()', format: \"{ raw: 'MMM dd, yyyy' }\", time: 'false' }]]\n   */\n  editFormat: CustomPropTypes.dateFormat,\n\n  /**\n   * Enable the calendar component of the picker.\n   */\n  date: _propTypes.default.bool,\n\n  /**\n   * Enable the time list component of the picker.\n   */\n  time: _propTypes.default.bool,\n\n  /** @ignore */\n  calendar: (0, _deprecated.default)(_propTypes.default.bool, 'Use `date` instead'),\n\n  /**\n   * A customize the rendering of times but providing a custom component.\n   */\n  timeComponent: CustomPropTypes.elementType,\n\n  /** Specify the element used to render the calendar dropdown icon. */\n  dateIcon: _propTypes.default.node,\n\n  /** Specify the element used to render the time list dropdown icon. */\n  timeIcon: _propTypes.default.node,\n  dropUp: _propTypes.default.bool,\n  popupTransition: CustomPropTypes.elementType,\n  placeholder: _propTypes.default.string,\n  name: _propTypes.default.string,\n  autoFocus: _propTypes.default.bool,\n\n  /**\n   * @example ['disabled', ['new Date()']]\n   */\n  disabled: CustomPropTypes.disabled,\n\n  /**\n   * @example ['readOnly', ['new Date()']]\n   */\n  readOnly: CustomPropTypes.disabled,\n\n  /**\n   * Determines how the widget parses the typed date string into a Date object. You can provide an array of formats to try,\n   * or provide a function that returns a date to handle parsing yourself. When `parse` is unspecified and\n   * the `format` prop is a `string` parse will automatically use that format as its default.\n   */\n  parse: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.string, _propTypes.default.func]),\n\n  /** @ignore */\n  tabIndex: _propTypes.default.any,\n\n  /** @ignore */\n  'aria-labelledby': _propTypes.default.string,\n\n  /** @ignore */\n  'aria-describedby': _propTypes.default.string,\n  onKeyDown: _propTypes.default.func,\n  onKeyPress: _propTypes.default.func,\n  onBlur: _propTypes.default.func,\n  onFocus: _propTypes.default.func,\n\n  /** Adds a css class to the input container element. */\n  containerClassName: _propTypes.default.string,\n  inputProps: _propTypes.default.object,\n  isRtl: _propTypes.default.bool,\n  messages: _propTypes.default.shape({\n    dateButton: _propTypes.default.string,\n    timeButton: _propTypes.default.string\n  })\n  /**\n   * ---\n   * subtitle: DatePicker, TimePicker\n   * localized: true\n   * shortcuts:\n   *   - { key: alt + down arrow, label:  open calendar or time }\n   *   - { key: alt + up arrow, label: close calendar or time }\n   *   - { key: down arrow, label: move focus to next item }\n   *   - { key: up arrow, label: move focus to previous item }\n   *   - { key: home, label: move focus to first item }\n   *   - { key: end, label: move focus to last item }\n   *   - { key: enter, label: select focused item }\n   *   - { key: any key, label: search list for item starting with key }\n   * ---\n   *\n   * @public\n   * @extends Calendar\n   */\n\n});\n\nvar DateTimePicker = (0, _reactLifecyclesCompat.polyfill)(_class = (_class2 = (_temp = _class3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DateTimePicker, _React$Component);\n\n  function DateTimePicker() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _initializerDefineProperty(_this, \"handleChange\", _descriptor, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _initializerDefineProperty(_this, \"handleKeyDown\", _descriptor2, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _initializerDefineProperty(_this, \"handleKeyPress\", _descriptor3, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _initializerDefineProperty(_this, \"handleDateSelect\", _descriptor4, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _initializerDefineProperty(_this, \"handleTimeSelect\", _descriptor5, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _initializerDefineProperty(_this, \"handleCalendarClick\", _descriptor6, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _initializerDefineProperty(_this, \"handleTimeClick\", _descriptor7, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.attachCalRef = function (ref) {\n      return _this.calRef = ref;\n    };\n\n    _this.attachTimeRef = function (ref) {\n      return _this.timeRef = ref;\n    };\n\n    _this.attachInputRef = function (ref) {\n      return _this.inputRef = ref;\n    };\n\n    _this.parse = function (string) {\n      var _this$props = _this.props,\n          parse = _this$props.parse,\n          culture = _this$props.culture,\n          editFormat = _this$props.editFormat;\n      var format = getFormat(_this.props, true);\n      !(parse || format || editFormat) ? process.env.NODE_ENV !== \"production\" ? (0, _invariant.default)(false, 'React Widgets: there are no specified `parse` formats provided and the `format` prop is a function. ' + 'the DateTimePicker is unable to parse `%s` into a dateTime, ' + 'please provide either a parse function or localizer compatible `format` prop', string) : invariant(false) : void 0;\n      var date;\n      var formats = [format, editFormat];\n\n      if (typeof parse == 'function') {\n        date = parse(string, culture);\n        if (date) return date;\n      } else {\n        // parse is a string format or array of string formats\n        formats = formats.concat(parse).filter(Boolean);\n      }\n\n      for (var i = 0; i < formats.length; i++) {\n        date = _localizers.date.parse(string, formats[i], culture);\n        if (date) return date;\n      }\n\n      return null;\n    };\n\n    _this.inputId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_input');\n    _this.dateId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_date');\n    _this.listId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_listbox');\n    _this.activeCalendarId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_calendar_active_cell');\n    _this.activeOptionId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_listbox_active_option');\n    _this.handleScroll = (0, _scrollManager.default)(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.focusManager = (0, _focusManager.default)(_assertThisInitialized(_assertThisInitialized(_this)), {\n      didHandle: function didHandle(focused) {\n        if (!focused) _this.close();\n      }\n    });\n    _this.state = {\n      focused: false,\n      messages: (0, _messages.getMessages)(_this.props.messages)\n    };\n    return _this;\n  }\n\n  DateTimePicker.getDerivedStateFromProps = function getDerivedStateFromProps(_ref) {\n    var messages = _ref.messages;\n    return {\n      messages: (0, _messages.getMessages)(messages)\n    };\n  };\n\n  var _proto = DateTimePicker.prototype;\n\n  _proto.renderInput = function renderInput(owns) {\n    var _this$props2 = this.props,\n        open = _this$props2.open,\n        value = _this$props2.value,\n        editFormat = _this$props2.editFormat,\n        culture = _this$props2.culture,\n        placeholder = _this$props2.placeholder,\n        disabled = _this$props2.disabled,\n        readOnly = _this$props2.readOnly,\n        name = _this$props2.name,\n        tabIndex = _this$props2.tabIndex,\n        autoFocus = _this$props2.autoFocus,\n        inputProps = _this$props2.inputProps,\n        ariaLabelledby = _this$props2['aria-labelledby'],\n        ariaDescribedby = _this$props2['aria-describedby'];\n    var focused = this.state.focused;\n    var inputReadOnly = inputProps ? inputProps.readOnly : null;\n    var activeId = null;\n\n    if (open === 'time') {\n      activeId = this.activeOptionId;\n    } else if (open === 'date') {\n      activeId = this.activeCalendarId;\n    }\n\n    return _react.default.createElement(_DateTimePickerInput.default, _extends({}, inputProps, {\n      id: this.inputId,\n      ref: this.attachInputRef,\n      role: \"combobox\",\n      name: name,\n      value: value,\n      tabIndex: tabIndex,\n      autoFocus: autoFocus,\n      placeholder: placeholder,\n      disabled: disabled,\n      readOnly: inputReadOnly != null ? inputReadOnly : readOnly,\n      format: getFormat(this.props),\n      editFormat: editFormat,\n      editing: focused,\n      culture: culture,\n      parse: this.parse,\n      onChange: this.handleChange,\n      \"aria-haspopup\": true,\n      \"aria-activedescendant\": activeId,\n      \"aria-labelledby\": ariaLabelledby,\n      \"aria-describedby\": ariaDescribedby,\n      \"aria-expanded\": !!open,\n      \"aria-owns\": owns\n    }));\n  };\n\n  _proto.renderButtons = function renderButtons() {\n    var _this$props3 = this.props,\n        date = _this$props3.date,\n        dateIcon = _this$props3.dateIcon,\n        time = _this$props3.time,\n        timeIcon = _this$props3.timeIcon,\n        disabled = _this$props3.disabled,\n        readOnly = _this$props3.readOnly;\n\n    if (!date && !time) {\n      return null;\n    }\n\n    var messages = this.state.messages;\n    return _react.default.createElement(_Select.default, {\n      bordered: true\n    }, date && _react.default.createElement(_Button.default, {\n      icon: dateIcon,\n      label: messages.dateButton(),\n      disabled: disabled || readOnly,\n      onClick: this.handleCalendarClick\n    }), time && _react.default.createElement(_Button.default, {\n      icon: timeIcon,\n      label: messages.timeButton(),\n      disabled: disabled || readOnly,\n      onClick: this.handleTimeClick\n    }));\n  };\n\n  _proto.renderCalendar = function renderCalendar() {\n    var _this2 = this;\n\n    var activeCalendarId = this.activeCalendarId,\n        inputId = this.inputId,\n        dateId = this.dateId;\n    var _this$props4 = this.props,\n        open = _this$props4.open,\n        value = _this$props4.value,\n        popupTransition = _this$props4.popupTransition,\n        dropUp = _this$props4.dropUp,\n        onCurrentDateChange = _this$props4.onCurrentDateChange,\n        currentDate = _this$props4.currentDate;\n    var calendarProps = Props.pick(this.props, _Calendar.default.ControlledComponent); // manually include the last controlled default Props\n\n    calendarProps.defaultView = this.props.defaultView;\n    return _react.default.createElement(_Popup.default, {\n      dropUp: dropUp,\n      open: open === 'date',\n      className: \"rw-calendar-popup\",\n      transition: popupTransition\n    }, _react.default.createElement(_Calendar.default, _extends({}, calendarProps, {\n      id: dateId,\n      activeId: activeCalendarId,\n      tabIndex: \"-1\",\n      value: value,\n      autoFocus: false,\n      onChange: this.handleDateSelect // #75: need to aggressively reclaim focus from the calendar otherwise\n      // disabled header/footer buttons will drop focus completely from the widget\n      ,\n      onNavigate: function onNavigate() {\n        return _this2.focus();\n      },\n      currentDate: currentDate,\n      onCurrentDateChange: onCurrentDateChange,\n      \"aria-hidden\": !open,\n      \"aria-live\": \"polite\",\n      \"aria-labelledby\": inputId,\n      ref: this.attachCalRef\n    })));\n  };\n\n  _proto.renderTimeList = function renderTimeList() {\n    var _this3 = this;\n\n    var activeOptionId = this.activeOptionId,\n        inputId = this.inputId,\n        listId = this.listId;\n    var _this$props5 = this.props,\n        open = _this$props5.open,\n        value = _this$props5.value,\n        min = _this$props5.min,\n        max = _this$props5.max,\n        step = _this$props5.step,\n        currentDate = _this$props5.currentDate,\n        dropUp = _this$props5.dropUp,\n        date = _this$props5.date,\n        culture = _this$props5.culture,\n        timeFormat = _this$props5.timeFormat,\n        timeComponent = _this$props5.timeComponent,\n        timeListProps = _this$props5.timeListProps,\n        popupTransition = _this$props5.popupTransition;\n    return _react.default.createElement(_Popup.default, {\n      dropUp: dropUp,\n      transition: popupTransition,\n      open: open === 'time',\n      onEntering: function onEntering() {\n        return _this3.timeRef.forceUpdate();\n      }\n    }, _react.default.createElement(\"div\", null, _react.default.createElement(_TimeList.default, {\n      id: listId,\n      min: min,\n      max: max,\n      step: step,\n      listProps: timeListProps,\n      currentDate: currentDate,\n      activeId: activeOptionId,\n      format: timeFormat,\n      culture: culture,\n      value: dateOrNull(value),\n      onMove: this.handleScroll,\n      onSelect: this.handleTimeSelect,\n      preserveDate: !!date,\n      itemComponent: timeComponent,\n      \"aria-labelledby\": inputId,\n      \"aria-live\": open && 'polite',\n      \"aria-hidden\": !open,\n      messages: this.state.messages,\n      ref: this.attachTimeRef\n    })));\n  };\n\n  _proto.render = function render() {\n    var _this$props6 = this.props,\n        className = _this$props6.className,\n        date = _this$props6.date,\n        time = _this$props6.time,\n        open = _this$props6.open,\n        disabled = _this$props6.disabled,\n        readOnly = _this$props6.readOnly,\n        dropUp = _this$props6.dropUp,\n        containerClassName = _this$props6.containerClassName;\n    var focused = this.state.focused;\n    var elementProps = Props.pickElementProps(this, _Calendar.default.ControlledComponent);\n    var shouldRenderList = (0, _widgetHelpers.isFirstFocusedRender)(this);\n    var shouldRenderTimeList = !!(shouldRenderList && time);\n    var shouldRenderCalendar = !!(shouldRenderList && date);\n    var owns = '';\n    if (shouldRenderCalendar && open === 'date') owns += this.dateId;\n    if (shouldRenderTimeList && open === 'time') owns += ' ' + this.listId;\n    return _react.default.createElement(_Widget.default, _extends({}, elementProps, {\n      open: !!open,\n      dropUp: dropUp,\n      focused: focused,\n      disabled: disabled,\n      readOnly: readOnly,\n      onKeyDown: this.handleKeyDown,\n      onKeyPress: this.handleKeyPress,\n      onBlur: this.focusManager.handleBlur,\n      onFocus: this.focusManager.handleFocus,\n      className: (0, _classnames.default)(className, 'rw-datetime-picker')\n    }), _react.default.createElement(_WidgetPicker.default, {\n      className: containerClassName\n    }, this.renderInput(owns.trim()), this.renderButtons()), shouldRenderTimeList && this.renderTimeList(), shouldRenderCalendar && this.renderCalendar());\n  };\n\n  _proto.focus = function focus() {\n    if (this.inputRef && (0, _activeElement.default)() !== (0, _reactDom.findDOMNode)(this.inputRef)) this.inputRef.focus();\n  };\n\n  _proto.toggle = function toggle(view) {\n    var open = this.props.open;\n    if (!open || open !== view) this.open(view);else this.close();\n  };\n\n  _proto.open = function open(view) {\n    var _this$props7 = this.props,\n        open = _this$props7.open,\n        date = _this$props7.date,\n        time = _this$props7.time,\n        onToggle = _this$props7.onToggle;\n\n    if (!view) {\n      if (time) view = 'time';\n      if (date) view = 'date';\n      if (isBothOrNeither(date, time)) view = NEXT_VIEW[open] || 'date';\n    }\n\n    if (open !== view) (0, _widgetHelpers.notify)(onToggle, view);\n  };\n\n  _proto.close = function close() {\n    if (this.props.open) (0, _widgetHelpers.notify)(this.props.onToggle, false);\n  };\n\n  _proto.inRangeValue = function inRangeValue(value) {\n    if (value == null) return value;\n    return _dates.default.max(_dates.default.min(value, this.props.max), this.props.min);\n  };\n\n  return DateTimePicker;\n}(_react.default.Component), _class3.displayName = 'DateTimePicker', _class3.propTypes = propTypes, _class3.defaultProps = _extends({}, _Calendar.default.ControlledComponent.defaultProps, {\n  value: null,\n  min: new Date(1900, 0, 1),\n  max: new Date(2099, 11, 31),\n  date: true,\n  time: true,\n  open: false,\n  dateIcon: _Icon.calendar,\n  timeIcon: _Icon.clock\n}), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"handleChange\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this4 = this;\n\n    return function (date, str, constrain) {\n      var _this4$props = _this4.props,\n          onChange = _this4$props.onChange,\n          value = _this4$props.value;\n      if (constrain) date = _this4.inRangeValue(date);\n\n      if (onChange) {\n        if (date == null || value == null) {\n          if (date != value //eslint-disable-line eqeqeq\n          ) onChange(date, str);\n        } else if (!_dates.default.eq(date, value)) {\n          onChange(date, str);\n        }\n      }\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"handleKeyDown\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this5 = this;\n\n    return function (e) {\n      var _this5$props = _this5.props,\n          open = _this5$props.open,\n          onKeyDown = _this5$props.onKeyDown;\n      (0, _widgetHelpers.notify)(onKeyDown, [e]);\n      if (e.defaultPrevented) return;\n      if (e.key === 'Escape' && open) _this5.close();else if (e.altKey) {\n        if (e.key === 'ArrowDown') {\n          e.preventDefault();\n\n          _this5.open();\n        } else if (e.key === 'ArrowUp') {\n          e.preventDefault();\n\n          _this5.close();\n        }\n      } else if (open) {\n        if (open === 'date') _this5.calRef.inner.handleKeyDown(e);\n        if (open === 'time') _this5.timeRef.handleKeyDown(e);\n      }\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"handleKeyPress\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this6 = this;\n\n    return function (e) {\n      (0, _widgetHelpers.notify)(_this6.props.onKeyPress, [e]);\n      if (e.defaultPrevented) return;\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"handleDateSelect\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this7 = this;\n\n    return function (date) {\n      var format = getFormat(_this7.props),\n          dateTime = _dates.default.merge(date, _this7.props.value, _this7.props.currentDate),\n          dateStr = formatDate(date, format, _this7.props.culture);\n\n      _this7.close();\n\n      (0, _widgetHelpers.notify)(_this7.props.onSelect, [dateTime, dateStr]);\n\n      _this7.handleChange(dateTime, dateStr, true);\n\n      _this7.focus();\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"handleTimeSelect\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this8 = this;\n\n    return function (datum) {\n      var format = getFormat(_this8.props),\n          dateTime = _dates.default.merge(_this8.props.value, datum.date, _this8.props.currentDate),\n          dateStr = formatDate(datum.date, format, _this8.props.culture);\n\n      _this8.close();\n\n      (0, _widgetHelpers.notify)(_this8.props.onSelect, [dateTime, dateStr]);\n\n      _this8.handleChange(dateTime, dateStr, true);\n\n      _this8.focus();\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"handleCalendarClick\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this9 = this;\n\n    return function () {\n      _this9.focus();\n\n      _this9.toggle('date');\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"handleTimeClick\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this10 = this;\n\n    return function () {\n      _this10.focus();\n\n      _this10.toggle('time');\n    };\n  }\n})), _class2)) || _class;\n\nvar _default = (0, _uncontrollable.default)(DateTimePicker, {\n  open: 'onToggle',\n  value: 'onChange',\n  currentDate: 'onCurrentDateChange'\n}, ['focus']);\n\nexports.default = _default;\n\nfunction getFormat(props) {\n  var isDate = props.date != null ? props.date : true;\n  var isTime = props.time != null ? props.time : true;\n  return props.format ? props.format : isDate && isTime || !isDate && !isTime ? _localizers.date.getFormat('default') : _localizers.date.getFormat(isDate ? 'date' : 'time');\n}\n\nfunction formatDate(date, format, culture) {\n  var val = '';\n  if (date instanceof Date && !isNaN(date.getTime())) val = _localizers.date.format(date, format, culture);\n  return val;\n}\n\nfunction dateOrNull(dt) {\n  if (dt && !isNaN(dt.getTime())) return dt;\n  return null;\n}\n\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}