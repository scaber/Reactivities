{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action, runInAction, computed } from \"mobx\";\nimport agent from \"../api/agent\";\nlet ProfileStore = (_class = (_temp = class ProfileStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n\n    _initializerDefineProperty(this, \"profile\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"loadingProfile\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loadProfile\", _descriptor3, this);\n\n    this.rootStore = rootStore;\n  }\n\n  get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      return this.rootStore.userStore.user.userName === this.profile.userName;\n    } else {\n      return false;\n    }\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"profile\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loadingProfile\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"isCurrentUser\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isCurrentUser\"), _class.prototype), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loadProfile\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async userName => {\n      try {\n        const profile = await agent.Profiles.get(userName);\n        runInAction(() => {\n          this.profile = profile;\n          debugger;\n          this.loadingProfile = false;\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loadingProfile = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n})), _class);\nexport { ProfileStore as default };","map":{"version":3,"sources":["C:\\Projects\\Reactivities\\client-app\\src\\app\\stores\\profileStore.ts"],"names":["observable","action","runInAction","computed","agent","ProfileStore","constructor","rootStore","isCurrentUser","userStore","user","profile","userName","Profiles","get","loadingProfile","error","console","log"],"mappings":";;;;;;AAEA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,QAA1C,QAA0D,MAA1D;AACA,OAAOC,KAAP,MAAkB,cAAlB;IAEqBC,Y,sBAAN,MAAMA,YAAN,CAAmB;AAE9BC,EAAAA,WAAW,CAACC,SAAD,EAAqB;AAAA,SADhCA,SACgC;;AAAA;;AAAA;;AAAA;;AAC5B,SAAKA,SAAL,GAAeA,SAAf;AACH;;AAMD,MAAcC,aAAd,GAA8B;AAE1B,QAAI,KAAKD,SAAL,CAAeE,SAAf,CAAyBC,IAAzB,IAAiC,KAAKC,OAA1C,EAAmD;AAC/C,aAAO,KAAKJ,SAAL,CAAeE,SAAf,CAAyBC,IAAzB,CAA8BE,QAA9B,KAA2C,KAAKD,OAAL,CAAaC,QAA/D;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;AACJ;;AAjB6B,C,iFAK7BZ,U;;;;;WAAqC,I;;kFACrCA,U;;;;;WAA2B,I;;kEAI3BG,Q,qKAQAF,M;;;;;WAAoB,MAAOW,QAAP,IAA2B;AAE5C,UAAI;AACA,cAAMD,OAAO,GAAE,MAAMP,KAAK,CAACS,QAAN,CAAeC,GAAf,CAAmBF,QAAnB,CAArB;AACAV,QAAAA,WAAW,CAAC,MAAM;AACd,eAAKS,OAAL,GAAcA,OAAd;AACA;AACA,eAAKI,cAAL,GAAoB,KAApB;AACH,SAJU,CAAX;AAKH,OAPD,CAOE,OAAOC,KAAP,EAAc;AACZd,QAAAA,WAAW,CAAC,MAAM;AACd,eAAKa,cAAL,GAAoB,KAApB;AACH,SAFU,CAAX;AAGAE,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AAGJ,K;;;SAnCgBX,Y","sourcesContent":["import { RootStore } from \"./rootStore\";\r\nimport { IProfile } from \"../models/profile\";\r\nimport { observable, action, runInAction, computed } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\n\r\nexport default class ProfileStore {\r\n    rootStore:RootStore\r\n    constructor(rootStore:RootStore){\r\n        this.rootStore=rootStore\r\n    }\r\n    @observable profile: IProfile | null =null;\r\n    @observable loadingProfile =true;\r\n\r\n\r\n\r\n    @computed get isCurrentUser() {\r\n         \r\n        if (this.rootStore.userStore.user && this.profile) {\r\n            return this.rootStore.userStore.user.userName === this.profile.userName;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    @action loadProfile =async (userName:string) => {\r\n \r\n        try {\r\n            const profile =await agent.Profiles.get(userName);\r\n            runInAction(() => {\r\n                this.profile =profile;\r\n                debugger\r\n                this.loadingProfile=false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingProfile=false;\r\n            })\r\n            console.log(error);\r\n        }\r\n\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}