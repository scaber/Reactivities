{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nvar MAX_REDIRECTS = 100;\nvar WebSocketModule = null;\nvar EventSourceModule = null;\n\nif (typeof window === \"undefined\" && typeof require !== \"undefined\") {\n  // In order to ignore the dynamic require in webpack builds we need to do this magic\n  // @ts-ignore: TS doesn't know about these names\n  var requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n  WebSocketModule = requireFunc(\"ws\");\n  EventSourceModule = requireFunc(\"eventsource\");\n}\n/** @private */\n\n\nvar HttpConnection =\n/** @class */\nfunction () {\n  function HttpConnection(url, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.features = {};\n    Arg.isRequired(url, \"url\");\n    this.logger = createLogger(options.logger);\n    this.baseUrl = this.resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent || false;\n    var isNode = typeof window === \"undefined\";\n\n    if (!isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (isNode && !options.WebSocket) {\n      if (WebSocketModule) {\n        options.WebSocket = WebSocketModule;\n      }\n    }\n\n    if (!isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (isNode && !options.EventSource) {\n      if (typeof EventSourceModule !== \"undefined\") {\n        options.EventSource = EventSourceModule;\n      }\n    }\n\n    this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\n    this.connectionState = 2\n    /* Disconnected */\n    ;\n    this.options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  HttpConnection.prototype.start = function (transferFormat) {\n    transferFormat = transferFormat || TransferFormat.Binary;\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this.logger.log(LogLevel.Debug, \"Starting connection with transfer format '\" + TransferFormat[transferFormat] + \"'.\");\n\n    if (this.connectionState !== 2\n    /* Disconnected */\n    ) {\n        return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\n      }\n\n    this.connectionState = 0\n    /* Connecting */\n    ;\n    this.startPromise = this.startInternal(transferFormat);\n    return this.startPromise;\n  };\n\n  HttpConnection.prototype.send = function (data) {\n    if (this.connectionState !== 1\n    /* Connected */\n    ) {\n        throw new Error(\"Cannot send data if the connection is not in the 'Connected' State.\");\n      } // Transport will not be null if state is connected\n\n\n    return this.transport.send(data);\n  };\n\n  HttpConnection.prototype.stop = function (error) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.connectionState = 2\n            /* Disconnected */\n            ; // Set error as soon as possible otherwise there is a race between\n            // the transport closing and providing an error and the error from a close message\n            // We would prefer the close message error.\n\n            this.stopError = error;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.startPromise];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            if (!this.transport) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.transport.stop()];\n\n          case 5:\n            _a.sent();\n\n            this.transport = undefined;\n            _a.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.startInternal = function (transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, negotiateResponse, redirects, _loop_1, this_1, state_1, e_2;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            url = this.baseUrl;\n            this.accessTokenFactory = this.options.accessTokenFactory;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 12,, 13]);\n\n            if (!this.options.skipNegotiation) return [3\n            /*break*/\n            , 5];\n            if (!(this.options.transport === HttpTransportType.WebSockets)) return [3\n            /*break*/\n            , 3]; // No need to add a connection ID in this case\n\n            this.transport = this.constructTransport(HttpTransportType.WebSockets); // We should just call connect directly in this case.\n            // No fallback or negotiate in this case.\n\n            return [4\n            /*yield*/\n            , this.transport.connect(url, transferFormat)];\n\n          case 2:\n            // We should just call connect directly in this case.\n            // No fallback or negotiate in this case.\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            throw Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n\n          case 4:\n            return [3\n            /*break*/\n            , 11];\n\n          case 5:\n            negotiateResponse = null;\n            redirects = 0;\n\n            _loop_1 = function () {\n              var accessToken_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this_1.getNegotiationResponse(url)];\n\n                  case 1:\n                    negotiateResponse = _a.sent(); // the user tries to stop the connection when it is being started\n\n                    if (this_1.connectionState === 2\n                    /* Disconnected */\n                    ) {\n                        return [2\n                        /*return*/\n                        , {\n                          value: void 0\n                        }];\n                      }\n\n                    if (negotiateResponse.error) {\n                      throw Error(negotiateResponse.error);\n                    }\n\n                    if (negotiateResponse.ProtocolVersion) {\n                      throw Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n                    }\n\n                    if (negotiateResponse.url) {\n                      url = negotiateResponse.url;\n                    }\n\n                    if (negotiateResponse.accessToken) {\n                      accessToken_1 = negotiateResponse.accessToken;\n\n                      this_1.accessTokenFactory = function () {\n                        return accessToken_1;\n                      };\n                    }\n\n                    redirects++;\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _a.label = 6;\n\n          case 6:\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 7:\n            state_1 = _a.sent();\n            if (typeof state_1 === \"object\") return [2\n            /*return*/\n            , state_1.value];\n            _a.label = 8;\n\n          case 8:\n            if (negotiateResponse.url && redirects < MAX_REDIRECTS) return [3\n            /*break*/\n            , 6];\n            _a.label = 9;\n\n          case 9:\n            if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n              throw Error(\"Negotiate redirection limit exceeded.\");\n            }\n\n            return [4\n            /*yield*/\n            , this.createTransport(url, this.options.transport, negotiateResponse, transferFormat)];\n\n          case 10:\n            _a.sent();\n\n            _a.label = 11;\n\n          case 11:\n            if (this.transport instanceof LongPollingTransport) {\n              this.features.inherentKeepAlive = true;\n            }\n\n            this.transport.onreceive = this.onreceive;\n\n            this.transport.onclose = function (e) {\n              return _this.stopConnection(e);\n            }; // only change the state if we were connecting to not overwrite\n            // the state if the connection is already marked as Disconnected\n\n\n            this.changeState(0\n            /* Connecting */\n            , 1\n            /* Connected */\n            );\n            return [3\n            /*break*/\n            , 13];\n\n          case 12:\n            e_2 = _a.sent();\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e_2);\n            this.connectionState = 2\n            /* Disconnected */\n            ;\n            this.transport = undefined;\n            throw e_2;\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.getNegotiationResponse = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, headers, token, negotiateUrl, response, e_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.accessTokenFactory) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _b.sent();\n\n            if (token) {\n              headers = (_a = {}, _a[\"Authorization\"] = \"Bearer \" + token, _a);\n            }\n\n            _b.label = 2;\n\n          case 2:\n            negotiateUrl = this.resolveNegotiateUrl(url);\n            this.logger.log(LogLevel.Debug, \"Sending negotiation request: \" + negotiateUrl + \".\");\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.httpClient.post(negotiateUrl, {\n              content: \"\",\n              headers: headers\n            })];\n\n          case 4:\n            response = _b.sent();\n\n            if (response.statusCode !== 200) {\n              throw Error(\"Unexpected status code returned from negotiate \" + response.statusCode);\n            }\n\n            return [2\n            /*return*/\n            , JSON.parse(response.content)];\n\n          case 5:\n            e_3 = _b.sent();\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e_3);\n            throw e_3;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.createConnectUrl = function (url, connectionId) {\n    if (!connectionId) {\n      return url;\n    }\n\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + (\"id=\" + connectionId);\n  };\n\n  HttpConnection.prototype.createTransport = function (url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connectUrl, transports, _i, transports_1, endpoint, transport, ex_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\n            if (!this.isITransport(requestedTransport)) return [3\n            /*break*/\n            , 2];\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n            this.transport = requestedTransport;\n            return [4\n            /*yield*/\n            , this.transport.connect(connectUrl, requestedTransferFormat)];\n\n          case 1:\n            _a.sent(); // only change the state if we were connecting to not overwrite\n            // the state if the connection is already marked as Disconnected\n\n\n            this.changeState(0\n            /* Connecting */\n            , 1\n            /* Connected */\n            );\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            transports = negotiateResponse.availableTransports || [];\n            _i = 0, transports_1 = transports;\n            _a.label = 3;\n\n          case 3:\n            if (!(_i < transports_1.length)) return [3\n            /*break*/\n            , 9];\n            endpoint = transports_1[_i];\n            this.connectionState = 0\n            /* Connecting */\n            ;\n            transport = this.resolveTransport(endpoint, requestedTransport, requestedTransferFormat);\n            if (!(typeof transport === \"number\")) return [3\n            /*break*/\n            , 8];\n            this.transport = this.constructTransport(transport);\n            if (!!negotiateResponse.connectionId) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.getNegotiationResponse(url)];\n\n          case 4:\n            negotiateResponse = _a.sent();\n            connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.transport.connect(connectUrl, requestedTransferFormat)];\n\n          case 6:\n            _a.sent();\n\n            this.changeState(0\n            /* Connecting */\n            , 1\n            /* Connected */\n            );\n            return [2\n            /*return*/\n            ];\n\n          case 7:\n            ex_1 = _a.sent();\n            this.logger.log(LogLevel.Error, \"Failed to start the transport '\" + HttpTransportType[transport] + \"': \" + ex_1);\n            this.connectionState = 2\n            /* Disconnected */\n            ;\n            negotiateResponse.connectionId = undefined;\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            _i++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 9:\n            throw new Error(\"Unable to initialize any of the available transports.\");\n        }\n      });\n    });\n  };\n\n  HttpConnection.prototype.constructTransport = function (transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this.options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n\n        return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket);\n\n      case HttpTransportType.ServerSentEvents:\n        if (!this.options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n\n        return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource);\n\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false);\n\n      default:\n        throw new Error(\"Unknown transport: \" + transport + \".\");\n    }\n  };\n\n  HttpConnection.prototype.resolveTransport = function (endpoint, requestedTransport, requestedTransferFormat) {\n    var transport = HttpTransportType[endpoint.transport];\n\n    if (transport === null || transport === undefined) {\n      this.logger.log(LogLevel.Debug, \"Skipping transport '\" + endpoint.transport + \"' because it is not supported by this client.\");\n    } else {\n      var transferFormats = endpoint.transferFormats.map(function (s) {\n        return TransferFormat[s];\n      });\n\n      if (transportMatches(requestedTransport, transport)) {\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this.options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this.options.EventSource) {\n            this.logger.log(LogLevel.Debug, \"Skipping transport '\" + HttpTransportType[transport] + \"' because it is not supported in your environment.'\");\n          } else {\n            this.logger.log(LogLevel.Debug, \"Selecting transport '\" + HttpTransportType[transport] + \"'.\");\n            return transport;\n          }\n        } else {\n          this.logger.log(LogLevel.Debug, \"Skipping transport '\" + HttpTransportType[transport] + \"' because it does not support the requested transfer format '\" + TransferFormat[requestedTransferFormat] + \"'.\");\n        }\n      } else {\n        this.logger.log(LogLevel.Debug, \"Skipping transport '\" + HttpTransportType[transport] + \"' because it was disabled by the client.\");\n      }\n    }\n\n    return null;\n  };\n\n  HttpConnection.prototype.isITransport = function (transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  };\n\n  HttpConnection.prototype.changeState = function (from, to) {\n    if (this.connectionState === from) {\n      this.connectionState = to;\n      return true;\n    }\n\n    return false;\n  };\n\n  HttpConnection.prototype.stopConnection = function (error) {\n    this.transport = undefined; // If we have a stopError, it takes precedence over the error from the transport\n\n    error = this.stopError || error;\n\n    if (error) {\n      this.logger.log(LogLevel.Error, \"Connection disconnected with error '\" + error + \"'.\");\n    } else {\n      this.logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n\n    this.connectionState = 2\n    /* Disconnected */\n    ;\n\n    if (this.onclose) {\n      this.onclose(error);\n    }\n  };\n\n  HttpConnection.prototype.resolveUrl = function (url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n\n    if (typeof window === \"undefined\" || !window || !window.document) {\n      throw new Error(\"Cannot resolve '\" + url + \"'.\");\n    } // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative  path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n\n\n    var aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n    this.logger.log(LogLevel.Information, \"Normalizing '\" + url + \"' to '\" + aTag.href + \"'.\");\n    return aTag.href;\n  };\n\n  HttpConnection.prototype.resolveNegotiateUrl = function (url) {\n    var index = url.indexOf(\"?\");\n    var negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n\n    if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n      negotiateUrl += \"/\";\n    }\n\n    negotiateUrl += \"negotiate\";\n    negotiateUrl += index === -1 ? \"\" : url.substring(index);\n    return negotiateUrl;\n  };\n\n  return HttpConnection;\n}();\n\nexport { HttpConnection };\n\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}","map":{"version":3,"sources":["../../src/HttpConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting,\r\n    Connected,\r\n    Disconnected,\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\nlet WebSocketModule: any = null;\r\nlet EventSourceModule: any = null;\r\nif (typeof window === \"undefined\" && typeof require !== \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    WebSocketModule = requireFunc(\"ws\");\r\n    EventSourceModule = requireFunc(\"eventsource\");\r\n}\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    private baseUrl: string;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startPromise?: Promise<void>;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n\r\n    public readonly features: any = {};\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent || false;\r\n\r\n        const isNode = typeof window === \"undefined\";\r\n        if (!isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (isNode && !options.WebSocket) {\r\n            if (WebSocketModule) {\r\n                options.WebSocket = WebSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (isNode && !options.EventSource) {\r\n            if (typeof EventSourceModule !== \"undefined\") {\r\n                options.EventSource = EventSourceModule;\r\n            }\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startPromise = this.startInternal(transferFormat);\r\n        return this.startPromise;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State.\");\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.transport!.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this.stopError = error;\r\n\r\n        try {\r\n            await this.startPromise;\r\n        } catch (e) {\r\n            // this exception is returned to the user as a rejected Promise from the start method\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        if (this.transport) {\r\n            await this.transport.stop();\r\n            this.transport = undefined;\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.transport!.connect(url, transferFormat);\r\n                } else {\r\n                    throw Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnected) {\r\n                        return;\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            this.transport!.onreceive = this.onreceive;\r\n            this.transport!.onclose = (e) => this.stopConnection(e);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        let headers;\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                headers = {\r\n                    [\"Authorization\"]: `Bearer ${token}`,\r\n                };\r\n            }\r\n        }\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                throw Error(`Unexpected status code returned from negotiate ${response.statusCode}`);\r\n            }\r\n\r\n            return JSON.parse(response.content as string) as INegotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionId: string | null | undefined) {\r\n        if (!connectionId) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionId}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.transport.connect(connectUrl, requestedTransferFormat);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n            return;\r\n        }\r\n\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        for (const endpoint of transports) {\r\n            this.connectionState = ConnectionState.Connecting;\r\n            const transport = this.resolveTransport(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (typeof transport === \"number\") {\r\n                this.transport = this.constructTransport(transport);\r\n                if (!negotiateResponse.connectionId) {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n                }\r\n                try {\r\n                    await this.transport!.connect(connectUrl, requestedTransferFormat);\r\n                    this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${HttpTransportType[transport]}': ${ex}`);\r\n                    this.connectionState = ConnectionState.Disconnected;\r\n                    negotiateResponse.connectionId = undefined;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Unable to initialize any of the available transports.\");\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket);\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private resolveTransport(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): HttpTransportType | null {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        return transport;\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private changeState(from: ConnectionState, to: ConnectionState): boolean {\r\n        if (this.connectionState === from) {\r\n            this.connectionState = to;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private stopConnection(error?: Error): void {\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.onclose) {\r\n            this.onclose(error);\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (typeof window === \"undefined\" || !window || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative  path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}