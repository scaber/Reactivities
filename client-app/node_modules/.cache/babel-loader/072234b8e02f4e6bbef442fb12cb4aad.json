{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\n/** @private */\n\nvar ServerSentEventsTransport =\n/** @class */\nfunction () {\n  function ServerSentEventsTransport(httpClient, accessTokenFactory, logger, logMessageContent, eventSourceConstructor) {\n    this.httpClient = httpClient;\n    this.accessTokenFactory = accessTokenFactory;\n    this.logger = logger;\n    this.logMessageContent = logMessageContent;\n    this.eventSourceConstructor = eventSourceConstructor;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  ServerSentEventsTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\"); // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\n\n            this.url = url;\n            if (!this.accessTokenFactory) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n\n            if (token) {\n              url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (\"access_token=\" + encodeURIComponent(token));\n            }\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              var opened = false;\n\n              if (transferFormat !== TransferFormat.Text) {\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\n                return;\n              }\n\n              var eventSource;\n\n              if (typeof window !== \"undefined\") {\n                eventSource = new _this.eventSourceConstructor(url, {\n                  withCredentials: true\n                });\n              } else {\n                // Non-browser passes cookies via the dictionary\n                var cookies = _this.httpClient.getCookieString(url);\n\n                eventSource = new _this.eventSourceConstructor(url, {\n                  withCredentials: true,\n                  headers: {\n                    Cookie: cookies\n                  }\n                });\n              }\n\n              try {\n                eventSource.onmessage = function (e) {\n                  if (_this.onreceive) {\n                    try {\n                      _this.logger.log(LogLevel.Trace, \"(SSE transport) data received. \" + getDataDetail(e.data, _this.logMessageContent) + \".\");\n\n                      _this.onreceive(e.data);\n                    } catch (error) {\n                      _this.close(error);\n\n                      return;\n                    }\n                  }\n                };\n\n                eventSource.onerror = function (e) {\n                  var error = new Error(e.data || \"Error occurred\");\n\n                  if (opened) {\n                    _this.close(error);\n                  } else {\n                    reject(error);\n                  }\n                };\n\n                eventSource.onopen = function () {\n                  _this.logger.log(LogLevel.Information, \"SSE connected to \" + _this.url);\n\n                  _this.eventSource = eventSource;\n                  opened = true;\n                  resolve();\n                };\n              } catch (e) {\n                reject(e);\n                return;\n              }\n            })];\n        }\n      });\n    });\n  };\n\n  ServerSentEventsTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.eventSource) {\n          return [2\n          /*return*/\n          , Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n\n        return [2\n        /*return*/\n        , sendMessage(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent)];\n      });\n    });\n  };\n\n  ServerSentEventsTransport.prototype.stop = function () {\n    this.close();\n    return Promise.resolve();\n  };\n\n  ServerSentEventsTransport.prototype.close = function (e) {\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = undefined;\n\n      if (this.onclose) {\n        this.onclose(e);\n      }\n    }\n  };\n\n  return ServerSentEventsTransport;\n}();\n\nexport { ServerSentEventsTransport };","map":{"version":3,"sources":["../../src/ServerSentEventsTransport.ts"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAkB,QAAlB,QAAkC,WAAlC;AACA,SAAqB,cAArB,QAA2C,cAA3C;AAEA,SAAS,GAAT,EAAc,aAAd,EAA6B,WAA7B,QAAgD,SAAhD;AAEA;;AACA,IAAA,yBAAA;AAAA;AAAA,YAAA;AAYI,WAAA,yBAAA,CAAY,UAAZ,EAAoC,kBAApC,EAAsG,MAAtG,EACY,iBADZ,EACwC,sBADxC,EACsF;AAClF,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,kBAAL,GAA0B,kBAA1B;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,iBAAL,GAAyB,iBAAzB;AACA,SAAK,sBAAL,GAA8B,sBAA9B;AAEA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,OAAL,GAAe,IAAf;AACH;;AAEY,EAAA,yBAAA,CAAA,SAAA,CAAA,OAAA,GAAb,UAAqB,GAArB,EAAkC,cAAlC,EAAgE;;;;;;;;;AAC5D,YAAA,GAAG,CAAC,UAAJ,CAAe,GAAf,EAAoB,KAApB;AACA,YAAA,GAAG,CAAC,UAAJ,CAAe,cAAf,EAA+B,gBAA/B;AACA,YAAA,GAAG,CAAC,IAAJ,CAAS,cAAT,EAAyB,cAAzB,EAAyC,gBAAzC;AAEA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,6BAAhC,E,CAEA;;AACA,iBAAK,GAAL,GAAW,GAAX;iBAEI,KAAK,kB,EAAL,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACc,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAR,YAAA,KAAK,GAAG,EAAA,CAAA,IAAA,EAAR;;AACN,gBAAI,KAAJ,EAAW;AACP,cAAA,GAAG,IAAI,CAAC,GAAG,CAAC,OAAJ,CAAY,GAAZ,IAAmB,CAAnB,GAAuB,GAAvB,GAA6B,GAA9B,KAAqC,kBAAgB,kBAAkB,CAAC,KAAD,CAAvE,CAAP;AACH;;;;;AAGL,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,OAAJ,CAAkB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACrC,kBAAI,MAAM,GAAG,KAAb;;AACA,kBAAI,cAAc,KAAK,cAAc,CAAC,IAAtC,EAA4C;AACxC,gBAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,2EAAV,CAAD,CAAN;AACA;AACH;;AAED,kBAAI,WAAJ;;AACA,kBAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,gBAAA,WAAW,GAAG,IAAI,KAAI,CAAC,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,kBAAA,eAAe,EAAE;AAAnB,iBAArC,CAAd;AACH,eAFD,MAEO;AACH;AACA,oBAAM,OAAO,GAAG,KAAI,CAAC,UAAL,CAAgB,eAAhB,CAAgC,GAAhC,CAAhB;;AACA,gBAAA,WAAW,GAAG,IAAI,KAAI,CAAC,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,kBAAA,eAAe,EAAE,IAAnB;AAAyB,kBAAA,OAAO,EAAE;AAAE,oBAAA,MAAM,EAAE;AAAV;AAAlC,iBAArC,CAAd;AACH;;AAED,kBAAI;AACA,gBAAA,WAAW,CAAC,SAAZ,GAAwB,UAAC,CAAD,EAAgB;AACpC,sBAAI,KAAI,CAAC,SAAT,EAAoB;AAChB,wBAAI;AACA,sBAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,KAAzB,EAAgC,oCAAkC,aAAa,CAAC,CAAC,CAAC,IAAH,EAAS,KAAI,CAAC,iBAAd,CAA/C,GAA+E,GAA/G;;AACA,sBAAA,KAAI,CAAC,SAAL,CAAe,CAAC,CAAC,IAAjB;AACH,qBAHD,CAGE,OAAO,KAAP,EAAc;AACZ,sBAAA,KAAI,CAAC,KAAL,CAAW,KAAX;;AACA;AACH;AACJ;AACJ,iBAVD;;AAYA,gBAAA,WAAW,CAAC,OAAZ,GAAsB,UAAC,CAAD,EAAgB;AAClC,sBAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,CAAC,CAAC,IAAF,IAAU,gBAApB,CAAd;;AACA,sBAAI,MAAJ,EAAY;AACR,oBAAA,KAAI,CAAC,KAAL,CAAW,KAAX;AACH,mBAFD,MAEO;AACH,oBAAA,MAAM,CAAC,KAAD,CAAN;AACH;AACJ,iBAPD;;AASA,gBAAA,WAAW,CAAC,MAAZ,GAAqB,YAAA;AACjB,kBAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,WAAzB,EAAsC,sBAAoB,KAAI,CAAC,GAA/D;;AACA,kBAAA,KAAI,CAAC,WAAL,GAAmB,WAAnB;AACA,kBAAA,MAAM,GAAG,IAAT;AACA,kBAAA,OAAO;AACV,iBALD;AAMH,eA5BD,CA4BE,OAAO,CAAP,EAAU;AACR,gBAAA,MAAM,CAAC,CAAD,CAAN;AACA;AACH;AACJ,aAhDM,CAAP,CAAA;;;;AAiDH,GAlEY;;AAoEA,EAAA,yBAAA,CAAA,SAAA,CAAA,IAAA,GAAb,UAAkB,IAAlB,EAA2B;;;AACvB,YAAI,CAAC,KAAK,WAAV,EAAuB;AACnB,iBAAA,CAAA;AAAA;AAAA,YAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,8CAAV,CAAf,CAAP,CAAA;AACH;;AACD,eAAA,CAAA;AAAA;AAAA,UAAO,WAAW,CAAC,KAAK,MAAN,EAAc,KAAd,EAAqB,KAAK,UAA1B,EAAsC,KAAK,GAA3C,EAAiD,KAAK,kBAAtD,EAA0E,IAA1E,EAAgF,KAAK,iBAArF,CAAlB,CAAA;;;AACH,GALY;;AAON,EAAA,yBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACI,SAAK,KAAL;AACA,WAAO,OAAO,CAAC,OAAR,EAAP;AACH,GAHM;;AAKC,EAAA,yBAAA,CAAA,SAAA,CAAA,KAAA,GAAR,UAAc,CAAd,EAAuB;AACnB,QAAI,KAAK,WAAT,EAAsB;AAClB,WAAK,WAAL,CAAiB,KAAjB;AACA,WAAK,WAAL,GAAmB,SAAnB;;AAEA,UAAI,KAAK,OAAT,EAAkB;AACd,aAAK,OAAL,CAAa,CAAb;AACH;AACJ;AACJ,GATO;;AAUZ,SAAA,yBAAA;AAAC,CAlHD,EAAA","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this.url = url;\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (typeof window !== \"undefined\") {\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this.httpClient.getCookieString(url);\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true, headers: { Cookie: cookies } } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this.close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: MessageEvent) => {\r\n                    const error = new Error(e.data || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}