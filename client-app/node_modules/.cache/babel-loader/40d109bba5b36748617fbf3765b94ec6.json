{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\src\\\\app\\\\common\\\\photoUpload\\\\PhotoWidgetCropper.tsx\";\nimport React, { useRef } from \"react\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\n\nconst PhotoWidgetCropper = ({\n  setImage,\n  imagePreview\n}) => {\n  const cropper = useRef(null);\n\n  const cropImage = () => {\n    if (cropper.current && typeof cropper.current.getCroppedCanvas() === 'undefined') {\n      return;\n    }\n\n    cropper && cropper.current && cropper.current.getCroppedCanvas().toBlob(blob => {\n      setImage(blob);\n    }, 'image/jpeg');\n  };\n\n  return /*#__PURE__*/React.createElement(Cropper, {\n    ref: cropper,\n    src: imagePreview,\n    style: {\n      height: 200,\n      width: \"100%\"\n    } // Cropper.js options\n    ,\n    aspectRatio: 1 / 1,\n    preview: \".img-preview\",\n    guides: false,\n    viewMode: 1,\n    dragMode: \"move\",\n    scalable: true,\n    cropBoxMovable: true,\n    cropBoxResizable: true,\n    crop: cropImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default PhotoWidgetCropper;","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/app/common/photoUpload/PhotoWidgetCropper.tsx"],"names":["React","useRef","Cropper","PhotoWidgetCropper","setImage","imagePreview","cropper","cropImage","current","getCroppedCanvas","toBlob","blob","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,4BAAP;;AAQC,MAAMC,kBAAmC,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAUC,EAAAA;AAAV,CAAD,KAA6B;AACvE,QAAMC,OAAO,GAACL,MAAM,CAAU,IAAV,CAApB;;AACA,QAAMM,SAAS,GAAE,MAAM;AACrB,QAAID,OAAO,CAACE,OAAR,IAAmB,OAAOF,OAAO,CAACE,OAAR,CAAgBC,gBAAhB,EAAP,KAA8C,WAArE,EAAkF;AAChF;AACD;;AACDH,IAAAA,OAAO,IAAIA,OAAO,CAACE,OAAnB,IAA8BF,OAAO,CAACE,OAAR,CAAgBC,gBAAhB,GAAmCC,MAAnC,CAA2CC,IAAD,IACxE;AACEP,MAAAA,QAAQ,CAACO,IAAD,CAAR;AACD,KAH6B,EAG5B,YAH4B,CAA9B;AAID,GARD;;AASD,sBACE,oBAAC,OAAD;AACE,IAAA,GAAG,EAAEL,OADP;AAEE,IAAA,GAAG,EAAED,YAFP;AAGE,IAAA,KAAK,EAAE;AAAEO,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAHT,CAIE;AAJF;AAKE,IAAA,WAAW,EAAE,IAAI,CALnB;AAME,IAAA,OAAO,EAAC,cANV;AAOE,IAAA,MAAM,EAAE,KAPV;AAQE,IAAA,QAAQ,EAAE,CARZ;AASE,IAAA,QAAQ,EAAC,MATX;AAUE,IAAA,QAAQ,EAAE,IAVZ;AAWE,IAAA,cAAc,EAAE,IAXlB;AAYE,IAAA,gBAAgB,EAAE,IAZpB;AAaE,IAAA,IAAI,EAAEN,SAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAiBD,CA5BA;;AA6BD,eAAeJ,kBAAf","sourcesContent":["import React, { useRef } from \"react\";\r\nimport Cropper from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\n\r\ninterface IProps {\r\n\r\n  setImage:(file: Blob) => void;\r\n  imagePreview:string;\r\n}\r\n const PhotoWidgetCropper:React.FC<IProps> = ({setImage,imagePreview}) => {\r\n   const cropper=useRef<Cropper>(null);\r\n   const cropImage =() => {\r\n     if (cropper.current && typeof cropper.current.getCroppedCanvas() === 'undefined') {\r\n       return;\r\n     }\r\n     cropper && cropper.current && cropper.current.getCroppedCanvas().toBlob((blob: any) => \r\n     {\r\n       setImage(blob);\r\n     },'image/jpeg');\r\n   }\r\n  return (\r\n    <Cropper\r\n      ref={cropper}\r\n      src={imagePreview}\r\n      style={{ height: 200, width: \"100%\" }}\r\n      // Cropper.js options\r\n      aspectRatio={1 / 1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      dragMode='move'\r\n      scalable={true}\r\n      cropBoxMovable={true}\r\n      cropBoxResizable={true}\r\n      crop={cropImage}\r\n     />\r\n  );\r\n};\r\nexport default PhotoWidgetCropper;"]},"metadata":{},"sourceType":"module"}