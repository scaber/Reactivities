{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AbortError } from \"./Errors\";\nimport { HttpClient } from \"./HttpClient\";\nimport { NodeHttpClient } from \"./NodeHttpClient\";\nimport { XhrHttpClient } from \"./XhrHttpClient\";\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\n\nvar DefaultHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(DefaultHttpClient, _super);\n  /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\n\n\n  function DefaultHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    if (typeof XMLHttpRequest !== \"undefined\") {\n      _this.httpClient = new XhrHttpClient(logger);\n    } else {\n      _this.httpClient = new NodeHttpClient(logger);\n    }\n\n    return _this;\n  }\n  /** @inheritDoc */\n\n\n  DefaultHttpClient.prototype.send = function (request) {\n    // Check that abort was not signaled before calling send\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return this.httpClient.send(request);\n  };\n\n  DefaultHttpClient.prototype.getCookieString = function (url) {\n    return this.httpClient.getCookieString(url);\n  };\n\n  return DefaultHttpClient;\n}(HttpClient);\n\nexport { DefaultHttpClient };","map":{"version":3,"sources":["../../src/DefaultHttpClient.ts"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAEA,SAAS,UAAT,QAA2B,UAA3B;AACA,SAAS,UAAT,QAAsD,cAAtD;AAEA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAEA;;AACA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAGnC;;;AACA,WAAA,iBAAA,CAAmB,MAAnB,EAAkC;AAAlC,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAGI,QAAI,OAAO,cAAP,KAA0B,WAA9B,EAA2C;AACvC,MAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,aAAJ,CAAkB,MAAlB,CAAlB;AACH,KAFD,MAEO;AACH,MAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,cAAJ,CAAmB,MAAnB,CAAlB;AACH;;;AACJ;AAED;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,OAAZ,EAAgC;AAC5B;AACA,QAAI,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,WAAR,CAAoB,OAA/C,EAAwD;AACpD,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,UAAJ,EAAf,CAAP;AACH;;AAED,QAAI,CAAC,OAAO,CAAC,MAAb,EAAqB;AACjB,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,oBAAV,CAAf,CAAP;AACH;;AACD,QAAI,CAAC,OAAO,CAAC,GAAb,EAAkB;AACd,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,iBAAV,CAAf,CAAP;AACH;;AAED,WAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,OAArB,CAAP;AACH,GAdM;;AAgBA,EAAA,iBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,GAAvB,EAAkC;AAC9B,WAAO,KAAK,UAAL,CAAgB,eAAhB,CAAgC,GAAhC,CAAP;AACH,GAFM;;AAGX,SAAA,iBAAA;AAAC,CAlCD,CAAuC,UAAvC,CAAA","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { NodeHttpClient } from \"./NodeHttpClient\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this.httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            this.httpClient = new NodeHttpClient(logger);\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this.httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.httpClient.getCookieString(url);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}