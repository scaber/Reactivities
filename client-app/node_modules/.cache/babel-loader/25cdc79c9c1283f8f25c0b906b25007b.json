{"ast":null,"code":"import toDate from '../toDate/index.js';\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date[]|String[]|Number[]} datesArray - the array to search\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\nexport default function closestTo(dirtyDateToCompare, dirtyDatesArray, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions);\n\n  if (isNaN(dateToCompare)) {\n    return new Date(NaN);\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate, dirtyOptions);\n\n    if (isNaN(currentDate)) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/closestTo/index.js"],"names":["toDate","closestTo","dirtyDateToCompare","dirtyDatesArray","dirtyOptions","arguments","length","TypeError","dateToCompare","isNaN","Date","NaN","timeToCompare","getTime","datesArray","forEach","Array","prototype","slice","call","result","minDistance","dirtyDate","currentDate","distance","Math","abs"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,eAAe,SAASC,SAAT,CAAoBC,kBAApB,EAAwCC,eAAxC,EAAyDC,YAAzD,EAAuE;AACpF,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,aAAa,GAAGR,MAAM,CAACE,kBAAD,EAAqBE,YAArB,CAA1B;;AAEA,MAAIK,KAAK,CAACD,aAAD,CAAT,EAA0B;AACxB,WAAO,IAAIE,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIC,aAAa,GAAGJ,aAAa,CAACK,OAAd,EAApB;AAEA,MAAIC,UAAJ,CAboF,CAcpF;;AACA,MAAIX,eAAe,IAAI,IAAvB,EAA6B;AAC3BW,IAAAA,UAAU,GAAG,EAAb,CAD2B,CAG7B;AACC,GAJD,MAIO,IAAI,OAAOX,eAAe,CAACY,OAAvB,KAAmC,UAAvC,EAAmD;AACxDD,IAAAA,UAAU,GAAGX,eAAb,CADwD,CAG1D;AACC,GAJM,MAIA;AACLW,IAAAA,UAAU,GAAGE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BhB,eAA3B,CAAb;AACD;;AAED,MAAIiB,MAAJ;AACA,MAAIC,WAAJ;AACAP,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUO,SAAV,EAAqB;AACtC,QAAIC,WAAW,GAAGvB,MAAM,CAACsB,SAAD,EAAYlB,YAAZ,CAAxB;;AAEA,QAAIK,KAAK,CAACc,WAAD,CAAT,EAAwB;AACtBH,MAAAA,MAAM,GAAG,IAAIV,IAAJ,CAASC,GAAT,CAAT;AACAU,MAAAA,WAAW,GAAGV,GAAd;AACA;AACD;;AAED,QAAIa,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASd,aAAa,GAAGW,WAAW,CAACV,OAAZ,EAAzB,CAAf;;AACA,QAAIO,MAAM,IAAI,IAAV,IAAkBI,QAAQ,GAAGH,WAAjC,EAA8C;AAC5CD,MAAAA,MAAM,GAAGG,WAAT;AACAF,MAAAA,WAAW,GAAGG,QAAd;AACD;AACF,GAdD;AAgBA,SAAOJ,MAAP;AACD","sourcesContent":["import toDate from '../toDate/index.js'\n\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Date[]|String[]|Number[]} datesArray - the array to search\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\nexport default function closestTo (dirtyDateToCompare, dirtyDatesArray, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions)\n\n  if (isNaN(dateToCompare)) {\n    return new Date(NaN)\n  }\n\n  var timeToCompare = dateToCompare.getTime()\n\n  var datesArray\n  // `dirtyDatesArray` is undefined or null\n  if (dirtyDatesArray == null) {\n    datesArray = []\n\n  // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray\n\n  // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray)\n  }\n\n  var result\n  var minDistance\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate, dirtyOptions)\n\n    if (isNaN(currentDate)) {\n      result = new Date(NaN)\n      minDistance = NaN\n      return\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime())\n    if (result == null || distance < minDistance) {\n      result = currentDate\n      minDistance = distance\n    }\n  })\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}