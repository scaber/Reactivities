{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from \"../../../widgets/component\";\nimport { SimpleFilter } from \"../../provided/simpleFilter\";\nimport { OptionsFactory } from \"../../provided/optionsFactory\";\n\nvar SimpleFloatingFilter =\n/** @class */\nfunction (_super) {\n  __extends(SimpleFloatingFilter, _super);\n\n  function SimpleFloatingFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SimpleFloatingFilter.prototype.getDefaultDebounceMs = function () {\n    return 0;\n  }; // used by:\n  // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\n  // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\n\n\n  SimpleFloatingFilter.prototype.getTextFromModel = function (model) {\n    if (!model) {\n      return null;\n    }\n\n    var isCombined = model.operator;\n\n    if (isCombined) {\n      var combinedModel = model;\n      var con1Str = this.conditionToString(combinedModel.condition1);\n      var con2Str = this.conditionToString(combinedModel.condition2);\n      return con1Str + \" \" + combinedModel.operator + \" \" + con2Str;\n    } else {\n      var condition = model;\n      return this.conditionToString(condition);\n    }\n  };\n\n  SimpleFloatingFilter.prototype.isEventFromFloatingFilter = function (event) {\n    return event && event.afterFloatingFilter;\n  };\n\n  SimpleFloatingFilter.prototype.getLastType = function () {\n    return this.lastType;\n  };\n\n  SimpleFloatingFilter.prototype.setLastTypeFromModel = function (model) {\n    // if no model provided by the parent filter use default\n    if (!model) {\n      this.lastType = this.optionsFactory.getDefaultOption();\n      return;\n    }\n\n    var isCombined = model.operator;\n    var condition;\n\n    if (isCombined) {\n      var combinedModel = model;\n      condition = combinedModel.condition1;\n    } else {\n      condition = model;\n    }\n\n    this.lastType = condition.type;\n  };\n\n  SimpleFloatingFilter.prototype.canWeEditAfterModelFromParentFilter = function (model) {\n    if (!model) {\n      // if no model, then we can edit as long as the lastType is something we can edit, as this\n      // is the type we will provide to the parent filter if the user decides to use the floating filter.\n      return this.isTypeEditable(this.lastType);\n    } // never allow editing if the filter is combined (ie has two parts)\n\n\n    var isCombined = model.operator;\n\n    if (isCombined) {\n      return false;\n    }\n\n    var simpleModel = model;\n    var typeIsEditable = this.isTypeEditable(simpleModel.type);\n    return typeIsEditable;\n  };\n\n  SimpleFloatingFilter.prototype.init = function (params) {\n    this.optionsFactory = new OptionsFactory();\n    this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());\n    this.lastType = this.optionsFactory.getDefaultOption(); // we are editable if:\n    // 1) there is a type (user has configured filter wrong if not type)\n    //  AND\n    // 2) the default type is not 'in range'\n\n    var editable = this.isTypeEditable(this.lastType);\n    this.setEditable(editable);\n  };\n\n  SimpleFloatingFilter.prototype.doesFilterHaveHiddenInput = function (filterType) {\n    var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n    return customFilterOption && customFilterOption.hideFilterInput;\n  };\n\n  SimpleFloatingFilter.prototype.isTypeEditable = function (type) {\n    if (this.doesFilterHaveHiddenInput(type)) {\n      return false;\n    }\n\n    return type && type != SimpleFilter.IN_RANGE && type != SimpleFilter.EMPTY;\n  };\n\n  return SimpleFloatingFilter;\n}(Component);\n\nexport { SimpleFloatingFilter };","map":null,"metadata":{},"sourceType":"module"}