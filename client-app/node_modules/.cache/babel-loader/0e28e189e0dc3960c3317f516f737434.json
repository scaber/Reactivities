{"ast":null,"code":"import pj_mlfn from \"./pj_mlfn\";\nimport { EPSLN } from '../constants/values';\nvar MAX_ITER = 20;\nexport default function (arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n\n  for (var i = MAX_ITER; i; --i) {\n    /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s; //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  } //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n\n\n  return phi;\n}","map":null,"metadata":{},"sourceType":"module"}