{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean } from \"./context/context\";\nimport { Events } from \"./events\";\nimport { Constants } from \"./constants\";\n\nvar SortController =\n/** @class */\nfunction () {\n  function SortController() {\n    var _this = this; // used by the public api, for saving the sort model\n\n\n    this.getSortModel = function () {\n      return _this.getColumnsWithSortingOrdered().map(function (column) {\n        return {\n          colId: column.getColId(),\n          sort: column.getSort()\n        };\n      });\n    };\n  }\n\n  SortController_1 = SortController;\n\n  SortController.prototype.progressSort = function (column, multiSort, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    var nextDirection = this.getNextSortDirection(column);\n    this.setSortForColumn(column, nextDirection, multiSort, source);\n  };\n\n  SortController.prototype.setSortForColumn = function (column, sort, multiSort, source) {\n    if (source === void 0) {\n      source = \"api\";\n    } // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n\n\n    if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {\n      sort = null;\n    } // update sort on current col\n\n\n    column.setSort(sort, source); // sortedAt used for knowing order of cols when multi-col sort\n\n    if (column.getSort()) {\n      var sortedAt = Number(new Date().valueOf());\n      column.setSortedAt(sortedAt);\n    } else {\n      column.setSortedAt(null);\n    }\n\n    var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort(); // clear sort on all columns except this one, and update the icons\n\n    if (!doingMultiSort) {\n      this.clearSortBarThisColumn(column, source);\n    }\n\n    this.dispatchSortChangedEvents();\n  }; // gets called by API, so if data changes, use can call this, which will end up\n  // working out the sort order again of the rows.\n\n\n  SortController.prototype.onSortChanged = function () {\n    this.dispatchSortChangedEvents();\n  };\n\n  SortController.prototype.dispatchSortChangedEvents = function () {\n    var event = {\n      type: Events.EVENT_SORT_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {\n    this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {\n      // Do not clear if either holding shift, or if column in question was clicked\n      if (!(columnToClear === columnToSkip)) {\n        // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n        // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n        columnToClear.setSort(undefined, source);\n      }\n    });\n  };\n\n  SortController.prototype.getNextSortDirection = function (column) {\n    var sortingOrder;\n\n    if (column.getColDef().sortingOrder) {\n      sortingOrder = column.getColDef().sortingOrder;\n    } else if (this.gridOptionsWrapper.getSortingOrder()) {\n      sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n    } else {\n      sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;\n    }\n\n    if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n      console.warn(\"ag-grid: sortingOrder must be an array with at least one element, currently it's \" + sortingOrder);\n      return null;\n    }\n\n    var currentIndex = sortingOrder.indexOf(column.getSort());\n    var notInArray = currentIndex < 0;\n    var lastItemInArray = currentIndex == sortingOrder.length - 1;\n    var result;\n\n    if (notInArray || lastItemInArray) {\n      result = sortingOrder[0];\n    } else {\n      result = sortingOrder[currentIndex + 1];\n    } // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n\n\n    if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n      console.warn('ag-grid: invalid sort type ' + result);\n      return null;\n    }\n\n    return result;\n  };\n\n  SortController.prototype.setSortModel = function (sortModel, source) {\n    var _this = this;\n\n    if (source === void 0) {\n      source = \"api\";\n    } // first up, clear any previous sort\n\n\n    var sortModelProvided = sortModel && sortModel.length > 0;\n    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n    allColumnsIncludingAuto.forEach(function (column) {\n      var sortForCol = null;\n      var sortedAt = -1;\n\n      if (sortModelProvided && column.getColDef().sortable) {\n        for (var j = 0; j < sortModel.length; j++) {\n          var sortModelEntry = sortModel[j];\n\n          if (typeof sortModelEntry.colId === 'string' && typeof column.getColId() === 'string' && _this.compareColIds(sortModelEntry, column)) {\n            sortForCol = sortModelEntry.sort;\n            sortedAt = j;\n          }\n        }\n      }\n\n      if (sortForCol) {\n        column.setSort(sortForCol, source);\n        column.setSortedAt(sortedAt);\n      } else {\n        column.setSort(null, source);\n        column.setSortedAt(null);\n      }\n    });\n    this.dispatchSortChangedEvents();\n  };\n\n  SortController.prototype.compareColIds = function (sortModelEntry, column) {\n    return sortModelEntry.colId === column.getColId();\n  };\n\n  SortController.prototype.getColumnsWithSortingOrdered = function () {\n    // pull out all the columns that have sorting set\n    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();\n    var columnsWithSorting = allColumnsIncludingAuto.filter(function (column) {\n      return !!column.getSort();\n    }); // put the columns in order of which one got sorted first\n\n    columnsWithSorting.sort(function (a, b) {\n      return a.sortedAt - b.sortedAt;\n    });\n    return columnsWithSorting;\n  }; // used by row controller, when doing the sorting\n\n\n  SortController.prototype.getSortForRowController = function () {\n    return this.getColumnsWithSortingOrdered().map(function (column) {\n      var isAscending = column.getSort() === Constants.SORT_ASC;\n      return {\n        inverter: isAscending ? 1 : -1,\n        column: column\n      };\n    });\n  };\n\n  var SortController_1;\n  SortController.DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];\n\n  __decorate([Autowired('gridOptionsWrapper')], SortController.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnController')], SortController.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('eventService')], SortController.prototype, \"eventService\", void 0);\n\n  __decorate([Autowired('columnApi')], SortController.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], SortController.prototype, \"gridApi\", void 0);\n\n  SortController = SortController_1 = __decorate([Bean('sortController')], SortController);\n  return SortController;\n}();\n\nexport { SortController };","map":null,"metadata":{},"sourceType":"module"}