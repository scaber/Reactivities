{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events } from \"../events\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { _ } from \"../utils\";\n\nvar PaginationProxy =\n/** @class */\nfunction (_super) {\n  __extends(PaginationProxy, _super);\n\n  function PaginationProxy() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.currentPage = 0;\n    _this.topDisplayedRowIndex = 0;\n    _this.bottomDisplayedRowIndex = 0;\n    _this.pixelOffset = 0;\n    _this.masterRowCount = 0;\n    return _this;\n  }\n\n  PaginationProxy.prototype.postConstruct = function () {\n    this.active = this.gridOptionsWrapper.isPagination();\n    this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();\n    this.addDestroyableEventListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n    this.addDestroyableEventListener(this.gridOptionsWrapper, 'paginationPageSize', this.onModelUpdated.bind(this));\n    this.onModelUpdated();\n  };\n\n  PaginationProxy.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());\n\n    if (res) {\n      this.calculatePages();\n    }\n\n    return res;\n  };\n\n  PaginationProxy.prototype.onModelUpdated = function (modelUpdatedEvent) {\n    this.calculatePages();\n    var paginationChangedEvent = {\n      type: Events.EVENT_PAGINATION_CHANGED,\n      animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,\n      newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,\n      newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,\n      keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(paginationChangedEvent);\n  };\n\n  PaginationProxy.prototype.goToPage = function (page) {\n    if (!this.active) {\n      return;\n    }\n\n    if (this.currentPage === page) {\n      return;\n    }\n\n    this.currentPage = page;\n    var event = {\n      type: Events.EVENT_MODEL_UPDATED,\n      animate: false,\n      keepRenderedRows: false,\n      newData: false,\n      newPage: true,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.onModelUpdated(event);\n  };\n\n  PaginationProxy.prototype.getPixelOffset = function () {\n    return this.pixelOffset;\n  };\n\n  PaginationProxy.prototype.getRow = function (index) {\n    return this.rowModel.getRow(index);\n  };\n\n  PaginationProxy.prototype.getRowNode = function (id) {\n    return this.rowModel.getRowNode(id);\n  };\n\n  PaginationProxy.prototype.getRowIndexAtPixel = function (pixel) {\n    return this.rowModel.getRowIndexAtPixel(pixel);\n  };\n\n  PaginationProxy.prototype.getCurrentPageHeight = function () {\n    if (_.missing(this.topRowBounds) || _.missing(this.bottomRowBounds)) {\n      return 0;\n    }\n\n    return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);\n  };\n\n  PaginationProxy.prototype.isRowPresent = function (rowNode) {\n    if (!this.rowModel.isRowPresent(rowNode)) {\n      return false;\n    }\n\n    var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;\n    return nodeIsInPage;\n  };\n\n  PaginationProxy.prototype.isEmpty = function () {\n    return this.rowModel.isEmpty();\n  };\n\n  PaginationProxy.prototype.isRowsToRender = function () {\n    return this.rowModel.isRowsToRender();\n  };\n\n  PaginationProxy.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);\n  };\n\n  PaginationProxy.prototype.forEachNode = function (callback) {\n    return this.rowModel.forEachNode(callback);\n  };\n\n  PaginationProxy.prototype.getType = function () {\n    return this.rowModel.getType();\n  };\n\n  PaginationProxy.prototype.getRowBounds = function (index) {\n    var res = this.rowModel.getRowBounds(index);\n    res.rowIndex = index;\n    return res;\n  };\n\n  PaginationProxy.prototype.getPageFirstRow = function () {\n    return this.topRowBounds ? this.topRowBounds.rowIndex : -1;\n  };\n\n  PaginationProxy.prototype.getPageLastRow = function () {\n    return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;\n  };\n\n  PaginationProxy.prototype.getRowCount = function () {\n    return this.rowModel.getRowCount();\n  };\n\n  PaginationProxy.prototype.goToPageWithIndex = function (index) {\n    if (!this.active) {\n      return;\n    }\n\n    var pageNumber = Math.floor(index / this.pageSize);\n    this.goToPage(pageNumber);\n  };\n\n  PaginationProxy.prototype.isLastPageFound = function () {\n    return this.rowModel.isLastRowFound();\n  };\n\n  PaginationProxy.prototype.getCurrentPage = function () {\n    return this.currentPage;\n  };\n\n  PaginationProxy.prototype.goToNextPage = function () {\n    this.goToPage(this.currentPage + 1);\n  };\n\n  PaginationProxy.prototype.goToPreviousPage = function () {\n    this.goToPage(this.currentPage - 1);\n  };\n\n  PaginationProxy.prototype.goToFirstPage = function () {\n    this.goToPage(0);\n  };\n\n  PaginationProxy.prototype.goToLastPage = function () {\n    var rowCount = this.rowModel.getRowCount();\n    var lastPage = Math.floor(rowCount / this.pageSize);\n    this.goToPage(lastPage);\n  };\n\n  PaginationProxy.prototype.getPageSize = function () {\n    return this.pageSize;\n  };\n\n  PaginationProxy.prototype.getTotalPages = function () {\n    return this.totalPages;\n  };\n\n  PaginationProxy.prototype.setPageSize = function () {\n    // show put this into super class\n    this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();\n\n    if (!(this.pageSize >= 1)) {\n      this.pageSize = 100;\n    }\n  };\n\n  PaginationProxy.prototype.calculatePages = function () {\n    if (this.active) {\n      this.setPageSize();\n\n      if (this.paginateChildRows) {\n        this.calculatePagesAllRows();\n      } else {\n        this.calculatePagesMasterRowsOnly();\n      }\n    } else {\n      this.calculatedPagesNotActive();\n    }\n\n    this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);\n\n    if (this.topRowBounds) {\n      this.topRowBounds.rowIndex = this.topDisplayedRowIndex;\n    }\n\n    this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);\n\n    if (this.bottomRowBounds) {\n      this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;\n    }\n\n    this.pixelOffset = _.exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;\n  };\n\n  PaginationProxy.prototype.setZeroRows = function () {\n    this.topDisplayedRowIndex = 0;\n    this.bottomDisplayedRowIndex = -1;\n    this.currentPage = 0;\n    this.totalPages = 0;\n  };\n\n  PaginationProxy.prototype.calculatePagesMasterRowsOnly = function () {\n    // const csrm = <ClientSideRowModel> this.rowModel;\n    // const rootNode = csrm.getRootNode();\n    // const masterRows = rootNode.childrenAfterSort;\n    this.masterRowCount = this.rowModel.getTopLevelRowCount();\n\n    if (this.masterRowCount === 0) {\n      this.setZeroRows();\n      return;\n    }\n\n    var masterLastRowIndex = this.masterRowCount - 1;\n    this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;\n\n    if (this.currentPage >= this.totalPages) {\n      this.currentPage = this.totalPages - 1;\n    }\n\n    if (!_.isNumeric(this.currentPage) || this.currentPage < 0) {\n      this.currentPage = 0;\n    }\n\n    var masterPageStartIndex = this.pageSize * this.currentPage;\n    var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;\n\n    if (masterPageEndIndex > masterLastRowIndex) {\n      masterPageEndIndex = masterLastRowIndex;\n    }\n\n    this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex); // masterRows[masterPageStartIndex].rowIndex;\n\n    if (masterPageEndIndex === masterLastRowIndex) {\n      // if showing the last master row, then we want to show the very last row of the model\n      this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n    } else {\n      var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1); //masterRows[masterPageEndIndex + 1].rowIndex;\n      // this gets the index of the last child - eg current row is open, we want to display all children,\n      // the index of the last child is one less than the index of the next parent row.\n\n      this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;\n    }\n  };\n\n  PaginationProxy.prototype.getMasterRowCount = function () {\n    return this.masterRowCount;\n  };\n\n  PaginationProxy.prototype.calculatePagesAllRows = function () {\n    this.masterRowCount = this.rowModel.getRowCount();\n\n    if (this.masterRowCount === 0) {\n      this.setZeroRows();\n      return;\n    }\n\n    var maxRowIndex = this.masterRowCount - 1;\n    this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;\n\n    if (this.currentPage >= this.totalPages) {\n      this.currentPage = this.totalPages - 1;\n    }\n\n    if (!_.isNumeric(this.currentPage) || this.currentPage < 0) {\n      this.currentPage = 0;\n    }\n\n    this.topDisplayedRowIndex = this.pageSize * this.currentPage;\n    this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;\n\n    if (this.bottomDisplayedRowIndex > maxRowIndex) {\n      this.bottomDisplayedRowIndex = maxRowIndex;\n    }\n  };\n\n  PaginationProxy.prototype.calculatedPagesNotActive = function () {\n    this.pageSize = this.rowModel.getRowCount();\n    this.totalPages = 1;\n    this.currentPage = 0;\n    this.topDisplayedRowIndex = 0;\n    this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n  };\n\n  __decorate([Autowired('rowModel')], PaginationProxy.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('eventService')], PaginationProxy.prototype, \"eventService\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], PaginationProxy.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('selectionController')], PaginationProxy.prototype, \"selectionController\", void 0);\n\n  __decorate([Autowired('columnApi')], PaginationProxy.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], PaginationProxy.prototype, \"gridApi\", void 0);\n\n  __decorate([PostConstruct], PaginationProxy.prototype, \"postConstruct\", null);\n\n  PaginationProxy = __decorate([Bean('paginationProxy')], PaginationProxy);\n  return PaginationProxy;\n}(BeanStub);\n\nexport { PaginationProxy };","map":null,"metadata":{},"sourceType":"module"}