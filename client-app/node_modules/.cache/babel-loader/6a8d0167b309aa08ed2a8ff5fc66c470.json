{"ast":null,"code":"import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport format from '../format/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @param {Date|String|Number} date - the date to format\n * @param {Date|String|Number} baseDate - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the date in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.locale` must contain `formatRelative` property\n */\n\nexport default function formatRelative(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var baseDate = toDate(dirtyBaseDate, dirtyOptions);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  if (!locale.formatRelative) {\n    throw new RangeError('locale must contain formatRelative property');\n  }\n\n  var diff = differenceInCalendarDays(date, baseDate, options);\n\n  if (isNaN(diff)) {\n    return 'Invalid Date';\n  }\n\n  var token;\n\n  if (diff < -6) {\n    token = 'other';\n  } else if (diff < -1) {\n    token = 'lastWeek';\n  } else if (diff < 0) {\n    token = 'yesterday';\n  } else if (diff < 1) {\n    token = 'today';\n  } else if (diff < 2) {\n    token = 'tomorrow';\n  } else if (diff < 7) {\n    token = 'nextWeek';\n  } else {\n    token = 'other';\n  }\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date), options);\n  var utcBaseDate = subMilliseconds(baseDate, getTimezoneOffsetInMilliseconds(baseDate), options);\n  var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, options);\n  return format(date, formatStr, options);\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/formatRelative/index.js"],"names":["getTimezoneOffsetInMilliseconds","toDate","format","differenceInCalendarDays","defaultLocale","subMilliseconds","formatRelative","dirtyDate","dirtyBaseDate","dirtyOptions","arguments","length","TypeError","date","baseDate","options","locale","localize","RangeError","formatLong","diff","isNaN","token","utcDate","utcBaseDate","formatStr"],"mappings":"AAAA,OAAOA,+BAAP,MAA4C,kDAA5C;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,wBAAP,MAAqC,sCAArC;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,eAAe,SAASC,cAAT,CAAyBC,SAAzB,EAAoCC,aAApC,EAAmDC,YAAnD,EAAiE;AAC9E,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,IAAI,GAAGZ,MAAM,CAACM,SAAD,EAAYE,YAAZ,CAAjB;AACA,MAAIK,QAAQ,GAAGb,MAAM,CAACO,aAAD,EAAgBC,YAAhB,CAArB;AAEA,MAAIM,OAAO,GAAGN,YAAY,IAAI,EAA9B;AACA,MAAIO,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkBZ,aAA/B;;AAEA,MAAI,CAACY,MAAM,CAACC,QAAZ,EAAsB;AACpB,UAAM,IAAIC,UAAJ,CAAe,uCAAf,CAAN;AACD;;AAED,MAAI,CAACF,MAAM,CAACG,UAAZ,EAAwB;AACtB,UAAM,IAAID,UAAJ,CAAe,yCAAf,CAAN;AACD;;AAED,MAAI,CAACF,MAAM,CAACV,cAAZ,EAA4B;AAC1B,UAAM,IAAIY,UAAJ,CAAe,6CAAf,CAAN;AACD;;AAED,MAAIE,IAAI,GAAGjB,wBAAwB,CAACU,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,CAAnC;;AAEA,MAAIM,KAAK,CAACD,IAAD,CAAT,EAAiB;AACf,WAAO,cAAP;AACD;;AAED,MAAIE,KAAJ;;AACA,MAAIF,IAAI,GAAG,CAAC,CAAZ,EAAe;AACbE,IAAAA,KAAK,GAAG,OAAR;AACD,GAFD,MAEO,IAAIF,IAAI,GAAG,CAAC,CAAZ,EAAe;AACpBE,IAAAA,KAAK,GAAG,UAAR;AACD,GAFM,MAEA,IAAIF,IAAI,GAAG,CAAX,EAAc;AACnBE,IAAAA,KAAK,GAAG,WAAR;AACD,GAFM,MAEA,IAAIF,IAAI,GAAG,CAAX,EAAc;AACnBE,IAAAA,KAAK,GAAG,OAAR;AACD,GAFM,MAEA,IAAIF,IAAI,GAAG,CAAX,EAAc;AACnBE,IAAAA,KAAK,GAAG,UAAR;AACD,GAFM,MAEA,IAAIF,IAAI,GAAG,CAAX,EAAc;AACnBE,IAAAA,KAAK,GAAG,UAAR;AACD,GAFM,MAEA;AACLA,IAAAA,KAAK,GAAG,OAAR;AACD;;AAED,MAAIC,OAAO,GAAGlB,eAAe,CAACQ,IAAD,EAAOb,+BAA+B,CAACa,IAAD,CAAtC,EAA8CE,OAA9C,CAA7B;AACA,MAAIS,WAAW,GAAGnB,eAAe,CAACS,QAAD,EAAWd,+BAA+B,CAACc,QAAD,CAA1C,EAAsDC,OAAtD,CAAjC;AACA,MAAIU,SAAS,GAAGT,MAAM,CAACV,cAAP,CAAsBgB,KAAtB,EAA6BC,OAA7B,EAAsCC,WAAtC,EAAmDT,OAAnD,CAAhB;AACA,SAAOb,MAAM,CAACW,IAAD,EAAOY,SAAP,EAAkBV,OAAlB,CAAb;AACD","sourcesContent":["import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport toDate from '../toDate/index.js'\nimport format from '../format/index.js'\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js'\nimport defaultLocale from '../locale/en-US/index.js'\nimport subMilliseconds from '../subMilliseconds/index.js'\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @param {Date|String|Number} date - the date to format\n * @param {Date|String|Number} baseDate - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the date in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.locale` must contain `formatRelative` property\n */\nexport default function formatRelative (dirtyDate, dirtyBaseDate, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions)\n  var baseDate = toDate(dirtyBaseDate, dirtyOptions)\n\n  var options = dirtyOptions || {}\n  var locale = options.locale || defaultLocale\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property')\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property')\n  }\n\n  if (!locale.formatRelative) {\n    throw new RangeError('locale must contain formatRelative property')\n  }\n\n  var diff = differenceInCalendarDays(date, baseDate, options)\n\n  if (isNaN(diff)) {\n    return 'Invalid Date'\n  }\n\n  var token\n  if (diff < -6) {\n    token = 'other'\n  } else if (diff < -1) {\n    token = 'lastWeek'\n  } else if (diff < 0) {\n    token = 'yesterday'\n  } else if (diff < 1) {\n    token = 'today'\n  } else if (diff < 2) {\n    token = 'tomorrow'\n  } else if (diff < 7) {\n    token = 'nextWeek'\n  } else {\n    token = 'other'\n  }\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date), options)\n  var utcBaseDate = subMilliseconds(baseDate, getTimezoneOffsetInMilliseconds(baseDate), options)\n  var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, options)\n  return format(date, formatStr, options)\n}\n"]},"metadata":{},"sourceType":"module"}