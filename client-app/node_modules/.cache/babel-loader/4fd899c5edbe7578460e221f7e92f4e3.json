{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.TimeLayerSliderPanel = void 0;\n\nrequire(\"antd/es/popover/style\");\n\nvar _popover = _interopRequireDefault(require(\"antd/es/popover\"));\n\nrequire(\"antd/es/select/style\");\n\nvar _select = _interopRequireDefault(require(\"antd/es/select\"));\n\nrequire(\"antd/es/date-picker/style\");\n\nvar _datePicker = _interopRequireDefault(require(\"antd/es/date-picker\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _index = require(\"../../index\");\n\nrequire(\"./TimeLayerSliderPanel.less\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // import _get from 'lodash/get';\n\n\nvar _isFinite = require('lodash/isFinite');\n\nvar _isEqual = require('lodash/isEqual');\n\nvar RangePicker = _datePicker[\"default\"].RangePicker;\nvar Option = _select[\"default\"].Option;\n/**\n * The panel combining all time slider related parts.\n */\n\nvar TimeLayerSliderPanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TimeLayerSliderPanel, _React$Component);\n  /**\n   * The default props of LayerSetBaseMapChooser\n   *\n   * @static\n   * @memberof LayerSetBaseMapChooser\n   */\n\n  /**\n   * Constructs time panel.\n   */\n\n\n  function TimeLayerSliderPanel(props) {\n    var _this2 = this;\n\n    var _this;\n\n    _classCallCheck(this, TimeLayerSliderPanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeLayerSliderPanel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_TimeLayerAwareSlider\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_wmsTimeLayers\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_interval\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"wrapTimeSlider\", function () {\n      _this._wmsTimeLayers = [];\n\n      _this.props.timeAwareLayers.forEach(function (l) {\n        if (l.get('type') === 'WMSTime') {\n          _this._wmsTimeLayers.push({\n            layer: l\n          });\n        }\n      }); // make sure an initial value is set\n\n\n      _this.wmsTimeHandler(_this.state.value);\n\n      _this._TimeLayerAwareSlider = (0, _index.timeLayerAware)(_index.TimeSlider, _this._wmsTimeLayers);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"findRangeForLayers\", function () {\n      var timeAwareLayers = _this.props.timeAwareLayers;\n      var _this$state = _this.state,\n          startDate = _this$state.startDate,\n          endDate = _this$state.endDate;\n\n      if (timeAwareLayers.length === 0) {\n        return;\n      }\n\n      var newStartDate;\n      var newEndDate;\n      var startDatesFromLayers = [];\n      var endDatesFromLayers = [];\n\n      _this._wmsTimeLayers.forEach(function (l) {\n        var layerStartDate = l.layer.get('startDate');\n        var layerEndDate = l.layer.get('endDate');\n        var sdm;\n        var edm;\n\n        if (layerStartDate) {\n          sdm = (0, _moment[\"default\"])(l.layer.get('startDate'));\n        }\n\n        if (layerEndDate) {\n          edm = (0, _moment[\"default\"])(l.layer.get('endDate'));\n        }\n\n        if (sdm) {\n          startDatesFromLayers.push(sdm);\n        }\n\n        if (edm) {\n          endDatesFromLayers.push(edm);\n        }\n      });\n\n      newStartDate = startDatesFromLayers.length > 0 ? _moment[\"default\"].min(startDatesFromLayers) : startDate;\n      newEndDate = endDatesFromLayers.length > 0 ? _moment[\"default\"].max(endDatesFromLayers) : endDate;\n\n      _this.updateDataRange([newStartDate, newEndDate]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"timeSliderCustomHandler\", function (value) {\n      var currentMoment = (0, _moment[\"default\"])(value).milliseconds(0);\n      var newValue = currentMoment.clone();\n\n      _this.setState({\n        value: newValue\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(newValue);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"wmsTimeHandler\", function (value) {\n      _this._wmsTimeLayers.forEach(function (config) {\n        if (config.layer && config.layer.get('type') === 'WMSTime') {\n          var params = config.layer.getSource().getParams();\n          var time;\n\n          if (Array.isArray(value)) {\n            time = value[0];\n          } else {\n            time = value;\n          }\n\n          if (!_moment[\"default\"].isMoment(time)) {\n            time = (0, _moment[\"default\"])(time);\n          }\n\n          var timeFormat = config.layer.get('timeFormat');\n\n          if (timeFormat.toLowerCase().indexOf('hh') > 0 && config.layer.get('roundToFullHours')) {\n            time.set('minute', 0);\n            time.set('second', 0);\n            params.TIME = time.toISOString();\n          } else {\n            params.TIME = time.format(timeFormat);\n          }\n\n          config.layer.getSource().updateParams(params);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlaybackSpeedChange\", function (val) {\n      var valueToSet;\n\n      if (_isFinite(parseFloat(val))) {\n        valueToSet = parseFloat(val);\n      } else {\n        valueToSet = val;\n      }\n\n      _this.setState({\n        playbackSpeed: valueToSet\n      }, function () {\n        if (_this.state.autoPlayActive) {\n          _this.autoPlay(true);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSliderToNow\", function () {\n      var now = (0, _moment[\"default\"])().milliseconds(0);\n\n      _this.setState({\n        value: now,\n        endDate: now\n      }, function () {\n        _this.timeSliderCustomHandler(now);\n\n        _this.wmsTimeHandler(now);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      var _this$props = _this.props,\n          className = _this$props.className,\n          timeAwareLayers = _this$props.timeAwareLayers,\n          dateFormat = _this$props.dateFormat,\n          tooltips = _this$props.tooltips,\n          autoPlaySpeedOptions = _this$props.autoPlaySpeedOptions;\n      var _this$state2 = _this.state,\n          autoPlayActive = _this$state2.autoPlayActive,\n          value = _this$state2.value,\n          startDate = _this$state2.startDate,\n          endDate = _this$state2.endDate;\n      var resetVisible = true;\n      var startDateString = startDate ? startDate.toISOString() : undefined;\n      var endDateString = endDate ? endDate.toISOString() : undefined;\n      var valueString = value ? value.toISOString() : undefined;\n      var mid = startDate.clone().add(endDate.diff(startDate) / 2);\n      var marks = {};\n      var futureClass = (0, _moment[\"default\"])().isBefore(value) ? ' timeslider-in-future' : '';\n      var extraCls = className ? className : '';\n      var disabledCls = timeAwareLayers.length < 1 ? 'no-layers-available' : '';\n      marks[startDateString] = {\n        label: startDate.format(dateFormat)\n      };\n      marks[endDateString] = {\n        label: endDate.format(dateFormat),\n        style: {\n          left: 'unset',\n          right: 0,\n          transform: 'translate(50%)'\n        }\n      };\n      marks[mid.toISOString()] = {\n        label: mid.format(dateFormat)\n      };\n      var speedOptions = autoPlaySpeedOptions.map(function (val) {\n        return React.createElement(Option, {\n          key: val,\n          value: val\n        }, val);\n      });\n      return React.createElement(\"div\", {\n        className: \"time-layer-slider \".concat(disabledCls).trim()\n      }, React.createElement(_popover[\"default\"], {\n        placement: \"topRight\",\n        title: tooltips.dataRange,\n        trigger: \"click\",\n        content: React.createElement(RangePicker, {\n          showTime: {\n            format: 'HH:mm'\n          },\n          defaultValue: [startDate, endDate],\n          onOk: _this.updateDataRange\n        })\n      }, React.createElement(_index.SimpleButton, {\n        className: \"change-datarange-button\",\n        icon: \"calendar-o\"\n      })), resetVisible ? React.createElement(_index.SimpleButton, {\n        type: \"primary\",\n        icon: \"refresh\",\n        onClick: _this.setSliderToNow,\n        tooltip: tooltips.setToNow\n      }) : null, React.createElement(_this2._TimeLayerAwareSlider, {\n        className: \"\".concat(extraCls, \" timeslider \").concat(futureClass).trim(),\n        formatString: dateFormat,\n        defaultValue: startDateString,\n        min: startDateString,\n        max: endDateString,\n        value: valueString,\n        marks: marks,\n        onChange: _this.onTimeChanged\n      }), React.createElement(\"div\", {\n        className: \"time-value\"\n      }, value.format('DD.MM.YYYY HH:mm:ss')), React.createElement(_index.ToggleButton, {\n        type: \"primary\",\n        icon: \"play-circle-o\",\n        className: extraCls + ' playback',\n        pressed: autoPlayActive,\n        onToggle: _this.autoPlay,\n        tooltip: autoPlayActive ? 'Pause' : 'Autoplay',\n        pressedIcon: \"pause-circle-o\"\n      }), React.createElement(_select[\"default\"], {\n        defaultValue: '1',\n        className: extraCls + ' speed-picker',\n        onChange: _this.onPlaybackSpeedChange\n      }, speedOptions, React.createElement(Option, {\n        value: \"hours\"\n      }, tooltips.hours), React.createElement(Option, {\n        value: \"days\"\n      }, tooltips.days), React.createElement(Option, {\n        value: \"weeks\"\n      }, tooltips.weeks), React.createElement(Option, {\n        value: \"months\"\n      }, tooltips.months), React.createElement(Option, {\n        value: \"years\"\n      }, tooltips.years)));\n    });\n\n    _this.state = {\n      value: (0, _moment[\"default\"])().milliseconds(0),\n      playbackSpeed: 1,\n      autoPlayActive: false,\n      startDate: (0, _moment[\"default\"])().milliseconds(0),\n      endDate: (0, _moment[\"default\"])().milliseconds(0)\n    };\n    _this._interval = 1000;\n\n    _this.wrapTimeSlider(); // binds\n\n\n    _this.onTimeChanged = _this.onTimeChanged.bind(_assertThisInitialized(_this));\n    _this.autoPlay = _this.autoPlay.bind(_assertThisInitialized(_this));\n    _this.updateDataRange = _this.updateDataRange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TimeLayerSliderPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props2 = this.props,\n          initStartDate = _this$props2.initStartDate,\n          initEndDate = _this$props2.initEndDate;\n      this.setState({\n        startDate: initStartDate,\n        endDate: initEndDate\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n\n      prevProps.timeAwareLayers.forEach(function (pl, i) {\n        var tpl = _this3.props.timeAwareLayers[i];\n\n        if (!_isEqual(pl.ol_uid, tpl.ol_uid)) {\n          // update slider properties if layers were updated\n          _this3.wrapTimeSlider();\n\n          _this3.findRangeForLayers();\n        }\n      });\n    }\n    /**\n     *\n     * @param nextProps\n     * @param nextState\n     */\n\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _this$state3 = this.state,\n          value = _this$state3.value,\n          autoPlayActive = _this$state3.autoPlayActive,\n          startDate = _this$state3.startDate,\n          endDate = _this$state3.endDate;\n      var _this$props3 = this.props,\n          timeAwareLayers = _this$props3.timeAwareLayers,\n          tooltips = _this$props3.tooltips;\n\n      if (nextState.value !== value) {\n        return true;\n      }\n\n      if (nextState.autoPlayActive !== autoPlayActive) {\n        return true;\n      }\n\n      if (nextState.startDate !== startDate) {\n        return true;\n      }\n\n      if (nextState.endDate !== endDate) {\n        return true;\n      }\n\n      if (!_isEqual(nextProps.timeAwareLayers, timeAwareLayers)) {\n        return true;\n      }\n\n      if (!_isEqual(nextProps.tooltips, tooltips)) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Wraps the TimeSlider component in timeLayerAware.\n     */\n\n  }, {\n    key: \"autoPlay\",\n\n    /**\n     * start or stop auto playback\n     * TODO: we should do the request for new features less aggresive,\n     * e.g. a precache would be helpful\n     */\n    value: function autoPlay(pressed) {\n      var _this4 = this;\n\n      if (pressed) {\n        window.clearInterval(this._interval);\n        this._interval = window.setInterval(function () {\n          var endDate = _this4.state.endDate;\n          var _this4$state = _this4.state,\n              value = _this4$state.value,\n              playbackSpeed = _this4$state.playbackSpeed;\n\n          if (value >= endDate) {\n            window.clearInterval(_this4._interval);\n\n            _this4.setState({\n              autoPlayActive: false\n            });\n\n            return;\n          }\n\n          var newValue;\n\n          if (_isFinite(playbackSpeed)) {\n            newValue = value.clone().add(playbackSpeed, 'seconds');\n          } else {\n            newValue = value.clone().add(1, playbackSpeed);\n          }\n\n          _this4.timeSliderCustomHandler(newValue);\n\n          _this4.wmsTimeHandler(newValue); // value is handled in timeSliderCustomHandler\n\n\n          _this4.setState({\n            autoPlayActive: true\n          });\n        }, 1000, this);\n      } else {\n        window.clearInterval(this._interval);\n        this.setState({\n          autoPlayActive: false\n        });\n      }\n    }\n    /**\n     * handle playback speed change\n     */\n\n  }, {\n    key: \"updateDataRange\",\n\n    /**\n     *\n     */\n    value: function updateDataRange(_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          startDate = _ref2[0],\n          endDate = _ref2[1];\n\n      this.setState({\n        startDate: startDate,\n        endDate: endDate\n      });\n    }\n    /**\n     *\n     * @param val\n     */\n\n  }, {\n    key: \"onTimeChanged\",\n    value: function onTimeChanged(val) {\n      var _this5 = this;\n\n      this.setState({\n        value: (0, _moment[\"default\"])(val)\n      }, function () {\n        _this5.wmsTimeHandler(_this5.state.value);\n      });\n    }\n    /**\n     *\n     *\n     * @memberof TimeLayerSliderPanel\n     */\n\n  }]);\n\n  return TimeLayerSliderPanel;\n}(React.Component);\n\nexports.TimeLayerSliderPanel = TimeLayerSliderPanel;\n\n_defineProperty(TimeLayerSliderPanel, \"defaultProps\", {\n  className: '',\n  onChange: function onChange() {},\n  timeAwareLayers: [],\n  value: (0, _moment[\"default\"])(_moment[\"default\"].now()),\n  dateFormat: 'YYYY-MM-DD',\n  tooltips: {\n    setToNow: 'Set to now',\n    hours: 'Hours',\n    days: 'Days',\n    weeks: 'Weeks',\n    months: 'Months',\n    years: 'Years',\n    dataRange: 'Set data range'\n  },\n  autoPlaySpeedOptions: [0.5, 1, 2, 5, 10, 100, 300]\n});\n\nvar _default = TimeLayerSliderPanel;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}