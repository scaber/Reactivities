{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\n\nvar HandshakeProtocol =\n/** @class */\nfunction () {\n  function HandshakeProtocol() {} // Handshake request is always JSON\n\n\n  HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {\n    return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  };\n\n  HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {\n    var responseMessage;\n    var messageData;\n    var remainingData;\n\n    if (isArrayBuffer(data) || typeof Buffer !== \"undefined\" && data instanceof Buffer) {\n      // Format is binary but still need to read JSON text from handshake response\n      var binaryData = new Uint8Array(data);\n      var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      var responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      var textData = data;\n      var separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      var responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    } // At this point we should have just the single handshake message\n\n\n    var messages = TextMessageFormat.parse(messageData);\n    var response = JSON.parse(messages[0]);\n\n    if (response.type) {\n      throw new Error(\"Expected a handshake response from the server.\");\n    }\n\n    responseMessage = response; // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n\n    return [remainingData, responseMessage];\n  };\n\n  return HandshakeProtocol;\n}();\n\nexport { HandshakeProtocol };","map":{"version":3,"sources":["../../src/HandshakeProtocol.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,aAAT,QAA8B,SAA9B;AAaA;;AACA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CAkDC,CAlDD,CACI;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,qBAAA,GAAP,UAA6B,gBAA7B,EAAsE;AAClE,WAAO,iBAAiB,CAAC,KAAlB,CAAwB,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAxB,CAAP;AACH,GAFM;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,UAA8B,IAA9B,EAAuC;AACnC,QAAI,eAAJ;AACA,QAAI,WAAJ;AACA,QAAI,aAAJ;;AAEA,QAAI,aAAa,CAAC,IAAD,CAAb,IAAwB,OAAO,MAAP,KAAkB,WAAlB,IAAiC,IAAI,YAAY,MAA7E,EAAsF;AAClF;AACA,UAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,IAAf,CAAnB;AACA,UAAM,cAAc,GAAG,UAAU,CAAC,OAAX,CAAmB,iBAAiB,CAAC,mBAArC,CAAvB;;AACA,UAAI,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvB,cAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACH,OANiF,CAQlF;AACA;;;AACA,UAAM,cAAc,GAAG,cAAc,GAAG,CAAxC;AACA,MAAA,WAAW,GAAG,MAAM,CAAC,YAAP,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,cAApB,CAAhC,CAAd;AACA,MAAA,aAAa,GAAI,UAAU,CAAC,UAAX,GAAwB,cAAzB,GAA2C,UAAU,CAAC,KAAX,CAAiB,cAAjB,EAAiC,MAA5E,GAAqF,IAArG;AACH,KAbD,MAaO;AACH,UAAM,QAAQ,GAAW,IAAzB;AACA,UAAM,cAAc,GAAG,QAAQ,CAAC,OAAT,CAAiB,iBAAiB,CAAC,eAAnC,CAAvB;;AACA,UAAI,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvB,cAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACH,OALE,CAOH;AACA;;;AACA,UAAM,cAAc,GAAG,cAAc,GAAG,CAAxC;AACA,MAAA,WAAW,GAAG,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,cAAtB,CAAd;AACA,MAAA,aAAa,GAAI,QAAQ,CAAC,MAAT,GAAkB,cAAnB,GAAqC,QAAQ,CAAC,SAAT,CAAmB,cAAnB,CAArC,GAA0E,IAA1F;AACH,KA9BkC,CAgCnC;;;AACA,QAAM,QAAQ,GAAG,iBAAiB,CAAC,KAAlB,CAAwB,WAAxB,CAAjB;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,CAAD,CAAnB,CAAjB;;AACA,QAAI,QAAQ,CAAC,IAAb,EAAmB;AACf,YAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,IAAA,eAAe,GAAG,QAAlB,CAtCmC,CAwCnC;AACA;;AACA,WAAO,CAAC,aAAD,EAAgB,eAAhB,CAAP;AACH,GA3CM;;AA4CX,SAAA,iBAAA;AAAC,CAlDD,EAAA","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data) || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}