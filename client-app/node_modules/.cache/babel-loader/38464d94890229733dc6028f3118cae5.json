{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\nimport { isArrayBuffer } from \"./Utils\";\nvar requestModule;\n\nif (typeof XMLHttpRequest === \"undefined\") {\n  // In order to ignore the dynamic require in webpack builds we need to do this magic\n  // @ts-ignore: TS doesn't know about these names\n  var requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n  requestModule = requireFunc(\"request\");\n}\n\nvar NodeHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(NodeHttpClient, _super);\n\n  function NodeHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    if (typeof requestModule === \"undefined\") {\n      throw new Error(\"The 'request' module could not be loaded.\");\n    }\n\n    _this.logger = logger;\n    _this.cookieJar = requestModule.jar();\n    _this.request = requestModule.defaults({\n      jar: _this.cookieJar\n    });\n    return _this;\n  }\n\n  NodeHttpClient.prototype.send = function (httpRequest) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var requestBody;\n\n      if (isArrayBuffer(httpRequest.content)) {\n        requestBody = Buffer.from(httpRequest.content);\n      } else {\n        requestBody = httpRequest.content || \"\";\n      }\n\n      var currentRequest = _this.request(httpRequest.url, {\n        body: requestBody,\n        // If binary is expected 'null' should be used, otherwise for text 'utf8'\n        encoding: httpRequest.responseType === \"arraybuffer\" ? null : \"utf8\",\n        headers: __assign({\n          // Tell auth middleware to 401 instead of redirecting\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        }, httpRequest.headers),\n        method: httpRequest.method,\n        timeout: httpRequest.timeout\n      }, function (error, response, body) {\n        if (httpRequest.abortSignal) {\n          httpRequest.abortSignal.onabort = null;\n        }\n\n        if (error) {\n          if (error.code === \"ETIMEDOUT\") {\n            _this.logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n\n            reject(new TimeoutError());\n          }\n\n          _this.logger.log(LogLevel.Warning, \"Error from HTTP request. \" + error);\n\n          reject(error);\n          return;\n        }\n\n        if (response.statusCode >= 200 && response.statusCode < 300) {\n          resolve(new HttpResponse(response.statusCode, response.statusMessage || \"\", body));\n        } else {\n          reject(new HttpError(response.statusMessage || \"\", response.statusCode || 0));\n        }\n      });\n\n      if (httpRequest.abortSignal) {\n        httpRequest.abortSignal.onabort = function () {\n          currentRequest.abort();\n          reject(new AbortError());\n        };\n      }\n    });\n  };\n\n  NodeHttpClient.prototype.getCookieString = function (url) {\n    return this.cookieJar.getCookieString(url);\n  };\n\n  return NodeHttpClient;\n}(HttpClient);\n\nexport { NodeHttpClient };","map":{"version":3,"sources":["../../src/NodeHttpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport * as Request from \"@types/request\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nlet requestModule: Request.RequestAPI<Request.Request, Request.CoreOptions, Request.RequiredUriUrl>;\r\nif (typeof XMLHttpRequest === \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    requestModule = requireFunc(\"request\");\r\n}\r\n\r\nexport class NodeHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n    private readonly request: typeof requestModule;\r\n    private readonly cookieJar: Request.CookieJar;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        if (typeof requestModule === \"undefined\") {\r\n            throw new Error(\"The 'request' module could not be loaded.\");\r\n        }\r\n\r\n        this.logger = logger;\r\n        this.cookieJar = requestModule.jar();\r\n        this.request = requestModule.defaults({ jar: this.cookieJar });\r\n    }\r\n\r\n    public send(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n\r\n            let requestBody: Buffer | string;\r\n            if (isArrayBuffer(httpRequest.content)) {\r\n                requestBody = Buffer.from(httpRequest.content);\r\n            } else {\r\n                requestBody = httpRequest.content || \"\";\r\n            }\r\n\r\n            const currentRequest = this.request(httpRequest.url!, {\r\n                body: requestBody,\r\n                // If binary is expected 'null' should be used, otherwise for text 'utf8'\r\n                encoding: httpRequest.responseType === \"arraybuffer\" ? null : \"utf8\",\r\n                headers: {\r\n                    // Tell auth middleware to 401 instead of redirecting\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...httpRequest.headers,\r\n                },\r\n                method: httpRequest.method,\r\n                timeout: httpRequest.timeout,\r\n            },\r\n            (error, response, body) => {\r\n                if (httpRequest.abortSignal) {\r\n                    httpRequest.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (error) {\r\n                    if (error.code === \"ETIMEDOUT\") {\r\n                        this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                        reject(new TimeoutError());\r\n                    }\r\n                    this.logger.log(LogLevel.Warning, `Error from HTTP request. ${error}`);\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                if (response.statusCode >= 200 && response.statusCode < 300) {\r\n                    resolve(new HttpResponse(response.statusCode, response.statusMessage || \"\", body));\r\n                } else {\r\n                    reject(new HttpError(response.statusMessage || \"\", response.statusCode || 0));\r\n                }\r\n            });\r\n\r\n            if (httpRequest.abortSignal) {\r\n                httpRequest.abortSignal.onabort = () => {\r\n                    currentRequest.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.cookieJar.getCookieString(url);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}