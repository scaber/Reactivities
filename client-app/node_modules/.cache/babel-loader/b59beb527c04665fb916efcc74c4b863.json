{"ast":null,"code":"import _objectSpread from\"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import _slicedToArray from\"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect}from'react';import{Segment,Form,Button,Grid}from'semantic-ui-react';import{ActivityFormValues}from'../../../app/models/activity';import{v4 as uuid}from'uuid';import{observer}from'mobx-react-lite';import{Form as FinalForm,Field}from'react-final-form';import TextInput from'../../../app/common/form/TextInput';import TextAreaInput from'../../../app/common/form/TextAreaInput';import SelectInput from'../../../app/common/form/SelectInput';import DateInput from'../../../app/common/form/DateInput';import{category}from'../../../app/common/options/categoryOptions';import{combineDateAndTime}from'../../../app/common/util/util';import{combineValidators,isRequired,composeValidators,hasLengthGreaterThan}from'revalidate';import{RootStoreContext}from'../../../app/stores/rootStore';var validate=combineValidators({title:isRequired({message:'The event title is required'}),category:isRequired('Category'),description:composeValidators(isRequired('Description'),hasLengthGreaterThan(4)({message:'Description needs to be at least 5 characters'}))(),city:isRequired('City'),venue:isRequired('Venue'),date:isRequired('Date'),time:isRequired('Time')});var ActivityForm=function ActivityForm(_ref){var match=_ref.match,history=_ref.history;var rootStore=useContext(RootStoreContext);var _rootStore$activitySt=rootStore.activityStore,createActivity=_rootStore$activitySt.createActivity,editActivity=_rootStore$activitySt.editActivity,submitting=_rootStore$activitySt.submitting,loadActivity=_rootStore$activitySt.loadActivity;var _useState=useState(new ActivityFormValues()),_useState2=_slicedToArray(_useState,2),activity=_useState2[0],setActivity=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];useEffect(function(){if(match.params.id){setLoading(true);loadActivity(match.params.id).then(function(activity){setActivity(new ActivityFormValues(activity));}).finally(function(){return setLoading(false);});}},[loadActivity,match.params.id]);var handleFinalFormSubmit=function handleFinalFormSubmit(values){var dateAndTime=combineDateAndTime(values.date,values.time);var date=values.date,time=values.time,activity=_objectWithoutProperties(values,[\"date\",\"time\"]);activity.date=dateAndTime;if(!activity.id){var newActivity=_objectSpread(_objectSpread({},activity),{},{id:uuid()});createActivity(newActivity);}else{editActivity(activity);}};return/*#__PURE__*/React.createElement(Grid,null,/*#__PURE__*/React.createElement(Grid.Column,{width:10},/*#__PURE__*/React.createElement(Segment,{clearing:true},/*#__PURE__*/React.createElement(FinalForm,{validate:validate,initialValues:activity,onSubmit:handleFinalFormSubmit,render:function render(_ref2){var handleSubmit=_ref2.handleSubmit,invalid=_ref2.invalid,pristine=_ref2.pristine;return/*#__PURE__*/React.createElement(Form,{onSubmit:handleSubmit,loading:loading},/*#__PURE__*/React.createElement(Field,{name:\"title\",placeholder:\"Title\",value:activity.title,component:TextInput}),/*#__PURE__*/React.createElement(Field,{name:\"description\",placeholder:\"Description\",rows:3,value:activity.description,component:TextAreaInput}),/*#__PURE__*/React.createElement(Field,{component:SelectInput,options:category,name:\"category\",placeholder:\"Category\",value:activity.category}),/*#__PURE__*/React.createElement(Form.Group,{widths:\"equal\"},/*#__PURE__*/React.createElement(Field,{component:DateInput,name:\"date\",date:true,placeholder:\"Date\",value:activity.date}),/*#__PURE__*/React.createElement(Field,{component:DateInput,name:\"time\",time:true,placeholder:\"Time\",value:activity.time})),/*#__PURE__*/React.createElement(Field,{component:TextInput,name:\"city\",placeholder:\"City\",value:activity.city}),/*#__PURE__*/React.createElement(Field,{component:TextInput,name:\"venue\",placeholder:\"Venue\",value:activity.venue}),/*#__PURE__*/React.createElement(Button,{loading:submitting,disabled:loading||invalid||pristine,floated:\"right\",positive:true,type:\"submit\",content:\"Submit\"}),/*#__PURE__*/React.createElement(Button,{onClick:activity.id?function(){return history.push(\"/activities/\".concat(activity.id));}:function(){return history.push('/activities');},disabled:loading,floated:\"right\",type:\"button\",content:\"Cancel\"}));}}))));};export default observer(ActivityForm);","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/activities/form/ActivityForm.tsx"],"names":["React","useState","useContext","useEffect","Segment","Form","Button","Grid","ActivityFormValues","v4","uuid","observer","FinalForm","Field","TextInput","TextAreaInput","SelectInput","DateInput","category","combineDateAndTime","combineValidators","isRequired","composeValidators","hasLengthGreaterThan","RootStoreContext","validate","title","message","description","city","venue","date","time","ActivityForm","match","history","rootStore","activityStore","createActivity","editActivity","submitting","loadActivity","activity","setActivity","loading","setLoading","params","id","then","finally","handleFinalFormSubmit","values","dateAndTime","newActivity","handleSubmit","invalid","pristine","push"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport {\n  combineValidators,\n  isRequired,\n  composeValidators,\n  hasLengthGreaterThan\n} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  title: isRequired({ message: 'The event title is required' }),\n  category: isRequired('Category'),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters'\n    })\n  )(),\n  city: isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date'),\n  time: isRequired('Time')\n});\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then(activity => {\n          setActivity(new ActivityFormValues(activity));\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid()\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='title'\n                  placeholder='Title'\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  name='description'\n                  placeholder='Description'\n                  rows={3}\n                  value={activity.description}\n                  component={TextAreaInput}\n                />\n                <Field\n                  component={SelectInput}\n                  options={category}\n                  name='category'\n                  placeholder='Category'\n                  value={activity.category}\n                />\n                <Form.Group widths='equal'>\n                  <Field\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    placeholder='Date'\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder='Time'\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                <Field\n                  component={TextInput}\n                  name='city'\n                  placeholder='City'\n                  value={activity.city}\n                />\n                <Field\n                  component={TextInput}\n                  name='venue'\n                  placeholder='Venue'\n                  value={activity.venue}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content='Submit'\n                />\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content='Cancel'\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n"]},"metadata":{},"sourceType":"module"}