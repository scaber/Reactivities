{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\n\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\nexport var LogLevel;\n\n(function (LogLevel) {\n  /** Log level for very low severity diagnostic messages. */\n  LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n  /** Log level for low severity diagnostic messages. */\n\n  LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n  /** Log level for informational diagnostic messages. */\n\n  LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\n  /** Log level for diagnostic messages that indicate a non-fatal problem. */\n\n  LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\n  /** Log level for diagnostic messages that indicate a failure in the current operation. */\n\n  LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n  /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\n\n  LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\n  /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\n\n  LogLevel[LogLevel[\"None\"] = 6] = \"None\";\n})(LogLevel || (LogLevel = {}));","map":{"version":3,"sources":["../../src/ILogger.ts"],"names":[],"mappings":"AAAA;AACA;AAEA;;AACA;;;;AAIA,OAAA,IAAY,QAAZ;;AAAA,CAAA,UAAY,QAAZ,EAAoB;AAChB;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA;;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA;;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA;;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA;;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA;;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA;;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACH,CAfD,EAAY,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAApB","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}