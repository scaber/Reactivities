{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = internalCombineValidators;\n\nvar _parseFieldName = require('./parseFieldName');\n\nvar _parseFieldName2 = _interopRequireDefault(_parseFieldName);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction defaultSerializeValues(values) {\n  return values;\n}\n\nfunction internalCombineValidators(validators, atRoot) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var serializeValues = atRoot && typeof options.serializeValues === 'function' ? options.serializeValues : defaultSerializeValues;\n  var nullWhenValid = atRoot && options.nullWhenValid === true;\n\n  function finalSerializeValues(values) {\n    if (values == null) {\n      return {};\n    }\n\n    return serializeValues(values) || {};\n  }\n\n  return function valuesValidator(values, allValues) {\n    var serializedValues = finalSerializeValues(values);\n    var serializedAllValues = finalSerializeValues(allValues);\n    var finalErrors = Object.keys(validators).reduce(function (errors, fieldName) {\n      var parsedField = (0, _parseFieldName2.default)(fieldName);\n      var validator = validators[parsedField.fullName];\n      var value = serializedValues[parsedField.baseName];\n      var finalAllValues = atRoot ? serializedValues : serializedAllValues;\n      var errorMessage = parsedField.isArray ? (value || []).map(function (fieldValue) {\n        return validator(fieldValue, finalAllValues);\n      }) : validator(value, finalAllValues);\n\n      if (errorMessage) {\n        errors[parsedField.baseName] = errorMessage;\n      }\n\n      return errors;\n    }, {});\n\n    if (nullWhenValid && Object.keys(finalErrors).length === 0) {\n      return null;\n    }\n\n    return finalErrors;\n  };\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/revalidate/lib/internal/internalCombineValidators.js"],"names":["exports","__esModule","default","internalCombineValidators","_parseFieldName","require","_parseFieldName2","_interopRequireDefault","obj","defaultSerializeValues","values","validators","atRoot","options","arguments","length","undefined","serializeValues","nullWhenValid","finalSerializeValues","valuesValidator","allValues","serializedValues","serializedAllValues","finalErrors","Object","keys","reduce","errors","fieldName","parsedField","validator","fullName","value","baseName","finalAllValues","errorMessage","isArray","map","fieldValue"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBC,yBAAlB;;AAEA,IAAIC,eAAe,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAIC,gBAAgB,GAAGC,sBAAsB,CAACH,eAAD,CAA7C;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AACtC,SAAOA,MAAP;AACD;;AACD,SAASP,yBAAT,CAAmCQ,UAAnC,EAA+CC,MAA/C,EAAuD;AACrD,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AAEA,MAAIG,eAAe,GAAGL,MAAM,IAAI,OAAOC,OAAO,CAACI,eAAf,KAAmC,UAA7C,GAA0DJ,OAAO,CAACI,eAAlE,GAAoFR,sBAA1G;AAEA,MAAIS,aAAa,GAAGN,MAAM,IAAIC,OAAO,CAACK,aAAR,KAA0B,IAAxD;;AAEA,WAASC,oBAAT,CAA8BT,MAA9B,EAAsC;AACpC,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAO,EAAP;AACD;;AAED,WAAOO,eAAe,CAACP,MAAD,CAAf,IAA2B,EAAlC;AACD;;AAED,SAAO,SAASU,eAAT,CAAyBV,MAAzB,EAAiCW,SAAjC,EAA4C;AACjD,QAAIC,gBAAgB,GAAGH,oBAAoB,CAACT,MAAD,CAA3C;AACA,QAAIa,mBAAmB,GAAGJ,oBAAoB,CAACE,SAAD,CAA9C;AAEA,QAAIG,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYf,UAAZ,EAAwBgB,MAAxB,CAA+B,UAAUC,MAAV,EAAkBC,SAAlB,EAA6B;AAC5E,UAAIC,WAAW,GAAG,CAAC,GAAGxB,gBAAgB,CAACJ,OAArB,EAA8B2B,SAA9B,CAAlB;AACA,UAAIE,SAAS,GAAGpB,UAAU,CAACmB,WAAW,CAACE,QAAb,CAA1B;AACA,UAAIC,KAAK,GAAGX,gBAAgB,CAACQ,WAAW,CAACI,QAAb,CAA5B;AACA,UAAIC,cAAc,GAAGvB,MAAM,GAAGU,gBAAH,GAAsBC,mBAAjD;AAEA,UAAIa,YAAY,GAAGN,WAAW,CAACO,OAAZ,GAAsB,CAACJ,KAAK,IAAI,EAAV,EAAcK,GAAd,CAAkB,UAAUC,UAAV,EAAsB;AAC/E,eAAOR,SAAS,CAACQ,UAAD,EAAaJ,cAAb,CAAhB;AACD,OAFwC,CAAtB,GAEdJ,SAAS,CAACE,KAAD,EAAQE,cAAR,CAFd;;AAIA,UAAIC,YAAJ,EAAkB;AAChBR,QAAAA,MAAM,CAACE,WAAW,CAACI,QAAb,CAAN,GAA+BE,YAA/B;AACD;;AAED,aAAOR,MAAP;AACD,KAfiB,EAef,EAfe,CAAlB;;AAiBA,QAAIV,aAAa,IAAIO,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBT,MAAzB,KAAoC,CAAzD,EAA4D;AAC1D,aAAO,IAAP;AACD;;AAED,WAAOS,WAAP;AACD,GA1BD;AA2BD","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.default = internalCombineValidators;\n\nvar _parseFieldName = require('./parseFieldName');\n\nvar _parseFieldName2 = _interopRequireDefault(_parseFieldName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction defaultSerializeValues(values) {\n  return values;\n}\nfunction internalCombineValidators(validators, atRoot) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var serializeValues = atRoot && typeof options.serializeValues === 'function' ? options.serializeValues : defaultSerializeValues;\n\n  var nullWhenValid = atRoot && options.nullWhenValid === true;\n\n  function finalSerializeValues(values) {\n    if (values == null) {\n      return {};\n    }\n\n    return serializeValues(values) || {};\n  }\n\n  return function valuesValidator(values, allValues) {\n    var serializedValues = finalSerializeValues(values);\n    var serializedAllValues = finalSerializeValues(allValues);\n\n    var finalErrors = Object.keys(validators).reduce(function (errors, fieldName) {\n      var parsedField = (0, _parseFieldName2.default)(fieldName);\n      var validator = validators[parsedField.fullName];\n      var value = serializedValues[parsedField.baseName];\n      var finalAllValues = atRoot ? serializedValues : serializedAllValues;\n\n      var errorMessage = parsedField.isArray ? (value || []).map(function (fieldValue) {\n        return validator(fieldValue, finalAllValues);\n      }) : validator(value, finalAllValues);\n\n      if (errorMessage) {\n        errors[parsedField.baseName] = errorMessage;\n      }\n\n      return errors;\n    }, {});\n\n    if (nullWhenValid && Object.keys(finalErrors).length === 0) {\n      return null;\n    }\n\n    return finalErrors;\n  };\n}"]},"metadata":{},"sourceType":"script"}