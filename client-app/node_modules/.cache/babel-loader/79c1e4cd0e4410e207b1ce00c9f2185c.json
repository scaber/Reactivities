{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = createScrollManager;\n\nvar _scrollTo = _interopRequireDefault(require(\"dom-helpers/util/scrollTo\"));\n\nvar _reactComponentManagers = require(\"react-component-managers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction createScrollManager(inst, getScrollParent) {\n  if (getScrollParent === void 0) {\n    getScrollParent = function getScrollParent(list) {\n      return list.parentNode;\n    };\n  }\n\n  var isMounted = (0, _reactComponentManagers.mountManager)(inst);\n  var currentFocused, currentVisible, cancelScroll;\n\n  function handleScroll(selected, list, nextFocused) {\n    if (!isMounted()) return;\n    var lastVisible = currentVisible;\n    var lastItem = currentFocused;\n    var shown, changed;\n    currentVisible = !(!list.offsetWidth || !list.offsetHeight);\n    currentFocused = nextFocused;\n    changed = lastItem !== nextFocused;\n    shown = currentVisible && !lastVisible;\n\n    if (shown || currentVisible && changed) {\n      if (this.props.onMove) this.props.onMove(selected, list, nextFocused);else {\n        cancelScroll && cancelScroll();\n        cancelScroll = (0, _scrollTo.default)(selected, false && getScrollParent(list));\n      }\n    }\n  }\n\n  return handleScroll.bind(inst);\n}\n\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/react-widgets/lib/util/scrollManager.js"],"names":["exports","__esModule","default","createScrollManager","_scrollTo","_interopRequireDefault","require","_reactComponentManagers","obj","inst","getScrollParent","list","parentNode","isMounted","mountManager","currentFocused","currentVisible","cancelScroll","handleScroll","selected","nextFocused","lastVisible","lastItem","shown","changed","offsetWidth","offsetHeight","props","onMove","bind","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBC,mBAAlB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACC,OAAO,CAAC,2BAAD,CAAR,CAAtC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,SAASL,mBAAT,CAA6BM,IAA7B,EAAmCC,eAAnC,EAAoD;AAClD,MAAIA,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAC9BA,IAAAA,eAAe,GAAG,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC/C,aAAOA,IAAI,CAACC,UAAZ;AACD,KAFD;AAGD;;AAED,MAAIC,SAAS,GAAG,CAAC,GAAGN,uBAAuB,CAACO,YAA5B,EAA0CL,IAA1C,CAAhB;AACA,MAAIM,cAAJ,EAAoBC,cAApB,EAAoCC,YAApC;;AAEA,WAASC,YAAT,CAAsBC,QAAtB,EAAgCR,IAAhC,EAAsCS,WAAtC,EAAmD;AACjD,QAAI,CAACP,SAAS,EAAd,EAAkB;AAClB,QAAIQ,WAAW,GAAGL,cAAlB;AACA,QAAIM,QAAQ,GAAGP,cAAf;AACA,QAAIQ,KAAJ,EAAWC,OAAX;AACAR,IAAAA,cAAc,GAAG,EAAE,CAACL,IAAI,CAACc,WAAN,IAAqB,CAACd,IAAI,CAACe,YAA7B,CAAjB;AACAX,IAAAA,cAAc,GAAGK,WAAjB;AACAI,IAAAA,OAAO,GAAGF,QAAQ,KAAKF,WAAvB;AACAG,IAAAA,KAAK,GAAGP,cAAc,IAAI,CAACK,WAA3B;;AAEA,QAAIE,KAAK,IAAIP,cAAc,IAAIQ,OAA/B,EAAwC;AACtC,UAAI,KAAKG,KAAL,CAAWC,MAAf,EAAuB,KAAKD,KAAL,CAAWC,MAAX,CAAkBT,QAAlB,EAA4BR,IAA5B,EAAkCS,WAAlC,EAAvB,KAA2E;AACzEH,QAAAA,YAAY,IAAIA,YAAY,EAA5B;AACAA,QAAAA,YAAY,GAAG,CAAC,GAAGb,SAAS,CAACF,OAAd,EAAuBiB,QAAvB,EAAiC,SAAST,eAAe,CAACC,IAAD,CAAzD,CAAf;AACD;AACF;AACF;;AAED,SAAOO,YAAY,CAACW,IAAb,CAAkBpB,IAAlB,CAAP;AACD;;AAEDqB,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = createScrollManager;\n\nvar _scrollTo = _interopRequireDefault(require(\"dom-helpers/util/scrollTo\"));\n\nvar _reactComponentManagers = require(\"react-component-managers\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createScrollManager(inst, getScrollParent) {\n  if (getScrollParent === void 0) {\n    getScrollParent = function getScrollParent(list) {\n      return list.parentNode;\n    };\n  }\n\n  var isMounted = (0, _reactComponentManagers.mountManager)(inst);\n  var currentFocused, currentVisible, cancelScroll;\n\n  function handleScroll(selected, list, nextFocused) {\n    if (!isMounted()) return;\n    var lastVisible = currentVisible;\n    var lastItem = currentFocused;\n    var shown, changed;\n    currentVisible = !(!list.offsetWidth || !list.offsetHeight);\n    currentFocused = nextFocused;\n    changed = lastItem !== nextFocused;\n    shown = currentVisible && !lastVisible;\n\n    if (shown || currentVisible && changed) {\n      if (this.props.onMove) this.props.onMove(selected, list, nextFocused);else {\n        cancelScroll && cancelScroll();\n        cancelScroll = (0, _scrollTo.default)(selected, false && getScrollParent(list));\n      }\n    }\n  }\n\n  return handleScroll.bind(inst);\n}\n\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}