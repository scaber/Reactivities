{"ast":null,"code":"import axios from 'axios';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\naxios.defaults.baseURL = 'http://localhost:5000/api';\naxios.interceptors.request.use(config => {\n  const token = window.localStorage.getItem('jwt');\n  if (token) config.headers.Authorization = \"Bearer \".concat(token);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(undefined, error => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - make sure API is running!');\n  }\n\n  const _error$response = error.response,\n        status = _error$response.status,\n        data = _error$response.data,\n        config = _error$response.config;\n\n  if (status === 404) {\n    history.push('/notfound');\n  }\n\n  if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n    history.push('/notfound');\n  }\n\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n\n  throw error.response;\n});\n\nconst responseBody = response => response.data;\n\nconst sleep = ms => response => new Promise(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n  get: url => axios.get(url).then(sleep(1000)).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n  del: url => axios.delete(url).then(sleep(1000)).then(responseBody),\n  postForm: (url, file) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    return axios.post(url, formData, {\n      headers: {\n        'Conteent-type': 'multipart/form-data'\n      }\n    }).then(responseBody);\n  }\n};\nconst Activities = {\n  list: () => requests.get('/activities'),\n  details: id => requests.get(\"/activities/\".concat(id)),\n  create: activity => requests.post('/activities', activity),\n  update: activity => requests.put(\"/activities/\".concat(activity.id), activity),\n  delete: id => requests.del(\"/activities/\".concat(id)),\n  attend: id => requests.post(\"/activities/\".concat(id, \"/attend\"), {}),\n  unattend: id => requests.del(\"/activities/\".concat(id, \"/attend\"))\n};\nconst User = {\n  current: () => requests.get('/user'),\n  login: user => requests.post(\"/user/login\", user),\n  register: user => requests.post(\"/user/register\", user)\n};\nconst Profiles = {\n  get: userName => requests.get(\"/profiles/\".concat(userName)),\n  uploadPhoto: photo => requests.postForm(\"/photos\", photo)\n};\nexport default {\n  Activities,\n  User,\n  Profiles\n};","map":{"version":3,"sources":["C:\\Projects\\Reactivities\\client-app\\src\\app\\api\\agent.ts"],"names":["axios","history","toast","defaults","baseURL","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","status","data","push","method","errors","hasOwnProperty","responseBody","sleep","ms","resolve","setTimeout","requests","get","url","then","post","body","put","del","delete","postForm","file","formData","FormData","append","Activities","list","details","id","create","activity","update","attend","unattend","User","current","login","user","register","Profiles","userName","uploadPhoto","photo"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { IActivity } from '../models/activity';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { IProfile, IPhoto } from '../models/profile';\nimport { url } from 'inspector';\n\naxios.defaults.baseURL = 'http://localhost:5000/api';\n\naxios.interceptors.request.use((config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n}, error => {\n    return Promise.reject(error);\n})\n\naxios.interceptors.response.use(undefined, error => {\n    if (error.message === 'Network Error' && !error.response) {\n        toast.error('Network error - make sure API is running!')\n    }\n    const {status, data, config} = error.response;\n    if (status === 404) {\n        history.push('/notfound')\n    }\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        history.push('/notfound')\n    }\n    if (status === 500) {\n        toast.error('Server error - check the terminal for more info!')\n    }\n    throw error.response;\n})\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst sleep = (ms: number) => (response: AxiosResponse) => \n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\n    postForm:(url:string, file:Blob) => { \n        let formData = new FormData();\n        formData.append('File',file);\n        return axios.post(url,formData, {\n            headers:{'Conteent-type' : 'multipart/form-data'}\n        }).then(responseBody)\n    }\n};\n\nconst Activities = {\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\n    details: (id: string) => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post('/activities', activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del(`/activities/${id}`),\n    attend: (id:string) => requests.post(`/activities/${id}/attend`, {}),\n    unattend:(id:string)=> requests.del(`/activities/${id}/attend`)\n}\n\nconst User = {\n    current: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user),\n}\n\nconst Profiles ={\n    get:(userName:string): Promise<IProfile> => requests.get(`/profiles/${userName}`),\n    uploadPhoto:(photo: Blob): Promise<IPhoto> => requests.postForm(`/photos`,photo)\n}\n\nexport default {\n    Activities,\n    User,\n    Profiles\n}"]},"metadata":{},"sourceType":"module"}