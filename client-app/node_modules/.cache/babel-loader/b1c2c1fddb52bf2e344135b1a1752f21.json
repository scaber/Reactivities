{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Reactivities\\\\client-app\\\\src\\\\app\\\\common\\\\photoUpload\\\\PhotoWidgetDropzone.tsx\";\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nconst dropzoneStyles = {\n  border: 'dashed 3px',\n  borderColor: '#eee',\n  borderRadius: '5px',\n  paddingTop: '30px',\n  textAlign: 'center',\n  height: '200px'\n};\nconst dropzoneActive = {\n  borderColor: 'green'\n};\n\nconst PhotoWidgetDropzone = ({\n  setFiles\n}) => {\n  const onDrop = useCallback(acceptedFiles => {\n    debugger;\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  }, []);\n\n  const _useDropzone = useDropzone({\n    onDrop\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive;\n\n  return React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    style: isDragActive ? dropzoneStyles : dropzoneStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), isDragActive ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Drop the files here ...\") : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Drag 'n' drop some files here, or click to select files\"));\n};\n\nexport default PhotoWidgetDropzone;","map":{"version":3,"sources":["C:\\Projects\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx"],"names":["React","useCallback","useDropzone","dropzoneStyles","border","borderColor","borderRadius","paddingTop","textAlign","height","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,QAAiC,OAAjC;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AAOA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAC,YADY;AAEnBC,EAAAA,WAAW,EAAC,MAFO;AAGnBC,EAAAA,YAAY,EAAE,KAHK;AAInBC,EAAAA,UAAU,EAAE,MAJO;AAKnBC,EAAAA,SAAS,EAAC,QALS;AAMnBC,EAAAA,MAAM,EAAC;AANY,CAAvB;AASA,MAAMC,cAAc,GAAG;AACnBL,EAAAA,WAAW,EAAC;AADO,CAAvB;;AAGA,MAAMM,mBAAoC,GAAE,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAC1D,QAAMC,MAAM,GAAGZ,WAAW,CAACa,aAAa,IAAI;AAC9C;AACCF,IAAAA,QAAQ,CAACE,aAAa,CAACC,GAAd,CAAmBC,IAAD,IAAiBC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAmB;AACtDG,MAAAA,OAAO,EAACC,GAAG,CAACC,eAAJ,CAAoBL,IAApB;AAD8C,KAAnB,CAAnC,CAAD,CAAR;AAGG,GALwB,EAKtB,EALsB,CAA1B;;AAD0D,uBAONd,WAAW,CAAC;AAACW,IAAAA;AAAD,GAAD,CAPL;AAAA,QAOnDS,YAPmD,gBAOnDA,YAPmD;AAAA,QAOrCC,aAPqC,gBAOrCA,aAPqC;AAAA,QAOtBC,YAPsB,gBAOtBA,YAPsB;;AAS1D,SACE,6CAASF,YAAY,EAArB;AAAwB,IAAA,KAAK,EAAEE,YAAY,GAAGrB,cAAH,GAAmBA,cAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,+CAAWoB,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAGIC,YAAY,GACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADU,GAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DALN,CADF;AAUD,CAnBD;;AAoBA,eAAeb,mBAAf","sourcesContent":["import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\n\r\ninterface IProps {\r\n\r\n    setFiles:(files:object[]) => void;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n    border:'dashed 3px',\r\n    borderColor:'#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign:'center',\r\n    height:'200px'\r\n}\r\n\r\nconst dropzoneActive = {\r\n    borderColor:'green'\r\n}\r\nconst PhotoWidgetDropzone:React.FC<IProps> =({setFiles}) => {\r\n  const onDrop = useCallback(acceptedFiles => {\r\ndebugger     \r\n setFiles(acceptedFiles.map((file:object) => Object.assign(file,{\r\n          preview:URL.createObjectURL(file)\r\n      })))\r\n   }, [])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()}style={isDragActive ? dropzoneStyles :dropzoneStyles}>\r\n      <input {...getInputProps()} />\r\n      {\r\n        isDragActive ?\r\n          <p>Drop the files here ...</p> :\r\n          <p>Drag 'n' drop some files here, or click to select files</p>\r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default PhotoWidgetDropzone;"]},"metadata":{},"sourceType":"module"}