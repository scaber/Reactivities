{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = dateFnsLocalizer;\nexports.defaultFormats = void 0;\n\nvar _formatWithOptions = _interopRequireDefault(require(\"date-fns/fp/formatWithOptions\"));\n\nvar _parseWithOptions = _interopRequireDefault(require(\"date-fns/fp/parseWithOptions\"));\n\nvar _addYears = _interopRequireDefault(require(\"date-fns/fp/addYears\"));\n\nvar _enUS = _interopRequireDefault(require(\"date-fns/locale/en-US\"));\n\nvar _configure = _interopRequireDefault(require(\"react-widgets/lib/configure\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar endOfDecade = (0, _addYears.default)(10);\nvar endOfCentury = (0, _addYears.default)(100);\n\nfunction getYear(date, culture, localizer) {\n  return localizer.format(date, 'yyyy', culture);\n}\n\nfunction decade(date, culture, localizer) {\n  return getYear(date, culture, localizer) + ' - ' + getYear(endOfDecade(date), culture, localizer);\n}\n\nfunction century(date, culture, localizer) {\n  return getYear(date, culture, localizer) + ' - ' + getYear(endOfCentury(date), culture, localizer);\n}\n\nvar defaultFormats = {\n  date: 'P',\n  time: 'pp',\n  default: 'Pp',\n  header: 'MMMM yyyy',\n  footer: 'PPPP',\n  weekday: 'cccccc',\n  dayOfMonth: 'dd',\n  month: 'MMM',\n  year: 'yyyy',\n  decade: decade,\n  century: century\n  /**\n   * Configures localization of [react-widgets](http://jquense.github.io/react-widgets/) by calling\n   * `configure.setDateLocalizer`\n   * @static\n   * @param {Object} formats Confguration options.\n   * @param {string|Object|function} formats.default  the default date display format, generally a \"long\" format showing\n   *   both date and time\n   * @param {string|Object|function} formats.date A date only format\n   * @param {string|Object|function} formats.time A time only format\n   * @param {string|Object|function} formats.header The heading of the Calendar month view, contextualizes the current\n   *   month, e.g. \"Jan 2014\"\n   * @param {string|Object|function} formats.footer The Calendar footer format, for displaying Today's date\n   * @param {string|Object|function} formats.dayOfMonth The day of the month\n   * @param {string|Object|function} formats.month  Month name, used in the Year view of the Calendar\n   * @param {string|Object|function} formats.year year format, used in the Decade view of the Calendar\n   * @param {string|Object|function} formats.decade a decade format, used in the Century view of the Calendar,\n   *  eg. \"2010 - 2019\"\n   * @param {string|Object|function} formats.century  A century format, used the in the Calendar heading\n   * @param {Object} locales Supported date-fns locales to include in the bundle\n   * @example\n   * import dateFnsLocalizer, { defaultFormats } from 'react-widgets-dates'\n   * dateFnsLocalizer()\n   * // => Works out of the box with default formats (defaultFormats) and the `en-US` locale\n   * const newFormats = Object.assign(defaultFormats, { default: 'mmm YY' })\n   * dateFnsLocalizer({ formats: newFormats })\n   * // => Uses new configuration\n   *\n   * import locales from 'date-fns/locale'\n   * dateFnsLocalizer({ formats: newFormats, locales })\n   * // => Includes all available locales\n   *\n   * import enGB from 'date-fns/locale/en-GB'\n   * import de from 'date-fns/locale/de'\n   * dateFnsLocalizer({ locales: { 'en-GB': enGB, 'de': de } })\n   * // => Include only the locales you need to limit the bundled size\n   */\n\n};\nexports.defaultFormats = defaultFormats;\n\nfunction dateFnsLocalizer(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$formats = _ref.formats,\n      formats = _ref$formats === void 0 ? defaultFormats : _ref$formats,\n      _ref$locales = _ref.locales,\n      locales = _ref$locales === void 0 ? {} : _ref$locales;\n\n  function getLocale(culture) {\n    return locales[culture] || _enUS.default;\n  }\n\n  function format(value, format, culture) {\n    return (0, _formatWithOptions.default)({\n      locale: getLocale(culture)\n    }, format, value);\n  }\n\n  function parse(value, format, culture) {\n    var result = (0, _parseWithOptions.default)({\n      locale: getLocale(culture)\n    }, new Date(), format, value);\n\n    if (result.toString() === 'Invalid Date') {\n      return null;\n    }\n\n    return result;\n  }\n\n  function firstOfWeek(culture) {\n    var _getLocale = getLocale(culture),\n        options = _getLocale.options;\n\n    return options && options.weekStartsOn || 0;\n  }\n\n  _configure.default.setDateLocalizer({\n    formats: formats,\n    firstOfWeek: firstOfWeek,\n    parse: parse,\n    format: format\n  });\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/react-widgets-date-fns/index.js"],"names":["exports","__esModule","default","dateFnsLocalizer","defaultFormats","_formatWithOptions","_interopRequireDefault","require","_parseWithOptions","_addYears","_enUS","_configure","obj","endOfDecade","endOfCentury","getYear","date","culture","localizer","format","decade","century","time","header","footer","weekday","dayOfMonth","month","year","_temp","_ref","_ref$formats","formats","_ref$locales","locales","getLocale","value","locale","parse","result","Date","toString","firstOfWeek","_getLocale","options","weekStartsOn","setDateLocalizer"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = dateFnsLocalizer;\nexports.defaultFormats = void 0;\n\nvar _formatWithOptions = _interopRequireDefault(require(\"date-fns/fp/formatWithOptions\"));\n\nvar _parseWithOptions = _interopRequireDefault(require(\"date-fns/fp/parseWithOptions\"));\n\nvar _addYears = _interopRequireDefault(require(\"date-fns/fp/addYears\"));\n\nvar _enUS = _interopRequireDefault(require(\"date-fns/locale/en-US\"));\n\nvar _configure = _interopRequireDefault(require(\"react-widgets/lib/configure\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar endOfDecade = (0, _addYears.default)(10);\nvar endOfCentury = (0, _addYears.default)(100);\n\nfunction getYear(date, culture, localizer) {\n  return localizer.format(date, 'yyyy', culture);\n}\n\nfunction decade(date, culture, localizer) {\n  return getYear(date, culture, localizer) + ' - ' + getYear(endOfDecade(date), culture, localizer);\n}\n\nfunction century(date, culture, localizer) {\n  return getYear(date, culture, localizer) + ' - ' + getYear(endOfCentury(date), culture, localizer);\n}\n\nvar defaultFormats = {\n  date: 'P',\n  time: 'pp',\n  default: 'Pp',\n  header: 'MMMM yyyy',\n  footer: 'PPPP',\n  weekday: 'cccccc',\n  dayOfMonth: 'dd',\n  month: 'MMM',\n  year: 'yyyy',\n  decade: decade,\n  century: century\n  /**\n   * Configures localization of [react-widgets](http://jquense.github.io/react-widgets/) by calling\n   * `configure.setDateLocalizer`\n   * @static\n   * @param {Object} formats Confguration options.\n   * @param {string|Object|function} formats.default  the default date display format, generally a \"long\" format showing\n   *   both date and time\n   * @param {string|Object|function} formats.date A date only format\n   * @param {string|Object|function} formats.time A time only format\n   * @param {string|Object|function} formats.header The heading of the Calendar month view, contextualizes the current\n   *   month, e.g. \"Jan 2014\"\n   * @param {string|Object|function} formats.footer The Calendar footer format, for displaying Today's date\n   * @param {string|Object|function} formats.dayOfMonth The day of the month\n   * @param {string|Object|function} formats.month  Month name, used in the Year view of the Calendar\n   * @param {string|Object|function} formats.year year format, used in the Decade view of the Calendar\n   * @param {string|Object|function} formats.decade a decade format, used in the Century view of the Calendar,\n   *  eg. \"2010 - 2019\"\n   * @param {string|Object|function} formats.century  A century format, used the in the Calendar heading\n   * @param {Object} locales Supported date-fns locales to include in the bundle\n   * @example\n   * import dateFnsLocalizer, { defaultFormats } from 'react-widgets-dates'\n   * dateFnsLocalizer()\n   * // => Works out of the box with default formats (defaultFormats) and the `en-US` locale\n   * const newFormats = Object.assign(defaultFormats, { default: 'mmm YY' })\n   * dateFnsLocalizer({ formats: newFormats })\n   * // => Uses new configuration\n   *\n   * import locales from 'date-fns/locale'\n   * dateFnsLocalizer({ formats: newFormats, locales })\n   * // => Includes all available locales\n   *\n   * import enGB from 'date-fns/locale/en-GB'\n   * import de from 'date-fns/locale/de'\n   * dateFnsLocalizer({ locales: { 'en-GB': enGB, 'de': de } })\n   * // => Include only the locales you need to limit the bundled size\n   */\n\n};\nexports.defaultFormats = defaultFormats;\n\nfunction dateFnsLocalizer(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$formats = _ref.formats,\n      formats = _ref$formats === void 0 ? defaultFormats : _ref$formats,\n      _ref$locales = _ref.locales,\n      locales = _ref$locales === void 0 ? {} : _ref$locales;\n\n  function getLocale(culture) {\n    return locales[culture] || _enUS.default;\n  }\n\n  function format(value, format, culture) {\n    return (0, _formatWithOptions.default)({\n      locale: getLocale(culture)\n    }, format, value);\n  }\n\n  function parse(value, format, culture) {\n    var result = (0, _parseWithOptions.default)({\n      locale: getLocale(culture)\n    }, new Date(), format, value);\n\n    if (result.toString() === 'Invalid Date') {\n      return null;\n    }\n\n    return result;\n  }\n\n  function firstOfWeek(culture) {\n    var _getLocale = getLocale(culture),\n        options = _getLocale.options;\n\n    return options && options.weekStartsOn || 0;\n  }\n\n  _configure.default.setDateLocalizer({\n    formats: formats,\n    firstOfWeek: firstOfWeek,\n    parse: parse,\n    format: format\n  });\n}\n"]},"metadata":{},"sourceType":"script"}