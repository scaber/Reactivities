{"ast":null,"code":"import toDate from '../toDate/index.js';\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   {start: new Date(2014, 0, 10), end: new Date(2014, 0, 20)},\n *   {start: new Date(2014, 0, 17), end: new Date(2014, 0, 21)}\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   {start: new Date(2014, 0, 10), end: new Date(2014, 0, 20)},\n *   {start: new Date(2014, 0, 21), end: new Date(2014, 0, 22)}\n * )\n * //=> 0\n */\n\nexport default function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start, dirtyOptions).getTime();\n  var leftEndTime = toDate(intervalLeft.end, dirtyOptions).getTime();\n  var rightStartTime = toDate(intervalRight.start, dirtyOptions).getTime();\n  var rightEndTime = toDate(intervalRight.end, dirtyOptions).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js"],"names":["toDate","MILLISECONDS_IN_DAY","getOverlappingDaysInIntervals","dirtyIntervalLeft","dirtyIntervalRight","dirtyOptions","arguments","length","TypeError","intervalLeft","intervalRight","leftStartTime","start","getTime","leftEndTime","end","rightStartTime","rightEndTime","RangeError","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","Math","ceil"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AAEA,IAAIC,mBAAmB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAAzC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,eAAe,SAASC,6BAAT,CAAwCC,iBAAxC,EAA2DC,kBAA3D,EAA+EC,YAA/E,EAA6F;AAC1G,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,YAAY,GAAGN,iBAAiB,IAAI,EAAxC;AACA,MAAIO,aAAa,GAAGN,kBAAkB,IAAI,EAA1C;AACA,MAAIO,aAAa,GAAGX,MAAM,CAACS,YAAY,CAACG,KAAd,EAAqBP,YAArB,CAAN,CAAyCQ,OAAzC,EAApB;AACA,MAAIC,WAAW,GAAGd,MAAM,CAACS,YAAY,CAACM,GAAd,EAAmBV,YAAnB,CAAN,CAAuCQ,OAAvC,EAAlB;AACA,MAAIG,cAAc,GAAGhB,MAAM,CAACU,aAAa,CAACE,KAAf,EAAsBP,YAAtB,CAAN,CAA0CQ,OAA1C,EAArB;AACA,MAAII,YAAY,GAAGjB,MAAM,CAACU,aAAa,CAACK,GAAf,EAAoBV,YAApB,CAAN,CAAwCQ,OAAxC,EAAnB,CAV0G,CAY1G;;AACA,MAAI,EAAEF,aAAa,IAAIG,WAAjB,IAAgCE,cAAc,IAAIC,YAApD,CAAJ,EAAuE;AACrE,UAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,MAAIC,aAAa,GAAGR,aAAa,GAAGM,YAAhB,IAAgCD,cAAc,GAAGF,WAArE;;AAEA,MAAI,CAACK,aAAL,EAAoB;AAClB,WAAO,CAAP;AACD;;AAED,MAAIC,gBAAgB,GAAGJ,cAAc,GAAGL,aAAjB,GACnBA,aADmB,GAEnBK,cAFJ;AAIA,MAAIK,cAAc,GAAGJ,YAAY,GAAGH,WAAf,GACjBA,WADiB,GAEjBG,YAFJ;AAIA,MAAIK,cAAc,GAAGD,cAAc,GAAGD,gBAAtC;AAEA,SAAOG,IAAI,CAACC,IAAL,CAAUF,cAAc,GAAGrB,mBAA3B,CAAP;AACD","sourcesContent":["import toDate from '../toDate/index.js'\n\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   {start: new Date(2014, 0, 10), end: new Date(2014, 0, 20)},\n *   {start: new Date(2014, 0, 17), end: new Date(2014, 0, 21)}\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   {start: new Date(2014, 0, 10), end: new Date(2014, 0, 20)},\n *   {start: new Date(2014, 0, 21), end: new Date(2014, 0, 22)}\n * )\n * //=> 0\n */\nexport default function getOverlappingDaysInIntervals (dirtyIntervalLeft, dirtyIntervalRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var intervalLeft = dirtyIntervalLeft || {}\n  var intervalRight = dirtyIntervalRight || {}\n  var leftStartTime = toDate(intervalLeft.start, dirtyOptions).getTime()\n  var leftEndTime = toDate(intervalLeft.end, dirtyOptions).getTime()\n  var rightStartTime = toDate(intervalRight.start, dirtyOptions).getTime()\n  var rightEndTime = toDate(intervalRight.end, dirtyOptions).getTime()\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval')\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime\n\n  if (!isOverlapping) {\n    return 0\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime\n    ? leftStartTime\n    : rightStartTime\n\n  var overlapEndDate = rightEndTime > leftEndTime\n    ? leftEndTime\n    : rightEndTime\n\n  var differenceInMs = overlapEndDate - overlapStartDate\n\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY)\n}\n"]},"metadata":{},"sourceType":"module"}