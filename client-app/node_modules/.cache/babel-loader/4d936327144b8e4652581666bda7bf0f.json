{"ast":null,"code":"import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport toDate from '../toDate/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_YEAR = 525600;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|String|Number} date - the date\n * @param {Date|String|Number} baseDate - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistanceStrict(\n *   new Date(2014, 6, 2),\n *   new Date(2015, 0, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * var result = formatDistanceStrict(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {unit: 'minute'}\n * )\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 28 January 2015, in months, rounded up?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 28),\n *   new Date(2015, 0, 1),\n *   {unit: 'month', roundingMethod: 'ceil'}\n * )\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistanceStrict(\n *   new Date(2016, 7, 1),\n *   new Date(2015, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate, options);\n\n  if (isNaN(comparison)) {\n    return 'Invalid Date';\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate, options);\n    dateRight = toDate(dirtyDate, options);\n  } else {\n    dateLeft = toDate(dirtyDate, options);\n    dateRight = toDate(dirtyBaseDate, options);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft, dirtyOptions);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = roundingMethodFn((seconds - offsetInSeconds) / 60);\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(minutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/date-fns/esm/formatDistanceStrict/index.js"],"names":["getTimezoneOffsetInMilliseconds","compareAsc","toDate","differenceInSeconds","cloneObject","defaultLocale","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","formatDistanceStrict","dirtyDate","dirtyBaseDate","dirtyOptions","arguments","length","TypeError","options","locale","formatDistance","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","roundingMethod","String","roundingMethodFn","Math","floor","ceil","round","seconds","offsetInSeconds","minutes","unit","hours","days","months","years"],"mappings":"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","sourcesContent":["import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport compareAsc from '../compareAsc/index.js'\nimport toDate from '../toDate/index.js'\nimport differenceInSeconds from '../differenceInSeconds/index.js'\nimport cloneObject from '../_lib/cloneObject/index.js'\nimport defaultLocale from '../locale/en-US/index.js'\n\nvar MINUTES_IN_DAY = 1440\nvar MINUTES_IN_MONTH = 43200\nvar MINUTES_IN_YEAR = 525600\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|String|Number} date - the date\n * @param {Date|String|Number} baseDate - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistanceStrict(\n *   new Date(2014, 6, 2),\n *   new Date(2015, 0, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * var result = formatDistanceStrict(\n *   new Date(2016, 0, 1),\n *   new Date(2015, 0, 1),\n *   {unit: 'minute'}\n * )\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 28 January 2015, in months, rounded up?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 28),\n *   new Date(2015, 0, 1),\n *   {unit: 'month', roundingMethod: 'ceil'}\n * )\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistanceStrict(\n *   new Date(2016, 7, 1),\n *   new Date(2015, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\nexport default function formatDistanceStrict (dirtyDate, dirtyBaseDate, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var options = dirtyOptions || {}\n  var locale = options.locale || defaultLocale\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property')\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate, options)\n\n  if (isNaN(comparison)) {\n    return 'Invalid Date'\n  }\n\n  var localizeOptions = cloneObject(options)\n  localizeOptions.addSuffix = Boolean(options.addSuffix)\n  localizeOptions.comparison = comparison\n\n  var dateLeft\n  var dateRight\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate, options)\n    dateRight = toDate(dirtyDate, options)\n  } else {\n    dateLeft = toDate(dirtyDate, options)\n    dateRight = toDate(dirtyBaseDate, options)\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod)\n  var roundingMethodFn\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\")\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft, dirtyOptions)\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000\n  var minutes = roundingMethodFn((seconds - offsetInSeconds) / 60)\n\n  var unit\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second'\n    } else if (minutes < 60) {\n      unit = 'minute'\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour'\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'day'\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'month'\n    } else {\n      unit = 'year'\n    }\n  } else {\n    unit = String(options.unit)\n  }\n\n  // 0 up to 60 seconds\n  if (unit === 'second') {\n    return locale.formatDistance('xSeconds', seconds, localizeOptions)\n\n  // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions)\n\n  // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60)\n    return locale.formatDistance('xHours', hours, localizeOptions)\n\n  // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(minutes / MINUTES_IN_DAY)\n    return locale.formatDistance('xDays', days, localizeOptions)\n\n  // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(minutes / MINUTES_IN_MONTH)\n    return locale.formatDistance('xMonths', months, localizeOptions)\n\n  // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(minutes / MINUTES_IN_YEAR)\n    return locale.formatDistance('xYears', years, localizeOptions)\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\")\n}\n"]},"metadata":{},"sourceType":"module"}