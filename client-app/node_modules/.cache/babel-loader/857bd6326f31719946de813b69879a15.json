{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _reactComponentManagers = require(\"react-component-managers\");\n\nvar _uncontrollable = _interopRequireDefault(require(\"uncontrollable\"));\n\nvar _List = _interopRequireDefault(require(\"./List\"));\n\nvar _Widget = _interopRequireDefault(require(\"./Widget\"));\n\nvar _SelectListItem = _interopRequireDefault(require(\"./SelectListItem\"));\n\nvar _messages = require(\"./messages\");\n\nvar _ = require(\"./util/_\");\n\nvar Props = _interopRequireWildcard(require(\"./util/Props\"));\n\nvar CustomPropTypes = _interopRequireWildcard(require(\"./util/PropTypes\"));\n\nvar _reduceToListState = _interopRequireDefault(require(\"./util/reduceToListState\"));\n\nvar _getAccessors = _interopRequireDefault(require(\"./util/getAccessors\"));\n\nvar _focusManager = _interopRequireDefault(require(\"./util/focusManager\"));\n\nvar _scrollManager = _interopRequireDefault(require(\"./util/scrollManager\"));\n\nvar _interaction = require(\"./util/interaction\");\n\nvar _widgetHelpers = require(\"./util/widgetHelpers\");\n\nvar _class, _class2, _descriptor, _descriptor2, _class3, _temp;\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nfunction _initializerWarningHelper(descriptor, context) {\n  throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.');\n}\n\nvar BusyMask = function BusyMask() {\n  return _react.default.createElement(\"span\", {\n    className: \"rw-loading-mask\"\n  });\n};\n\nfunction getFirstValue(data, values) {\n  if (!values.length) return null;\n\n  for (var idx = 0; idx < data.length; idx++) {\n    if (~values.indexOf(data[idx])) return data[idx];\n  }\n\n  return null;\n}\n/**\n * ---\n * shortcuts:\n *   - { key: down arrow, label: move focus, or select previous option }\n *   - { key: up arrow, label: move focus, or select next option }\n *   - { key: home, label: move focus to first option }\n *   - { key: end, label: move focus to last option }\n *   - { key: spacebar, label: toggle focused option }\n *   - { key: ctrl + a, label: ctoggle select all/select none }\n *   - { key: any key, label: search list for option starting with key }\n * ---\n *\n * A group of radio buttons or checkboxes bound to a dataset.\n *\n * @public\n */\n\n\nvar SelectList = (0, _reactLifecyclesCompat.polyfill)(_class = (_class2 = (_temp = _class3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(SelectList, _React$Component);\n\n  function SelectList() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleMouseDown = function () {\n      _this._clicking = true;\n    };\n\n    _this.handleFocusChanged = function (focused) {\n      var _this$props = _this.props,\n          data = _this$props.data,\n          disabled = _this$props.disabled;\n      var _this$state = _this.state,\n          dataItems = _this$state.dataItems,\n          accessors = _this$state.accessors,\n          list = _this$state.list; // the rigamarole here is to avoid flicker went clicking an item and\n      // gaining focus at the same time.\n\n      if (focused !== _this.state.focused) {\n        if (!focused) _this.setState({\n          focusedItem: null\n        });else if (focused && !_this._clicking) {\n          var allowed = Array.isArray(disabled) ? dataItems.filter(function (v) {\n            return !accessors.includes(disabled, v);\n          }) : dataItems;\n\n          _this.setState({\n            focusedItem: getFirstValue(data, allowed) || list.nextEnabled(data[0])\n          });\n        }\n        _this._clicking = false;\n      }\n    };\n\n    _initializerDefineProperty(_this, \"handleKeyDown\", _descriptor, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _initializerDefineProperty(_this, \"handleKeyPress\", _descriptor2, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.handleChange = function (item, checked, originalEvent) {\n      var _this$props2 = _this.props,\n          multiple = _this$props2.multiple,\n          onChange = _this$props2.onChange;\n      var lastValue = _this.state.dataItems;\n\n      _this.setState({\n        focusedItem: item\n      });\n\n      if (!multiple) return (0, _widgetHelpers.notify)(onChange, [checked ? item : null, {\n        originalEvent: originalEvent,\n        lastValue: lastValue,\n        checked: checked\n      }]);\n      var nextValue = checked ? lastValue.concat(item) : lastValue.filter(function (v) {\n        return v !== item;\n      });\n      (0, _widgetHelpers.notify)(onChange, [nextValue || [], {\n        checked: checked,\n        lastValue: lastValue,\n        originalEvent: originalEvent,\n        dataItem: item\n      }]);\n    };\n\n    _this.attachListRef = function (ref) {\n      return _this.listRef = ref;\n    };\n\n    _this.renderListItem = function (itemProps) {\n      var _this$props3 = _this.props,\n          name = _this$props3.name,\n          multiple = _this$props3.multiple,\n          disabled = _this$props3.disabled,\n          readOnly = _this$props3.readOnly;\n      var _this$state2 = _this.state,\n          dataItems = _this$state2.dataItems,\n          accessors = _this$state2.accessors;\n      return _react.default.createElement(_SelectListItem.default, _extends({}, itemProps, {\n        name: name || _this.itemName,\n        type: multiple ? 'checkbox' : 'radio',\n        readOnly: disabled === true || readOnly,\n        onChange: _this.handleChange,\n        onMouseDown: _this.handleMouseDown,\n        checked: accessors.includes(dataItems, itemProps.dataItem)\n      }));\n    };\n\n    (0, _reactComponentManagers.autoFocus)(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.widgetId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_widget');\n    _this.listId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_listbox');\n    _this.activeId = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_listbox_active_option');\n    _this.itemName = (0, _widgetHelpers.instanceId)(_assertThisInitialized(_assertThisInitialized(_this)), '_name');\n    _this.timeouts = (0, _reactComponentManagers.timeoutManager)(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleScroll = (0, _scrollManager.default)(_assertThisInitialized(_assertThisInitialized(_this)), false);\n    _this.focusManager = (0, _focusManager.default)(_assertThisInitialized(_assertThisInitialized(_this)), {\n      didHandle: _this.handleFocusChanged\n    });\n    _this.state = {};\n    return _this;\n  }\n\n  SelectList.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value,\n        data = nextProps.data,\n        messages = nextProps.messages;\n    var accessors = (0, _getAccessors.default)(nextProps);\n    var list = (0, _reduceToListState.default)(data, prevState.list, {\n      nextProps: nextProps\n    });\n    return {\n      list: list,\n      accessors: accessors,\n      messages: (0, _messages.getMessages)(messages),\n      dataItems: (0, _.makeArray)(value).map(function (item) {\n        return accessors.findOrSelf(data, item);\n      })\n    };\n  };\n\n  var _proto = SelectList.prototype;\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        className = _this$props4.className,\n        tabIndex = _this$props4.tabIndex,\n        busy = _this$props4.busy,\n        data = _this$props4.data,\n        busySpinner = _this$props4.busySpinner,\n        itemComponent = _this$props4.itemComponent,\n        groupComponent = _this$props4.groupComponent,\n        listProps = _this$props4.listProps;\n    var elementProps = Props.pickElementProps(this);\n    var _this$state3 = this.state,\n        focusedItem = _this$state3.focusedItem,\n        focused = _this$state3.focused,\n        accessors = _this$state3.accessors,\n        list = _this$state3.list,\n        messages = _this$state3.messages;\n    var List = this.props.listComponent;\n    var disabled = this.props.disabled === true,\n        readOnly = this.props.readOnly === true;\n    focusedItem = focused && !disabled && !readOnly && focusedItem;\n    return _react.default.createElement(_Widget.default, _extends({}, elementProps, {\n      id: this.widgetId,\n      onBlur: this.focusManager.handleBlur,\n      onFocus: this.focusManager.handleFocus,\n      onKeyDown: this.handleKeyDown,\n      onKeyPress: this.handleKeyPress,\n      focused: focused,\n      disabled: disabled,\n      readOnly: readOnly,\n      role: \"radiogroup\",\n      \"aria-busy\": !!busy,\n      \"aria-activedescendant\": this.activeId,\n      className: (0, _classnames.default)(className, 'rw-select-list', 'rw-widget-input', 'rw-widget-container')\n    }), _react.default.createElement(List, _extends({}, listProps, {\n      role: \"radiogroup\",\n      tabIndex: tabIndex || '0',\n      id: this.listId,\n      activeId: this.activeId,\n      data: data,\n      dataState: list.dataState,\n      isDisabled: list.isDisabled,\n      textAccessor: accessors.text,\n      valueAccessor: accessors.value,\n      itemComponent: itemComponent,\n      groupComponent: groupComponent,\n      optionComponent: this.renderListItem,\n      focusedItem: focusedItem,\n      onMove: this.handleScroll,\n      messages: {\n        emptyList: messages.emptyList\n      },\n      ref: this.attachListRef\n    })), busy && busySpinner);\n  };\n\n  _proto.focus = function focus() {\n    (0, _reactDom.findDOMNode)(this.refs.list).focus();\n  };\n\n  _proto.selectAll = function selectAll() {\n    var accessors = this.accessors;\n    var _this$props5 = this.props,\n        data = _this$props5.data,\n        disabled = _this$props5.disabled,\n        onChange = _this$props5.onChange;\n    var values = this.state.dataItems;\n    disabled = Array.isArray(disabled) ? disabled : [];\n    var disabledValues;\n    var enabledData = data;\n\n    if (disabled.length) {\n      disabledValues = values.filter(function (v) {\n        return accessors.includes(disabled, v);\n      });\n      enabledData = data.filter(function (v) {\n        return !accessors.includes(disabled, v);\n      });\n    }\n\n    var nextValues = values.length >= enabledData.length ? values.filter(function (v) {\n      return accessors.includes(disabled, v);\n    }) : enabledData.concat(disabledValues);\n    (0, _widgetHelpers.notify)(onChange, [nextValues]);\n  };\n\n  _proto.search = function search(character, originalEvent) {\n    var _this2 = this;\n\n    var _searchTerm = this._searchTerm,\n        list = this.list;\n    var word = ((_searchTerm || '') + character).toLowerCase();\n    var multiple = this.props.multiple;\n    if (!multiple) originalEvent.persist();\n    if (!character) return;\n    this._searchTerm = word;\n    this.timeouts.set('search', function () {\n      var focusedItem = list.next(_this2.state.focusedItem, word);\n      _this2._searchTerm = '';\n\n      if (focusedItem) {\n        !multiple ? _this2.handleChange(focusedItem, true, originalEvent) : _this2.setState({\n          focusedItem: focusedItem\n        });\n      }\n    }, this.props.delay);\n  };\n\n  return SelectList;\n}(_react.default.Component), _class3.propTypes = {\n  data: _propTypes.default.array,\n  value: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.array]),\n  onChange: _propTypes.default.func,\n\n  /**\n   * A handler called when focus shifts on the SelectList. Internally this is used to ensure the focused item is in view.\n   * If you want to define your own \"scrollTo\" behavior or just disable the default one specify an `onMove` handler.\n   * The handler is called with the relevant DOM nodes needed to implement scroll behavior: the list element,\n   * the element that is currently focused, and a focused value.\n   *\n   * @type {function(list: HTMLELement, focusedNode: HTMLElement, focusedItem: any)}\n   */\n  onMove: _propTypes.default.func,\n\n  /**\n   * Whether or not the SelectList allows multiple selection or not. when `false` the SelectList will\n   * render as a list of radio buttons, and checkboxes when `true`.\n   */\n  multiple: _propTypes.default.bool,\n  onKeyDown: _propTypes.default.func,\n  onKeyPress: _propTypes.default.func,\n  itemComponent: CustomPropTypes.elementType,\n  busySpinner: _propTypes.default.node,\n  listComponent: CustomPropTypes.elementType,\n  groupComponent: CustomPropTypes.elementType,\n  groupBy: CustomPropTypes.accessor,\n  valueField: CustomPropTypes.accessor,\n  textField: CustomPropTypes.accessor,\n  busy: _propTypes.default.bool,\n  delay: _propTypes.default.number,\n  autoFocus: _propTypes.default.bool,\n  disabled: CustomPropTypes.disabled.acceptsArray,\n  readOnly: CustomPropTypes.disabled,\n  listProps: _propTypes.default.object,\n  tabIndex: _propTypes.default.any,\n\n  /**\n   * The HTML `name` attribute used to group checkboxes and radio buttons\n   * together.\n   */\n  name: _propTypes.default.string,\n  isRtl: _propTypes.default.bool,\n  messages: _propTypes.default.shape({\n    emptyList: CustomPropTypes.message\n  })\n}, _class3.defaultProps = {\n  delay: 250,\n  value: [],\n  data: [],\n  busySpinner: _react.default.createElement(BusyMask, null),\n  listComponent: _List.default\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"handleKeyDown\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this3 = this;\n\n    return function (event) {\n      var multiple = _this3.props.multiple;\n      var _this3$state = _this3.state,\n          dataItems = _this3$state.dataItems,\n          focusedItem = _this3$state.focusedItem,\n          list = _this3$state.list,\n          accessors = _this3$state.accessors;\n      var keyCode = event.keyCode,\n          key = event.key,\n          ctrlKey = event.ctrlKey;\n\n      var change = function change(item) {\n        if (!item) return;\n        var checked = multiple ? !accessors.includes(dataItems, item) // toggle value\n        : true;\n\n        _this3.handleChange(item, checked, event);\n      };\n\n      (0, _widgetHelpers.notify)(_this3.props.onKeyDown, [event]);\n      if (event.defaultPrevented) return;\n\n      if (key === 'End') {\n        event.preventDefault();\n        focusedItem = list.last();\n\n        _this3.setState({\n          focusedItem: focusedItem\n        });\n\n        if (!multiple) change(focusedItem);\n      } else if (key === 'Home') {\n        event.preventDefault();\n        focusedItem = list.first();\n\n        _this3.setState({\n          focusedItem: focusedItem\n        });\n\n        if (!multiple) change(focusedItem);\n      } else if (key === 'Enter' || key === ' ') {\n        event.preventDefault();\n        change(focusedItem);\n      } else if (key === 'ArrowDown' || key === 'ArrowRight') {\n        event.preventDefault();\n        focusedItem = list.next(focusedItem);\n\n        _this3.setState({\n          focusedItem: focusedItem\n        });\n\n        if (!multiple) change(focusedItem);\n      } else if (key === 'ArrowUp' || key === 'ArrowLeft') {\n        event.preventDefault();\n        focusedItem = list.prev(focusedItem);\n\n        _this3.setState({\n          focusedItem: focusedItem\n        });\n\n        if (!multiple) change(focusedItem);\n      } else if (multiple && keyCode === 65 && ctrlKey) {\n        event.preventDefault();\n\n        _this3.selectAll();\n      }\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"handleKeyPress\", [_interaction.widgetEditable], {\n  enumerable: true,\n  initializer: function initializer() {\n    var _this4 = this;\n\n    return function (event) {\n      (0, _widgetHelpers.notify)(_this4.props.onKeyPress, [event]);\n      if (event.defaultPrevented) return;\n\n      _this4.search(String.fromCharCode(event.which), event);\n    };\n  }\n})), _class2)) || _class;\n\nvar _default = (0, _uncontrollable.default)(SelectList, {\n  value: 'onChange'\n}, ['selectAll', 'focus']);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}