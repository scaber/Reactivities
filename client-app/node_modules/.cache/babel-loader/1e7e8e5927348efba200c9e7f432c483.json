{"ast":null,"code":"import React,{useContext,useEffect}from'react';import{Grid}from'semantic-ui-react';import{observer}from'mobx-react-lite';import LoadingComponent from'../../../app/layout/LoadingComponent';import ActivityDetailedHeader from'./ActivityDetailedHeader';import ActivityDetailedInfo from'./ActivityDetailedInfo';import ActivityDetailedChat from'./ActivityDetailedChat';import ActivityDetailedSidebar from'./ActivityDetailedSidebar';import{RootStoreContext}from'../../../app/stores/rootStore';var ActivityDetails=function ActivityDetails(_ref){var match=_ref.match,history=_ref.history;var rootStore=useContext(RootStoreContext);var _rootStore$activitySt=rootStore.activityStore,activity=_rootStore$activitySt.activity,loadActivity=_rootStore$activitySt.loadActivity,loadingInitial=_rootStore$activitySt.loadingInitial;useEffect(function(){loadActivity(match.params.id);},[loadActivity,match.params.id,history]);if(loadingInitial)return/*#__PURE__*/React.createElement(LoadingComponent,{content:\"Loading activity...\"});if(!activity)return/*#__PURE__*/React.createElement(\"h2\",null,\"Activity not found\");return/*#__PURE__*/React.createElement(Grid,null,/*#__PURE__*/React.createElement(Grid.Column,{width:10},/*#__PURE__*/React.createElement(ActivityDetailedHeader,{activity:activity}),/*#__PURE__*/React.createElement(ActivityDetailedInfo,{activity:activity}),/*#__PURE__*/React.createElement(ActivityDetailedChat,null)),/*#__PURE__*/React.createElement(Grid.Column,{width:6},/*#__PURE__*/React.createElement(ActivityDetailedSidebar,{attendees:activity.attendees})));};export default observer(ActivityDetails);","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/src/features/activities/details/ActivityDetails.tsx"],"names":["React","useContext","useEffect","Grid","observer","LoadingComponent","ActivityDetailedHeader","ActivityDetailedInfo","ActivityDetailedChat","ActivityDetailedSidebar","RootStoreContext","ActivityDetails","match","history","rootStore","activityStore","activity","loadActivity","loadingInitial","params","id","attendees"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,SAA5B,KAA6C,OAA7C,CACA,OAASC,IAAT,KAAqB,mBAArB,CACA,OAASC,QAAT,KAAyB,iBAAzB,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,sCAA7B,CACA,MAAOC,CAAAA,sBAAP,KAAmC,0BAAnC,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,2BAApC,CACA,OAASC,gBAAT,KAAiC,+BAAjC,CAMA,GAAMC,CAAAA,eAA4D,CAAG,QAA/DA,CAAAA,eAA+D,MAG/D,IAFJC,CAAAA,KAEI,MAFJA,KAEI,CADJC,OACI,MADJA,OACI,CACJ,GAAMC,CAAAA,SAAS,CAAGb,UAAU,CAACS,gBAAD,CAA5B,CADI,0BAE+CI,SAAS,CAACC,aAFzD,CAEIC,QAFJ,uBAEIA,QAFJ,CAEcC,YAFd,uBAEcA,YAFd,CAE4BC,cAF5B,uBAE4BA,cAF5B,CAIJhB,SAAS,CAAC,UAAM,CACde,YAAY,CAACL,KAAK,CAACO,MAAN,CAAaC,EAAd,CAAZ,CACD,CAFQ,CAEN,CAACH,YAAD,CAAeL,KAAK,CAACO,MAAN,CAAaC,EAA5B,CAAgCP,OAAhC,CAFM,CAAT,CAIA,GAAIK,cAAJ,CAAoB,mBAAO,oBAAC,gBAAD,EAAkB,OAAO,CAAC,qBAA1B,EAAP,CAEpB,GAAI,CAACF,QAAL,CAAe,mBAAO,mDAAP,CAEf,mBACE,oBAAC,IAAD,mBACE,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,eACE,oBAAC,sBAAD,EAAwB,QAAQ,CAAEA,QAAlC,EADF,cAEE,oBAAC,oBAAD,EAAsB,QAAQ,CAAEA,QAAhC,EAFF,cAGE,oBAAC,oBAAD,MAHF,CADF,cAME,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,CAApB,eACE,oBAAC,uBAAD,EAAyB,SAAS,CAAEA,QAAQ,CAACK,SAA7C,EADF,CANF,CADF,CAYD,CA3BD,CA6BA,cAAejB,CAAAA,QAAQ,CAACO,eAAD,CAAvB","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\n\n  useEffect(() => {\n    loadActivity(match.params.id);\n  }, [loadActivity, match.params.id, history]);\n\n  if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\n\n  if (!activity) return <h2>Activity not found</h2>;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity} />\n        <ActivityDetailedInfo activity={activity} />\n        <ActivityDetailedChat />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar attendees={activity.attendees} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n"]},"metadata":{},"sourceType":"module"}