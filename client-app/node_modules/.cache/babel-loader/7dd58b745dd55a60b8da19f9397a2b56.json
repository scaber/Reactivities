{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.FileUtil = void 0;\n\nvar _GeoJSON = _interopRequireDefault(require(\"ol/format/GeoJSON\"));\n\nvar _Vector = _interopRequireDefault(require(\"ol/layer/Vector\"));\n\nvar _Vector2 = _interopRequireDefault(require(\"ol/source/Vector\"));\n\nvar _shpjs = _interopRequireDefault(require(\"shpjs\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Helper class for adding layers from various file formats.\n *\n * @class\n */\n\n\nvar FileUtil =\n/*#__PURE__*/\nfunction () {\n  function FileUtil() {\n    _classCallCheck(this, FileUtil);\n  }\n\n  _createClass(FileUtil, null, [{\n    key: \"addGeojsonLayerFromFile\",\n\n    /**\n     * Adds a new vector layer from a geojson file.\n     * @param {File} file the file to read the geojson from\n     * @param {ol.Map} map the map to add the layer to\n     */\n    value: function addGeojsonLayerFromFile(file, map) {\n      var reader = new FileReader();\n      reader.readAsText(file);\n      reader.addEventListener('loadend', function () {\n        var content = reader.result;\n        FileUtil.addGeojsonLayer(content, map);\n      });\n    }\n    /**\n     * Adds a new vector layer from a shape file (zip).\n     * @param {File} file the file to read the geojson from\n     * @param {ol.Map} map the map to add the layer to\n     */\n\n  }, {\n    key: \"addShpLayerFromFile\",\n    value: function addShpLayerFromFile(file, map) {\n      var reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.addEventListener('loadend', function () {\n        var blob = reader.result;\n        (0, _shpjs[\"default\"])(blob).then(function (json) {\n          FileUtil.addGeojsonLayer(json, map);\n        });\n      });\n    }\n    /**\n     * Adds a new vector layer from a geojson string.\n     * @param {string} json the geojson string\n     * @param {ol.Map} map the map to add the layer to\n     */\n\n  }, {\n    key: \"addGeojsonLayer\",\n    value: function addGeojsonLayer(json, map) {\n      var format = new _GeoJSON[\"default\"]();\n      var features = format.readFeatures(json);\n      var layer = new _Vector[\"default\"]({\n        source: new _Vector2[\"default\"]({\n          features: features\n        })\n      });\n      map.addLayer(layer);\n    }\n  }]);\n\n  return FileUtil;\n}();\n\nexports.FileUtil = FileUtil;\nvar _default = FileUtil;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}