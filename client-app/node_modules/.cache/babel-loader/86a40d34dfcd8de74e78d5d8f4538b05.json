{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.callFocusEventHandler = callFocusEventHandler;\nexports.default = createFocusManager;\n\nvar _reactDom = require(\"react-dom\");\n\nvar _timeoutManager = _interopRequireDefault(require(\"./timeoutManager\"));\n\nvar _mountManager = _interopRequireDefault(require(\"./mountManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction callFocusEventHandler(inst, focused, e) {\n  var handler = inst.props[focused ? 'onFocus' : 'onBlur'];\n  handler && handler(e);\n}\n\nfunction createFocusManager(instance, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      willHandle = _ref.willHandle,\n      didHandle = _ref.didHandle,\n      onChange = _ref.onChange,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? function () {\n    return !!instance.props.disabled;\n  } : _ref$isDisabled;\n\n  var lastFocused;\n  var timeouts = (0, _timeoutManager.default)(instance);\n  var isMounted = (0, _mountManager.default)(instance);\n\n  function _handleFocus(focused, event) {\n    if (event && event.persist) event.persist();\n    if (willHandle && willHandle(focused, event) === false) return;\n    timeouts.set('focus', function () {\n      (0, _reactDom.unstable_batchedUpdates)(function () {\n        if (focused !== lastFocused) {\n          if (didHandle) didHandle.call(instance, focused, event); // only fire a change when unmounted if its a blur\n\n          if (isMounted() || !focused) {\n            lastFocused = focused;\n            onChange && onChange(focused, event);\n          }\n        }\n      });\n    });\n  }\n\n  return {\n    handleBlur: function handleBlur(event) {\n      if (!isDisabled()) _handleFocus(false, event);\n    },\n    handleFocus: function handleFocus(event) {\n      if (!isDisabled()) _handleFocus(true, event);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/react-component-managers/lib/focusManager.js"],"names":["exports","__esModule","callFocusEventHandler","default","createFocusManager","_reactDom","require","_timeoutManager","_interopRequireDefault","_mountManager","obj","inst","focused","e","handler","props","instance","_temp","_ref","willHandle","didHandle","onChange","_ref$isDisabled","isDisabled","disabled","lastFocused","timeouts","isMounted","_handleFocus","event","persist","set","unstable_batchedUpdates","call","handleBlur","handleFocus"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.callFocusEventHandler = callFocusEventHandler;\nexports.default = createFocusManager;\n\nvar _reactDom = require(\"react-dom\");\n\nvar _timeoutManager = _interopRequireDefault(require(\"./timeoutManager\"));\n\nvar _mountManager = _interopRequireDefault(require(\"./mountManager\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction callFocusEventHandler(inst, focused, e) {\n  var handler = inst.props[focused ? 'onFocus' : 'onBlur'];\n  handler && handler(e);\n}\n\nfunction createFocusManager(instance, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      willHandle = _ref.willHandle,\n      didHandle = _ref.didHandle,\n      onChange = _ref.onChange,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? function () {\n    return !!instance.props.disabled;\n  } : _ref$isDisabled;\n\n  var lastFocused;\n  var timeouts = (0, _timeoutManager.default)(instance);\n  var isMounted = (0, _mountManager.default)(instance);\n\n  function _handleFocus(focused, event) {\n    if (event && event.persist) event.persist();\n    if (willHandle && willHandle(focused, event) === false) return;\n    timeouts.set('focus', function () {\n      (0, _reactDom.unstable_batchedUpdates)(function () {\n        if (focused !== lastFocused) {\n          if (didHandle) didHandle.call(instance, focused, event); // only fire a change when unmounted if its a blur\n\n          if (isMounted() || !focused) {\n            lastFocused = focused;\n            onChange && onChange(focused, event);\n          }\n        }\n      });\n    });\n  }\n\n  return {\n    handleBlur: function handleBlur(event) {\n      if (!isDisabled()) _handleFocus(false, event);\n    },\n    handleFocus: function handleFocus(event) {\n      if (!isDisabled()) _handleFocus(true, event);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}