{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A label can be grouped.\n */\n\nfunction LabelGroup(props) {\n  var children = props.children,\n      circular = props.circular,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      size = props.size,\n      tag = props.tag;\n  var classes = cx('ui', color, size, useKeyOnly(circular, 'circular'), useKeyOnly(tag, 'tag'), 'labels', className);\n  var rest = getUnhandledProps(LabelGroup, props);\n  var ElementType = getElementType(LabelGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLabelGroup.handledProps = [\"as\", \"children\", \"circular\", \"className\", \"color\", \"content\", \"size\", \"tag\"];\nLabelGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Labels can share shapes. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Label group can share colors together. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Label group can share sizes together. */\n  size: PropTypes.oneOf(SUI.SIZES),\n\n  /** Label group can share tag formatting. */\n  tag: PropTypes.bool\n} : {};\nexport default LabelGroup;","map":{"version":3,"sources":["C:/Projects/Reactivities/client-app/node_modules/semantic-ui-react/dist/es/elements/Label/LabelGroup.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","LabelGroup","props","children","circular","className","color","content","size","tag","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","node","bool","string","oneOf","COLORS","contentShorthand","SIZES"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,GAA5E,EAAiFC,UAAjF,QAAmG,WAAnG;AACA;;;;AAIA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;AAAA,MAGIC,KAAK,GAAGJ,KAAK,CAACI,KAHlB;AAAA,MAIIC,OAAO,GAAGL,KAAK,CAACK,OAJpB;AAAA,MAKIC,IAAI,GAAGN,KAAK,CAACM,IALjB;AAAA,MAMIC,GAAG,GAAGP,KAAK,CAACO,GANhB;AAOA,MAAIC,OAAO,GAAGlB,EAAE,CAAC,IAAD,EAAOc,KAAP,EAAcE,IAAd,EAAoBR,UAAU,CAACI,QAAD,EAAW,UAAX,CAA9B,EAAsDJ,UAAU,CAACS,GAAD,EAAM,KAAN,CAAhE,EAA8E,QAA9E,EAAwFJ,SAAxF,CAAhB;AACA,MAAIM,IAAI,GAAGb,iBAAiB,CAACG,UAAD,EAAaC,KAAb,CAA5B;AACA,MAAIU,WAAW,GAAGf,cAAc,CAACI,UAAD,EAAaC,KAAb,CAAhC;AACA,SAAOR,KAAK,CAACmB,aAAN,CAAoBD,WAApB,EAAiCrB,QAAQ,CAAC,EAAD,EAAKoB,IAAL,EAAW;AACzDN,IAAAA,SAAS,EAAEK;AAD8C,GAAX,CAAzC,EAEHf,aAAa,CAACmB,KAAd,CAAoBX,QAApB,IAAgCI,OAAhC,GAA0CJ,QAFvC,CAAP;AAGD;;AAEDF,UAAU,CAACc,YAAX,GAA0B,CAAC,IAAD,EAAO,UAAP,EAAmB,UAAnB,EAA+B,WAA/B,EAA4C,OAA5C,EAAqD,SAArD,EAAgE,MAAhE,EAAwE,KAAxE,CAA1B;AACAd,UAAU,CAACe,SAAX,GAAuBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC7D;AACAC,EAAAA,EAAE,EAAExB,eAAe,CAACwB,EAFyC;;AAI7D;AACAjB,EAAAA,QAAQ,EAAEV,SAAS,CAAC4B,IALyC;;AAO7D;AACAjB,EAAAA,QAAQ,EAAEX,SAAS,CAAC6B,IARyC;;AAU7D;AACAjB,EAAAA,SAAS,EAAEZ,SAAS,CAAC8B,MAXwC;;AAa7D;AACAjB,EAAAA,KAAK,EAAEb,SAAS,CAAC+B,KAAV,CAAgBzB,GAAG,CAAC0B,MAApB,CAdsD;;AAgB7D;AACAlB,EAAAA,OAAO,EAAEX,eAAe,CAAC8B,gBAjBoC;;AAmB7D;AACAlB,EAAAA,IAAI,EAAEf,SAAS,CAAC+B,KAAV,CAAgBzB,GAAG,CAAC4B,KAApB,CApBuD;;AAsB7D;AACAlB,EAAAA,GAAG,EAAEhB,SAAS,CAAC6B;AAvB8C,CAAxC,GAwBnB,EAxBJ;AAyBA,eAAerB,UAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A label can be grouped.\n */\n\nfunction LabelGroup(props) {\n  var children = props.children,\n      circular = props.circular,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      size = props.size,\n      tag = props.tag;\n  var classes = cx('ui', color, size, useKeyOnly(circular, 'circular'), useKeyOnly(tag, 'tag'), 'labels', className);\n  var rest = getUnhandledProps(LabelGroup, props);\n  var ElementType = getElementType(LabelGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLabelGroup.handledProps = [\"as\", \"children\", \"circular\", \"className\", \"color\", \"content\", \"size\", \"tag\"];\nLabelGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Labels can share shapes. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Label group can share colors together. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Label group can share sizes together. */\n  size: PropTypes.oneOf(SUI.SIZES),\n\n  /** Label group can share tag formatting. */\n  tag: PropTypes.bool\n} : {};\nexport default LabelGroup;"]},"metadata":{},"sourceType":"module"}