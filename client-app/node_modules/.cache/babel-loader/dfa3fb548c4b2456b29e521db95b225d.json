{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component } from \"../../widgets/component\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { SetLeftFeature } from \"../../rendering/features/setLeftFeature\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { _ } from \"../../utils\";\nimport { Constants } from \"../../constants\";\n\nvar HeaderGroupWrapperComp =\n/** @class */\nfunction (_super) {\n  __extends(HeaderGroupWrapperComp, _super);\n\n  function HeaderGroupWrapperComp(columnGroup, dragSourceDropTarget, pinned) {\n    var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this; // the children can change, we keep destroy functions related to listening to the children here\n\n\n    _this.childColumnsDestroyFuncs = [];\n    _this.columnGroup = columnGroup;\n    _this.dragSourceDropTarget = dragSourceDropTarget;\n    _this.pinned = pinned;\n    return _this;\n  }\n\n  HeaderGroupWrapperComp.prototype.postConstruct = function () {\n    CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);\n    var displayName = this.columnController.getDisplayNameForColumnGroup(this.columnGroup, 'header');\n    this.appendHeaderGroupComp(displayName);\n    this.setupResize();\n    this.addClasses();\n    this.setupWidth();\n    this.addAttributes();\n    this.setupMovingCss();\n    this.setupTooltip();\n    this.addFeature(new HoverFeature(this.columnGroup.getOriginalColumnGroup().getLeafColumns(), this.getGui()));\n    var setLeftFeature = new SetLeftFeature(this.columnGroup, this.getGui(), this.beans);\n    setLeftFeature.init();\n    this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));\n  };\n\n  HeaderGroupWrapperComp.prototype.setupMovingCss = function () {\n    var _this = this;\n\n    var originalColumnGroup = this.columnGroup.getOriginalColumnGroup();\n    var leafColumns = originalColumnGroup.getLeafColumns();\n    leafColumns.forEach(function (col) {\n      _this.addDestroyableEventListener(col, Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));\n    });\n    this.onColumnMovingChanged();\n  };\n\n  HeaderGroupWrapperComp.prototype.getColumn = function () {\n    return this.columnGroup;\n  };\n\n  HeaderGroupWrapperComp.prototype.getComponentHolder = function () {\n    return this.columnGroup.getColGroupDef();\n  };\n\n  HeaderGroupWrapperComp.prototype.getTooltipText = function () {\n    var colGroupDef = this.getComponentHolder();\n    return colGroupDef && colGroupDef.headerTooltip;\n  };\n\n  HeaderGroupWrapperComp.prototype.setupTooltip = function () {\n    var tooltipText = this.getTooltipText();\n\n    if (tooltipText == null) {\n      return;\n    }\n\n    if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {\n      this.getGui().setAttribute('title', tooltipText);\n    } else {\n      this.beans.tooltipManager.registerTooltip(this);\n    }\n  };\n\n  HeaderGroupWrapperComp.prototype.onColumnMovingChanged = function () {\n    // this function adds or removes the moving css, based on if the col is moving.\n    // this is what makes the header go dark when it is been moved (gives impression to\n    // user that the column was picked up).\n    _.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-moving', this.columnGroup.isMoving());\n  };\n\n  HeaderGroupWrapperComp.prototype.addAttributes = function () {\n    this.getGui().setAttribute(\"col-id\", this.columnGroup.getUniqueId());\n  };\n\n  HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {\n    var _this = this;\n\n    var params = {\n      displayName: displayName,\n      columnGroup: this.columnGroup,\n      setExpanded: function (expanded) {\n        _this.columnController.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded, \"gridInitializing\");\n      },\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      context: this.gridOptionsWrapper.getContext()\n    };\n\n    if (!displayName) {\n      var columnGroup = this.columnGroup;\n      var leafCols = columnGroup.getLeafColumns(); // find the top most column group that represents the same columns. so if we are dragging a group, we also\n      // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n      // of grouping, with each group only containing the next group, and the last group containing three columns,\n      // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n      // the groups represent the same column set.\n\n      while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n        columnGroup = columnGroup.getParent();\n      }\n\n      var colGroupDef = columnGroup.getColGroupDef();\n\n      if (colGroupDef) {\n        displayName = colGroupDef.headerName;\n      }\n\n      if (!displayName) {\n        displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], 'header', true) : '';\n      }\n    }\n\n    var callback = this.afterHeaderCompCreated.bind(this, displayName);\n    this.userComponentFactory.newHeaderGroupComponent(params).then(callback);\n  };\n\n  HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerGroupComp) {\n    this.appendChild(headerGroupComp);\n    this.setupMove(headerGroupComp.getGui(), displayName);\n  };\n\n  HeaderGroupWrapperComp.prototype.addClasses = function () {\n    // having different classes below allows the style to not have a bottom border\n    // on the group header, if no group is specified\n    // columnGroup.getColGroupDef\n    var style = this.columnGroup.isPadding() ? 'no' : 'with';\n    this.addCssClass(\"ag-header-group-cell-\" + style + \"-group\");\n  };\n\n  HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {\n    var _this = this;\n\n    if (!eHeaderGroup) {\n      return;\n    }\n\n    if (this.isSuppressMoving()) {\n      return;\n    }\n\n    var allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();\n    var dragSource = {\n      type: DragSourceType.HeaderCell,\n      eElement: eHeaderGroup,\n      dragItemName: displayName,\n      // we add in the original group leaf columns, so we move both visible and non-visible items\n      getDragItem: this.getDragItemForGroup.bind(this),\n      dragSourceDropTarget: this.dragSourceDropTarget,\n      onDragStarted: function () {\n        return allLeafColumns.forEach(function (col) {\n          return col.setMoving(true, \"uiColumnDragged\");\n        });\n      },\n      onDragStopped: function () {\n        return allLeafColumns.forEach(function (col) {\n          return col.setMoving(false, \"uiColumnDragged\");\n        });\n      }\n    };\n    this.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.dragAndDropService.removeDragSource(dragSource);\n    });\n  }; // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n  // and in the order they are currently in the screen.\n\n\n  HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {\n    var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns(); // capture visible state, used when re-entering grid to dictate which columns should be visible\n\n    var visibleState = {};\n    allColumnsOriginalOrder.forEach(function (column) {\n      return visibleState[column.getId()] = column.isVisible();\n    });\n    var allColumnsCurrentOrder = [];\n    this.columnController.getAllDisplayedColumns().forEach(function (column) {\n      if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n        allColumnsCurrentOrder.push(column);\n\n        _.removeFromArray(allColumnsOriginalOrder, column);\n      }\n    }); // we are left with non-visible columns, stick these in at the end\n\n    allColumnsOriginalOrder.forEach(function (column) {\n      return allColumnsCurrentOrder.push(column);\n    }); // create and return dragItem\n\n    return {\n      columns: allColumnsCurrentOrder,\n      visibleState: visibleState\n    };\n  };\n\n  HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {\n    // if any child is fixed, then don't allow moving\n    var childSuppressesMoving = false;\n    this.columnGroup.getLeafColumns().forEach(function (column) {\n      if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n        childSuppressesMoving = true;\n      }\n    });\n    var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n    return result;\n  };\n\n  HeaderGroupWrapperComp.prototype.setupWidth = function () {\n    // we need to listen to changes in child columns, as they impact our width\n    this.addListenersToChildrenColumns(); // the children belonging to this group can change, so we need to add and remove listeners as they change\n\n    this.addDestroyableEventListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n    this.onWidthChanged(); // the child listeners are not tied to this components life-cycle, as children can get added and removed\n    // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n    // listeners are removed when we finally get destroyed\n\n    this.addDestroyFunc(this.destroyListenersOnChildrenColumns.bind(this));\n  };\n\n  HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {\n    this.addListenersToChildrenColumns();\n    this.onWidthChanged();\n  };\n\n  HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {\n    var _this = this; // first destroy any old listeners\n\n\n    this.destroyListenersOnChildrenColumns(); // now add new listeners to the new set of children\n\n    var widthChangedListener = this.onWidthChanged.bind(this);\n    this.columnGroup.getLeafColumns().forEach(function (column) {\n      column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n      column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n\n      _this.childColumnsDestroyFuncs.push(function () {\n        column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n        column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n      });\n    });\n  };\n\n  HeaderGroupWrapperComp.prototype.destroyListenersOnChildrenColumns = function () {\n    this.childColumnsDestroyFuncs.forEach(function (func) {\n      return func();\n    });\n    this.childColumnsDestroyFuncs = [];\n  };\n\n  HeaderGroupWrapperComp.prototype.onWidthChanged = function () {\n    this.getGui().style.width = this.columnGroup.getActualWidth() + 'px';\n  };\n\n  HeaderGroupWrapperComp.prototype.setupResize = function () {\n    var _this = this;\n\n    this.eHeaderCellResize = this.getRefElement('agResize');\n\n    if (!this.columnGroup.isResizable()) {\n      _.removeFromParent(this.eHeaderCellResize);\n\n      return;\n    }\n\n    var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n      eResizeBar: this.eHeaderCellResize,\n      onResizeStart: this.onResizeStart.bind(this),\n      onResizing: this.onResizing.bind(this, false),\n      onResizeEnd: this.onResizing.bind(this, true)\n    });\n    this.addDestroyFunc(finishedWithResizeFunc);\n\n    if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n      var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n      this.eHeaderCellResize.addEventListener('dblclick', function (event) {\n        // get list of all the column keys we are responsible for\n        var keys = [];\n\n        _this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {\n          // not all cols in the group may be participating with auto-resize\n          if (!column.getColDef().suppressAutoSize) {\n            keys.push(column.getColId());\n          }\n        });\n\n        if (keys.length > 0) {\n          _this.columnController.autoSizeColumns(keys, skipHeaderOnAutoSize_1, \"uiColumnResized\");\n        }\n      });\n    }\n  };\n\n  HeaderGroupWrapperComp.prototype.onResizeStart = function (shiftKey) {\n    var _this = this;\n\n    var leafCols = this.columnGroup.getDisplayedLeafColumns();\n    this.resizeCols = leafCols.filter(function (col) {\n      return col.isResizable();\n    });\n    this.resizeStartWidth = 0;\n    this.resizeCols.forEach(function (col) {\n      return _this.resizeStartWidth += col.getActualWidth();\n    });\n    this.resizeRatios = [];\n    this.resizeCols.forEach(function (col) {\n      return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);\n    });\n    var takeFromGroup = null;\n\n    if (shiftKey) {\n      takeFromGroup = this.columnController.getDisplayedGroupAfter(this.columnGroup);\n    }\n\n    if (takeFromGroup) {\n      var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n      this.resizeTakeFromCols = takeFromLeafCols.filter(function (col) {\n        return col.isResizable();\n      });\n      this.resizeTakeFromStartWidth = 0;\n      this.resizeTakeFromCols.forEach(function (col) {\n        return _this.resizeTakeFromStartWidth += col.getActualWidth();\n      });\n      this.resizeTakeFromRatios = [];\n      this.resizeTakeFromCols.forEach(function (col) {\n        return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);\n      });\n    } else {\n      this.resizeTakeFromCols = null;\n      this.resizeTakeFromStartWidth = null;\n      this.resizeTakeFromRatios = null;\n    }\n\n    _.addCssClass(this.getGui(), 'ag-column-resizing');\n  };\n\n  HeaderGroupWrapperComp.prototype.onResizing = function (finished, resizeAmount) {\n    var resizeSets = [];\n    var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n    resizeSets.push({\n      columns: this.resizeCols,\n      ratios: this.resizeRatios,\n      width: this.resizeStartWidth + resizeAmountNormalised\n    });\n\n    if (this.resizeTakeFromCols) {\n      resizeSets.push({\n        columns: this.resizeTakeFromCols,\n        ratios: this.resizeTakeFromRatios,\n        width: this.resizeTakeFromStartWidth - resizeAmountNormalised\n      });\n    }\n\n    this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');\n\n    if (finished) {\n      _.removeCssClass(this.getGui(), 'ag-column-resizing');\n    }\n  }; // optionally inverts the drag, depending on pinned and RTL\n  // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n\n\n  HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {\n    var result = dragChange;\n\n    if (this.gridOptionsWrapper.isEnableRtl()) {\n      // for RTL, dragging left makes the col bigger, except when pinning left\n      if (this.pinned !== Constants.PINNED_LEFT) {\n        result *= -1;\n      }\n    } else if (this.pinned === Constants.PINNED_RIGHT) {\n      // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n      result *= -1;\n    }\n\n    return result;\n  };\n\n  HeaderGroupWrapperComp.TEMPLATE = '<div class=\"ag-header-group-cell\" role=\"presentation\">' + '  <div ref=\"agResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>' + '</div>';\n\n  __decorate([Autowired('gridOptionsWrapper')], HeaderGroupWrapperComp.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnController')], HeaderGroupWrapperComp.prototype, \"columnController\", void 0);\n\n  __decorate([Autowired('horizontalResizeService')], HeaderGroupWrapperComp.prototype, \"horizontalResizeService\", void 0);\n\n  __decorate([Autowired('dragAndDropService')], HeaderGroupWrapperComp.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Autowired('userComponentFactory')], HeaderGroupWrapperComp.prototype, \"userComponentFactory\", void 0);\n\n  __decorate([Autowired('gridApi')], HeaderGroupWrapperComp.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], HeaderGroupWrapperComp.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('beans')], HeaderGroupWrapperComp.prototype, \"beans\", void 0);\n\n  __decorate([PostConstruct], HeaderGroupWrapperComp.prototype, \"postConstruct\", null);\n\n  return HeaderGroupWrapperComp;\n}(Component);\n\nexport { HeaderGroupWrapperComp };","map":null,"metadata":{},"sourceType":"module"}