{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v22.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { EventService } from \"../eventService\";\nimport { _ } from \"../utils\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { Constants } from \"../constants\";\nimport { ModuleNames } from \"../modules/moduleNames\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\"; // Wrapper around a user provide column definition. The grid treats the column definition as ready only.\n// This class contains all the runtime information about a column, plus some logic (the definition has no logic).\n// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can\n// appear as a child of either the original tree or the displayed tree. However the relevant group classes\n// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup\n// can only appear in OriginalColumn tree).\n\nvar Column =\n/** @class */\nfunction () {\n  function Column(colDef, userProvidedColDef, colId, primary) {\n    this.moving = false;\n    this.menuVisible = false;\n    this.filterActive = false;\n    this.eventService = new EventService();\n    this.rowGroupActive = false;\n    this.pivotActive = false;\n    this.aggregationActive = false;\n    this.colDef = colDef;\n    this.userProvidedColDef = userProvidedColDef;\n    this.visible = !colDef.hide;\n    this.sort = colDef.sort;\n    this.sortedAt = colDef.sortedAt;\n    this.colId = colId;\n    this.primary = primary;\n  } // gets called when user provides an alternative colDef, eg\n\n\n  Column.prototype.setColDef = function (colDef, userProvidedColDef) {\n    this.colDef = colDef;\n    this.userProvidedColDef = userProvidedColDef;\n  };\n\n  Column.prototype.getUserProvidedColDef = function () {\n    return this.userProvidedColDef;\n  };\n\n  Column.prototype.setParent = function (parent) {\n    this.parent = parent;\n  };\n\n  Column.prototype.getParent = function () {\n    return this.parent;\n  };\n\n  Column.prototype.setOriginalParent = function (originalParent) {\n    this.originalParent = originalParent;\n  };\n\n  Column.prototype.getOriginalParent = function () {\n    return this.originalParent;\n  }; // this is done after constructor as it uses gridOptionsWrapper\n\n\n  Column.prototype.initialise = function () {\n    this.setPinned(this.colDef.pinned);\n    var minColWidth = this.gridOptionsWrapper.getMinColWidth();\n    var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();\n\n    if (this.colDef.minWidth) {\n      this.minWidth = this.colDef.minWidth;\n    } else {\n      this.minWidth = minColWidth;\n    }\n\n    if (this.colDef.maxWidth) {\n      this.maxWidth = this.colDef.maxWidth;\n    } else {\n      this.maxWidth = maxColWidth;\n    }\n\n    if (this.colDef.flex) {\n      this.flex = this.colDef.flex;\n    }\n\n    this.actualWidth = this.columnUtils.calculateColInitialWidth(this.colDef);\n    var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();\n    this.fieldContainsDots = _.exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;\n    this.tooltipFieldContainsDots = _.exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;\n    this.validate();\n  };\n\n  Column.prototype.isEmptyGroup = function () {\n    return false;\n  };\n\n  Column.prototype.isRowGroupDisplayed = function (colId) {\n    if (_.missing(this.colDef) || _.missing(this.colDef.showRowGroup)) {\n      return false;\n    }\n\n    var showingAllGroups = this.colDef.showRowGroup === true;\n    var showingThisGroup = this.colDef.showRowGroup === colId;\n    return showingAllGroups || showingThisGroup;\n  };\n\n  Column.prototype.getUniqueId = function () {\n    return this.getId();\n  };\n\n  Column.prototype.isPrimary = function () {\n    return this.primary;\n  };\n\n  Column.prototype.isFilterAllowed = function () {\n    // filter defined means it's a string, class or true.\n    // if its false, null or undefined then it's false.\n    var filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;\n    return this.primary && filterDefined;\n  };\n\n  Column.prototype.isFieldContainsDots = function () {\n    return this.fieldContainsDots;\n  };\n\n  Column.prototype.isTooltipFieldContainsDots = function () {\n    return this.tooltipFieldContainsDots;\n  };\n\n  Column.prototype.validate = function () {\n    var colDefAny = this.colDef;\n\n    function warnOnce(msg, key, obj) {\n      _.doOnce(function () {\n        if (obj) {\n          console.warn(msg, obj);\n        } else {\n          _.doOnce(function () {\n            return console.warn(msg);\n          }, key);\n        }\n      }, key);\n    }\n\n    if (!ModuleRegistry.isRegistered(ModuleNames.RowGroupingModule)) {\n      var rowGroupingItems = ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'enableValue', 'pivot', 'pivotIndex', 'aggFunc'];\n      rowGroupingItems.forEach(function (item) {\n        if (_.exists(colDefAny[item])) {\n          warnOnce(\"ag-Grid: \" + item + \" is only valid with module Row Grouping, your column definition \" + (\"should not have \" + item), 'ColumnRowGroupingMissing' + item);\n        }\n      });\n    }\n\n    if (!ModuleRegistry.isRegistered(ModuleNames.RichSelectModule)) {\n      if (this.colDef.cellEditor === 'agRichSelect' || this.colDef.cellEditor === 'agRichSelectCellEditor') {\n        warnOnce(\"ag-Grid: \" + this.colDef.cellEditor + \" can only be used with \" + (\"module \" + ModuleNames.RichSelectModule), 'ColumnRichSelectMissing');\n      }\n    }\n\n    if (this.gridOptionsWrapper.isTreeData()) {\n      var itemsNotAllowedWithTreeData = ['rowGroup', 'rowGroupIndex', 'pivot', 'pivotIndex'];\n      itemsNotAllowedWithTreeData.forEach(function (item) {\n        if (_.exists(colDefAny[item])) {\n          warnOnce(\"ag-Grid: \" + item + \" is not possible when doing tree data, your \" + (\"column definition should not have \" + item), 'TreeDataCannotRowGroup');\n        }\n      });\n    }\n\n    if (_.exists(this.colDef.width) && typeof this.colDef.width !== 'number') {\n      warnOnce('ag-Grid: colDef.width should be a number, not ' + typeof this.colDef.width, 'ColumnCheck_asdfawef');\n    }\n\n    if (_.get(this, 'colDef.cellRendererParams.restrictToOneGroup', null)) {\n      warnOnce('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.restrictToOneGroup is deprecated. You should use showRowGroup', 'ColumnCheck_sksldjf');\n    }\n\n    if (_.get(this, 'colDef.cellRendererParams.keyMap', null)) {\n      warnOnce('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator', 'ColumnCheck_ieiruhgdf');\n    }\n\n    if (_.get(this, 'colDef.cellRendererParams.keyMap', null)) {\n      warnOnce('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator', 'ColumnCheck_uitolghj');\n    }\n\n    if (colDefAny.floatingCellRenderer) {\n      warnOnce('ag-Grid: since v11, floatingCellRenderer is now pinnedRowCellRenderer', 'ColumnCheck_soihwewe');\n      this.colDef.pinnedRowCellRenderer = colDefAny.floatingCellRenderer;\n    }\n\n    if (colDefAny.floatingRendererFramework) {\n      warnOnce('ag-Grid: since v11, floatingRendererFramework is now pinnedRowCellRendererFramework', 'ColumnCheck_zdkiouhwer');\n      this.colDef.pinnedRowCellRendererFramework = colDefAny.floatingRendererFramework;\n    }\n\n    if (colDefAny.floatingRendererParams) {\n      console.warn('ag-Grid: since v11, floatingRendererParams is now pinnedRowCellRendererParams', 'ColumnCheck_retiuhjs');\n      this.colDef.pinnedRowCellRendererParams = colDefAny.floatingRendererParams;\n    }\n\n    if (colDefAny.floatingValueFormatter) {\n      warnOnce('ag-Grid: since v11, floatingValueFormatter is now pinnedRowValueFormatter', 'ColumnCheck_qwroeihjdf');\n      this.colDef.pinnedRowValueFormatter = colDefAny.floatingValueFormatter;\n    }\n\n    if (colDefAny.cellFormatter) {\n      warnOnce('ag-Grid: since v12, cellFormatter is now valueFormatter', 'ColumnCheck_eoireknml');\n\n      if (_.missing(this.colDef.valueFormatter)) {\n        this.colDef.valueFormatter = colDefAny.cellFormatter;\n      }\n    }\n\n    if (colDefAny.headerCellTemplate) {\n      warnOnce('ag-Grid: since v15, headerCellTemplate is gone, use header component instead.', 'ColumnCheck_eroihxcm');\n    }\n\n    if (colDefAny.headerCellRenderer) {\n      warnOnce('ag-Grid: since v15, headerCellRenderer is gone, use header component instead.', 'ColumnCheck_terteuh');\n    }\n\n    if (colDefAny.volatile) {\n      warnOnce('ag-Grid: since v16, colDef.volatile is gone, please check refresh docs on how to refresh specific cells.', 'ColumnCheck_weoihjxcv');\n    }\n\n    if (colDefAny.suppressSorting) {\n      warnOnce(\"ag-Grid: since v20, colDef.suppressSorting is gone, instead use colDef.sortable=false.\", 'ColumnCheck_43ljrer', this.colDef);\n      this.colDef.sortable = false;\n    }\n\n    if (colDefAny.suppressFilter) {\n      warnOnce(\"ag-Grid: since v20, colDef.suppressFilter is gone, instead use colDef.filter=false.\", 'ColumnCheck_erlkhfdm', this.colDef);\n      this.colDef.filter = false;\n    }\n\n    if (colDefAny.suppressResize) {\n      warnOnce(\"ag-Grid: since v20, colDef.suppressResize is gone, instead use colDef.resizable=false.\", 'ColumnCheck_weoihjxcv', this.colDef);\n      this.colDef.resizable = false;\n    }\n\n    if (colDefAny.tooltip) {\n      warnOnce(\"ag-Grid: since v20.1, colDef.tooltip is gone, instead use colDef.tooltipValueGetter.\", 'ColumnCheck_adslknjwef', this.colDef);\n      this.colDef.tooltipValueGetter = colDefAny.tooltip;\n    }\n\n    if (colDefAny.suppressToolPanel) {\n      warnOnce(\"ag-Grid: since v22, colDef.suppressToolPanel is gone, instead use suppressColumnsToolPanel / suppressFiltersToolPanel.\", 'ColumnCheck_weihjlsjkdf', this.colDef);\n      this.colDef.suppressColumnsToolPanel = true;\n    }\n  };\n\n  Column.prototype.addEventListener = function (eventType, listener) {\n    this.eventService.addEventListener(eventType, listener);\n  };\n\n  Column.prototype.removeEventListener = function (eventType, listener) {\n    this.eventService.removeEventListener(eventType, listener);\n  };\n\n  Column.prototype.createIsColumnFuncParams = function (rowNode) {\n    return {\n      node: rowNode,\n      data: rowNode.data,\n      column: this,\n      colDef: this.colDef,\n      context: this.gridOptionsWrapper.getContext(),\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi()\n    };\n  };\n\n  Column.prototype.isSuppressNavigable = function (rowNode) {\n    // if boolean set, then just use it\n    if (typeof this.colDef.suppressNavigable === 'boolean') {\n      return this.colDef.suppressNavigable;\n    } // if function, then call the function to find out\n\n\n    if (typeof this.colDef.suppressNavigable === 'function') {\n      var params = this.createIsColumnFuncParams(rowNode);\n      var userFunc = this.colDef.suppressNavigable;\n      return userFunc(params);\n    }\n\n    return false;\n  };\n\n  Column.prototype.isCellEditable = function (rowNode) {\n    // only allow editing of groups if the user has this option enabled\n    if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {\n      return false;\n    }\n\n    return this.isColumnFunc(rowNode, this.colDef.editable);\n  };\n\n  Column.prototype.isRowDrag = function (rowNode) {\n    return this.isColumnFunc(rowNode, this.colDef.rowDrag);\n  };\n\n  Column.prototype.isDndSource = function (rowNode) {\n    return this.isColumnFunc(rowNode, this.colDef.dndSource);\n  };\n\n  Column.prototype.isCellCheckboxSelection = function (rowNode) {\n    return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);\n  };\n\n  Column.prototype.isSuppressPaste = function (rowNode) {\n    return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);\n  };\n\n  Column.prototype.isResizable = function () {\n    return this.colDef.resizable === true;\n  };\n\n  Column.prototype.isColumnFunc = function (rowNode, value) {\n    // if boolean set, then just use it\n    if (typeof value === 'boolean') {\n      return value;\n    } // if function, then call the function to find out\n\n\n    if (typeof value === 'function') {\n      var params = this.createIsColumnFuncParams(rowNode);\n      var editableFunc = value;\n      return editableFunc(params);\n    }\n\n    return false;\n  };\n\n  Column.prototype.setMoving = function (moving, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.moving = moving;\n    this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED, source));\n  };\n\n  Column.prototype.createColumnEvent = function (type, source) {\n    return {\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      type: type,\n      column: this,\n      columns: [this],\n      source: source\n    };\n  };\n\n  Column.prototype.isMoving = function () {\n    return this.moving;\n  };\n\n  Column.prototype.getSort = function () {\n    return this.sort;\n  };\n\n  Column.prototype.setSort = function (sort, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.sort !== sort) {\n      this.sort = sort;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED, source));\n    }\n  };\n\n  Column.prototype.setMenuVisible = function (visible, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.menuVisible !== visible) {\n      this.menuVisible = visible;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isMenuVisible = function () {\n    return this.menuVisible;\n  };\n\n  Column.prototype.isSortAscending = function () {\n    return this.sort === Constants.SORT_ASC;\n  };\n\n  Column.prototype.isSortDescending = function () {\n    return this.sort === Constants.SORT_DESC;\n  };\n\n  Column.prototype.isSortNone = function () {\n    return _.missing(this.sort);\n  };\n\n  Column.prototype.isSorting = function () {\n    return _.exists(this.sort);\n  };\n\n  Column.prototype.getSortedAt = function () {\n    return this.sortedAt;\n  };\n\n  Column.prototype.setSortedAt = function (sortedAt) {\n    this.sortedAt = sortedAt;\n  };\n\n  Column.prototype.setAggFunc = function (aggFunc) {\n    this.aggFunc = aggFunc;\n  };\n\n  Column.prototype.getAggFunc = function () {\n    return this.aggFunc;\n  };\n\n  Column.prototype.getLeft = function () {\n    return this.left;\n  };\n\n  Column.prototype.getOldLeft = function () {\n    return this.oldLeft;\n  };\n\n  Column.prototype.getRight = function () {\n    return this.left + this.actualWidth;\n  };\n\n  Column.prototype.setLeft = function (left, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.oldLeft = this.left;\n\n    if (this.left !== left) {\n      this.left = left;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isFilterActive = function () {\n    return this.filterActive;\n  }; // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event\n\n\n  Column.prototype.setFilterActive = function (active, source, additionalEventAttributes) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.filterActive !== active) {\n      this.filterActive = active;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED, source));\n    }\n\n    var filterChangedEvent = this.createColumnEvent(Column.EVENT_FILTER_CHANGED, source);\n\n    if (additionalEventAttributes) {\n      _.mergeDeep(filterChangedEvent, additionalEventAttributes);\n    }\n\n    this.eventService.dispatchEvent(filterChangedEvent);\n  };\n\n  Column.prototype.setPinned = function (pinned) {\n    if (pinned === true || pinned === Constants.PINNED_LEFT) {\n      this.pinned = Constants.PINNED_LEFT;\n    } else if (pinned === Constants.PINNED_RIGHT) {\n      this.pinned = Constants.PINNED_RIGHT;\n    } else {\n      this.pinned = null;\n    }\n  };\n\n  Column.prototype.setFirstRightPinned = function (firstRightPinned, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.firstRightPinned !== firstRightPinned) {\n      this.firstRightPinned = firstRightPinned;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));\n    }\n  };\n\n  Column.prototype.setLastLeftPinned = function (lastLeftPinned, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.lastLeftPinned !== lastLeftPinned) {\n      this.lastLeftPinned = lastLeftPinned;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isFirstRightPinned = function () {\n    return this.firstRightPinned;\n  };\n\n  Column.prototype.isLastLeftPinned = function () {\n    return this.lastLeftPinned;\n  };\n\n  Column.prototype.isPinned = function () {\n    return this.pinned === Constants.PINNED_LEFT || this.pinned === Constants.PINNED_RIGHT;\n  };\n\n  Column.prototype.isPinnedLeft = function () {\n    return this.pinned === Constants.PINNED_LEFT;\n  };\n\n  Column.prototype.isPinnedRight = function () {\n    return this.pinned === Constants.PINNED_RIGHT;\n  };\n\n  Column.prototype.getPinned = function () {\n    return this.pinned;\n  };\n\n  Column.prototype.setVisible = function (visible, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    var newValue = visible === true;\n\n    if (this.visible !== newValue) {\n      this.visible = newValue;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isVisible = function () {\n    return this.visible;\n  };\n\n  Column.prototype.getColDef = function () {\n    return this.colDef;\n  };\n\n  Column.prototype.getColumnGroupShow = function () {\n    return this.colDef.columnGroupShow;\n  };\n\n  Column.prototype.getColId = function () {\n    return this.colId;\n  };\n\n  Column.prototype.getId = function () {\n    return this.getColId();\n  };\n\n  Column.prototype.getDefinition = function () {\n    return this.colDef;\n  };\n\n  Column.prototype.getActualWidth = function () {\n    return this.actualWidth;\n  };\n\n  Column.prototype.createBaseColDefParams = function (rowNode) {\n    var params = {\n      node: rowNode,\n      data: rowNode.data,\n      colDef: this.colDef,\n      column: this,\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi(),\n      context: this.gridOptionsWrapper.getContext()\n    };\n    return params;\n  };\n\n  Column.prototype.getColSpan = function (rowNode) {\n    if (_.missing(this.colDef.colSpan)) {\n      return 1;\n    }\n\n    var params = this.createBaseColDefParams(rowNode);\n    var colSpan = this.colDef.colSpan(params); // colSpan must be number equal to or greater than 1\n\n    return Math.max(colSpan, 1);\n  };\n\n  Column.prototype.getRowSpan = function (rowNode) {\n    if (_.missing(this.colDef.rowSpan)) {\n      return 1;\n    }\n\n    var params = this.createBaseColDefParams(rowNode);\n    var rowSpan = this.colDef.rowSpan(params); // rowSpan must be number equal to or greater than 1\n\n    return Math.max(rowSpan, 1);\n  };\n\n  Column.prototype.setActualWidth = function (actualWidth, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.minWidth != null) {\n      actualWidth = Math.max(actualWidth, this.minWidth);\n    }\n\n    if (this.maxWidth != null) {\n      actualWidth = Math.min(actualWidth, this.maxWidth);\n    }\n\n    if (this.actualWidth !== actualWidth) {\n      // disable flex for this column if it was manually resized.\n      if (this.flex && source !== 'flex') {\n        this.flex = 0;\n      }\n\n      this.actualWidth = actualWidth;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isGreaterThanMax = function (width) {\n    if (this.maxWidth != null) {\n      return width > this.maxWidth;\n    }\n\n    return false;\n  };\n\n  Column.prototype.getMinWidth = function () {\n    return this.minWidth;\n  };\n\n  Column.prototype.getMaxWidth = function () {\n    return this.maxWidth;\n  };\n\n  Column.prototype.getFlex = function () {\n    return this.flex || 0;\n  };\n\n  Column.prototype.setMinimum = function (source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.setActualWidth(this.minWidth, source);\n  };\n\n  Column.prototype.setRowGroupActive = function (rowGroup, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.rowGroupActive !== rowGroup) {\n      this.rowGroupActive = rowGroup;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isRowGroupActive = function () {\n    return this.rowGroupActive;\n  };\n\n  Column.prototype.setPivotActive = function (pivot, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.pivotActive !== pivot) {\n      this.pivotActive = pivot;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isPivotActive = function () {\n    return this.pivotActive;\n  };\n\n  Column.prototype.isAnyFunctionActive = function () {\n    return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();\n  };\n\n  Column.prototype.isAnyFunctionAllowed = function () {\n    return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();\n  };\n\n  Column.prototype.setValueActive = function (value, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    if (this.aggregationActive !== value) {\n      this.aggregationActive = value;\n      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED, source));\n    }\n  };\n\n  Column.prototype.isValueActive = function () {\n    return this.aggregationActive;\n  };\n\n  Column.prototype.isAllowPivot = function () {\n    return this.colDef.enablePivot === true;\n  };\n\n  Column.prototype.isAllowValue = function () {\n    return this.colDef.enableValue === true;\n  };\n\n  Column.prototype.isAllowRowGroup = function () {\n    return this.colDef.enableRowGroup === true;\n  };\n\n  Column.prototype.getMenuTabs = function (defaultValues) {\n    var menuTabs = this.getColDef().menuTabs;\n\n    if (menuTabs == null) {\n      menuTabs = defaultValues;\n    }\n\n    return menuTabs;\n  }; // this used to be needed, as previous version of ag-grid had lockPosition as column state,\n  // so couldn't depend on colDef version.\n\n\n  Column.prototype.isLockPosition = function () {\n    console.warn('ag-Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.');\n    return this.colDef ? !!this.colDef.lockPosition : false;\n  }; // this used to be needed, as previous version of ag-grid had lockVisible as column state,\n  // so couldn't depend on colDef version.\n\n\n  Column.prototype.isLockVisible = function () {\n    console.warn('ag-Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.');\n    return this.colDef ? !!this.colDef.lockVisible : false;\n  }; // this used to be needed, as previous version of ag-grid had lockPinned as column state,\n  // so couldn't depend on colDef version.\n\n\n  Column.prototype.isLockPinned = function () {\n    console.warn('ag-Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.');\n    return this.colDef ? !!this.colDef.lockPinned : false;\n  }; // + renderedHeaderCell - for making header cell transparent when moving\n\n\n  Column.EVENT_MOVING_CHANGED = 'movingChanged'; // + renderedCell - changing left position\n\n  Column.EVENT_LEFT_CHANGED = 'leftChanged'; // + renderedCell - changing width\n\n  Column.EVENT_WIDTH_CHANGED = 'widthChanged'; // + renderedCell - for changing pinned classes\n\n  Column.EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';\n  Column.EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged'; // + renderedColumn - for changing visibility icon\n\n  Column.EVENT_VISIBLE_CHANGED = 'visibleChanged'; // + every time the filter changes, used in the floating filters\n\n  Column.EVENT_FILTER_CHANGED = 'filterChanged'; // + renderedHeaderCell - marks the header with filter icon\n\n  Column.EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged'; // + renderedHeaderCell - marks the header with sort icon\n\n  Column.EVENT_SORT_CHANGED = 'sortChanged';\n  Column.EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged'; // + toolpanel, for gui updates\n\n  Column.EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged'; // + toolpanel, for gui updates\n\n  Column.EVENT_PIVOT_CHANGED = 'columnPivotChanged'; // + toolpanel, for gui updates\n\n  Column.EVENT_VALUE_CHANGED = 'columnValueChanged';\n\n  __decorate([Autowired('gridOptionsWrapper')], Column.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnUtils')], Column.prototype, \"columnUtils\", void 0);\n\n  __decorate([Autowired('columnApi')], Column.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], Column.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('context')], Column.prototype, \"context\", void 0);\n\n  __decorate([PostConstruct], Column.prototype, \"initialise\", null);\n\n  return Column;\n}();\n\nexport { Column };","map":null,"metadata":{},"sourceType":"module"}