{"ast":null,"code":"import { SIXTH, RA4, RA6, EPSLN } from './constants/values';\nimport { default as Ellipsoid, WGS84 } from './constants/Ellipsoid';\nimport match from './match';\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n\n  var b2 = b * b; // used in geocentric\n\n  var es = (a2 - b2) / a2; // e ^ 2\n\n  var e = 0;\n\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) {\n    // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}","map":null,"metadata":{},"sourceType":"module"}